{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.1", "generated_at": "2023-05-08T14:18:42.244165Z", "invocation_id": "1963aabe-85e8-4e32-a8d0-dc6da7b247f4", "env": {}, "project_id": "ce09ce136624b88930babb46cab92a95", "user_id": "510feb7f-d0c4-4905-bc75-f188a8248616", "send_anonymous_usage_stats": true, "adapter_type": "databricks"}, "nodes": {"model.Fingrid.b_substations": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_enriched", "name": "b_substations", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\b_substations.sql", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\b_substations.sql", "unique_id": "model.Fingrid.b_substations", "fqn": ["Fingrid", "sa_kunnonhallinta", "enriched", "b_substations"], "alias": "b_substations", "checksum": {"name": "sha256", "checksum": "04b42e092581cc93f93e24939a35e64b5f6dc9df5b5a4c40ee8b4abee3062bbd"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_enriched", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Kokoaa kaikki s\u00e4hk\u00f6asemiin perustuvien tietotuotteiden attribuutit yhteen malliin. \r\nLocationspec-taulusta noudetaan lis\u00e4attribuutit FGLAJI, LAJI ja RYHM\u00c4.", "columns": {"substation_cusbusinessid": {"name": "substation_cusbusinessid", "description": "cusbusinessid - Asema", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substation_name": {"name": "substation_name", "description": "substation_name - Aseman nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substation_location": {"name": "substation_location", "description": "location - Aseman sijainti", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tyyppi": {"name": "tyyppi", "description": "substation type - tukiaseman tyyppi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusvoltage": {"name": "cusvoltage", "description": "cusvoltage  - J\u00e4nnite", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea_desc": {"name": "cusworkarea_desc", "description": "cusworkarea_desc  - s\u00e4hk\u00f6asemat_tilaajan_ty\u00f6alue_nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea": {"name": "cusworkarea", "description": "cusworkarea - s\u00e4hk\u00f6asemat_tilaajan_ty\u00f6alue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region_description": {"name": "region_description", "description": "region_description - s\u00e4hk\u00f6asemat_tilaajan_alue_nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region_cusbusinessid": {"name": "region_cusbusinessid", "description": "region_cusbusinessid - s\u00e4hk\u00f6asemat_tilaajan_alue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusowner": {"name": "cusowner", "description": "cusowner - Omistaja", "meta": {}, "data_type": null, "quote": null, "tags": []}, "glaccount": {"name": "glaccount", "description": "glaccount - Tili\u00f6inti", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusactcomdate": {"name": "cusactcomdate", "description": "cusactcomdate - K\u00e4ytt\u00f6\u00f6nottop\u00e4iv\u00e4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RYHM\u00c4": {"name": "RYHM\u00c4", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classificationid": {"name": "classificationid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructureid": {"name": "classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructure_desc_translated": {"name": "classstructure_desc_translated", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_enriched"}, "created_at": 1683555523.483302, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`b_substations`", "raw_code": "WITH MAXIMO_ASEMA_AND_VARAV AS (\r\nSELECT\r\n\tloc.location,\r\n\tloc.classstructureid,\r\n\tloc.description,\r\n\tloc.cusbusinessid, \r\n\tloc.cusvoltage,\r\n\tloc.status,\r\n\tloc.cusowner,\r\n\tloc.glaccount,\r\n\tloc.cusactcomdate,\r\n\tloc.cuscustomerid,\r\n\tloc.cusworkarea,\r\n\tloc.custoplocation,\r\n\tloc.saddresscode,\r\n\tr_cla.description AS classstructure_desc,\r\n\tr_cla.classificationid,\r\n\tr_cla.description_translated AS classstructure_desc_translated,\r\n\tr_cla.cushierarchypath\r\nFROM {{ source('maximo', 'locations') }}  AS loc\r\nLEFT JOIN {{ ref('classstructure_translations') }} AS r_cla \r\n\tON loc.classstructureid = r_cla.classstructureid\r\nWHERE loc.classstructureid IN ('3696','3708') /* asema ja varavoimalaitos */\r\n)\r\n,work_area AS (\r\n\tSELECT\r\n\t\tlocation\r\n\t\t, description AS cusworkarea_desc\r\n\tFROM {{ ref('b_workarea') }}\r\n)\r\n, MAXIMO_LOCATION_ATTRIBUTES AS (\r\n\tSELECT \r\n\t\t   location\r\n\t\t   , classstructureid\r\n\t\t   , FGLAJI\r\n\t\t   , LAJI\r\n      \t   , `RYHM\u00c4`\r\n\tFROM\r\n\t(\r\n    SELECT \r\n\t\t   location\r\n\t\t   , assetattrid\r\n\t\t   , alnvalue\r\n\t\t   , classstructureid \r\n\t\tFROM {{ source('maximo', 'locationspec') }} AS la\r\n\t\tWHERE \r\n\t\t   assetattrid IN ('FGLAJI','LAJI','RYHM\u00c4') /* businesslogiikkaan tarvittavat attribuutit - kortti \"6582\" */\r\n\t\t   AND classstructureid IN ('3696','3708') /* asema ja varavoimalaitos only - align with main data filters */\r\n\t\t)\r\n\r\n\t\tPIVOT\r\n\t\t(\r\n\t\t MAX(alnvalue)\r\n\t\t FOR assetattrid in ('FGLAJI', 'LAJI', 'RYHM\u00c4')\r\n\t\t)\r\n)\r\n, PARENTS AS (\r\n    SELECT \r\n    substation.location AS substation_location\r\n    , substation.parent AS region_location\r\n    , region.description AS region_description\r\n    , region.cusbusinessid AS region_cusbusinessid\r\n    , region.classstructureid AS region_classstructureid\r\n    FROM clean_test.maximo.lochierarchy as substation\r\n    INNER JOIN clean_test.maximo.locations as region\r\n    ON substation.parent = region.location\r\n    WHERE EXISTS (SELECT 1 FROM MAXIMO_ASEMA_AND_VARAV AS m WHERE m.location = substation.location) /* haetaan parentit vain scopessa oleville objekteille */\r\n)\r\n\r\nSELECT \r\n    bvm.cusbusinessid   AS substation_cusbusinessid\r\n    , bvm.description AS substation_name -- AS Asema_nimi\r\n    , bvm.location AS substation_location\r\n    , CASE \r\n\t   WHEN bvm.cusowner = 'FINGRID' THEN coalesce(mla.FGLAJI,mla.LAJI)\r\n\t   WHEN bvm.cusowner != 'FINGRID' or bvm.cusowner is null THEN mla.LAJI\r\n\t   ELSE null\r\n    END tyyppi\r\n    , bvm.cusvoltage --AS j\u00e4nnite\r\n    /* UPPER is reguested format for region columns */\r\n    , UPPER(wa.cusworkarea_desc) AS cusworkarea_desc  --s\u00e4hk\u00f6asemat_tilaajan_ty\u00f6alue_name\r\n    , bvm.cusworkarea AS cusworkarea --s\u00e4hk\u00f6asemat_tilaajan_ty\u00f6alue\r\n    , UPPER(par.region_description) AS region_description  --s\u00e4hk\u00f6asemat_tilaajan_alue_name\r\n    , par.region_cusbusinessid AS region_cusbusinessid --s\u00e4hk\u00f6asemat_tilaajan_alue\r\n    , bvm.status --AS status\r\n    , bvm.cusowner --AS Omistaja\r\n    , bvm.glaccount -- AS Tiliointi\r\n    , bvm.cusactcomdate --AS Kayttoonottopaiva\r\n{#     centroid_latitude AS latitude, --from Arcgis data\r\n    centroid_longitude AS longitude, --from Arcgis data#}\r\n    , addr.postalcode\r\n    , addr.city\r\n    , addr.streetaddress\r\n    , addr.directions\r\n    , mla.`RYHM\u00c4` --AS ryhm\u00e4\r\n\t/* tekniset kent\u00e4t jolla n\u00e4kee asema/varav */\r\n\t, bvm.classificationid\r\n\t, bvm.classstructureid\r\n\t, bvm.classstructure_desc_translated\r\n\r\nFROM MAXIMO_ASEMA_AND_VARAV bvm\r\n\r\n/* parent \"region\" details */\r\nLEFT JOIN PARENTS AS par \r\nON par.substation_location = bvm.location\r\n    \r\n/* location attributes (pivot / coalesce)*/\r\nLEFT JOIN MAXIMO_LOCATION_ATTRIBUTES AS mla \r\nON bvm.location =mla.location\r\n\r\n/* Work area */\r\nLEFT JOIN work_area wa ON bvm.location = wa.location\r\n\r\n/* Addresses */\r\nLEFT JOIN {{ source('maximo', 'serviceaddress') }} addr on addr.addresscode = bvm.saddresscode\r\n\r\n/* coordinates */\r\n{# LEFT JOIN dbo.BV_ARCGIS_LOCATION_COORDINATES AS coords_s2 ON coords_s2.dv_id = bvm.dv_id\r\n#}", "language": "sql", "refs": [["classstructure_translations"], ["b_workarea"]], "sources": [["maximo", "locations"], ["maximo", "serviceaddress"], ["maximo", "locationspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.locations", "source.Fingrid.maximo.serviceaddress", "source.Fingrid.maximo.locationspec", "model.Fingrid.classstructure_translations", "model.Fingrid.b_workarea"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\enriched\\b_substations.sql", "compiled": true, "compiled_code": "WITH MAXIMO_ASEMA_AND_VARAV AS (\nSELECT\n\tloc.location,\n\tloc.classstructureid,\n\tloc.description,\n\tloc.cusbusinessid, \n\tloc.cusvoltage,\n\tloc.status,\n\tloc.cusowner,\n\tloc.glaccount,\n\tloc.cusactcomdate,\n\tloc.cuscustomerid,\n\tloc.cusworkarea,\n\tloc.custoplocation,\n\tloc.saddresscode,\n\tr_cla.description AS classstructure_desc,\n\tr_cla.classificationid,\n\tr_cla.description_translated AS classstructure_desc_translated,\n\tr_cla.cushierarchypath\nFROM `clean_test`.`maximo`.`locations`  AS loc\nLEFT JOIN `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`classstructure_translations` AS r_cla \n\tON loc.classstructureid = r_cla.classstructureid\nWHERE loc.classstructureid IN ('3696','3708') /* asema ja varavoimalaitos */\n)\n,work_area AS (\n\tSELECT\n\t\tlocation\n\t\t, description AS cusworkarea_desc\n\tFROM `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`b_workarea`\n)\n, MAXIMO_LOCATION_ATTRIBUTES AS (\n\tSELECT \n\t\t   location\n\t\t   , classstructureid\n\t\t   , FGLAJI\n\t\t   , LAJI\n      \t   , `RYHM\u00c4`\n\tFROM\n\t(\n    SELECT \n\t\t   location\n\t\t   , assetattrid\n\t\t   , alnvalue\n\t\t   , classstructureid \n\t\tFROM `clean_test`.`maximo`.`locationspec` AS la\n\t\tWHERE \n\t\t   assetattrid IN ('FGLAJI','LAJI','RYHM\u00c4') /* businesslogiikkaan tarvittavat attribuutit - kortti \"6582\" */\n\t\t   AND classstructureid IN ('3696','3708') /* asema ja varavoimalaitos only - align with main data filters */\n\t\t)\n\n\t\tPIVOT\n\t\t(\n\t\t MAX(alnvalue)\n\t\t FOR assetattrid in ('FGLAJI', 'LAJI', 'RYHM\u00c4')\n\t\t)\n)\n, PARENTS AS (\n    SELECT \n    substation.location AS substation_location\n    , substation.parent AS region_location\n    , region.description AS region_description\n    , region.cusbusinessid AS region_cusbusinessid\n    , region.classstructureid AS region_classstructureid\n    FROM clean_test.maximo.lochierarchy as substation\n    INNER JOIN clean_test.maximo.locations as region\n    ON substation.parent = region.location\n    WHERE EXISTS (SELECT 1 FROM MAXIMO_ASEMA_AND_VARAV AS m WHERE m.location = substation.location) /* haetaan parentit vain scopessa oleville objekteille */\n)\n\nSELECT \n    bvm.cusbusinessid   AS substation_cusbusinessid\n    , bvm.description AS substation_name -- AS Asema_nimi\n    , bvm.location AS substation_location\n    , CASE \n\t   WHEN bvm.cusowner = 'FINGRID' THEN coalesce(mla.FGLAJI,mla.LAJI)\n\t   WHEN bvm.cusowner != 'FINGRID' or bvm.cusowner is null THEN mla.LAJI\n\t   ELSE null\n    END tyyppi\n    , bvm.cusvoltage --AS j\u00e4nnite\n    /* UPPER is reguested format for region columns */\n    , UPPER(wa.cusworkarea_desc) AS cusworkarea_desc  --s\u00e4hk\u00f6asemat_tilaajan_ty\u00f6alue_name\n    , bvm.cusworkarea AS cusworkarea --s\u00e4hk\u00f6asemat_tilaajan_ty\u00f6alue\n    , UPPER(par.region_description) AS region_description  --s\u00e4hk\u00f6asemat_tilaajan_alue_name\n    , par.region_cusbusinessid AS region_cusbusinessid --s\u00e4hk\u00f6asemat_tilaajan_alue\n    , bvm.status --AS status\n    , bvm.cusowner --AS Omistaja\n    , bvm.glaccount -- AS Tiliointi\n    , bvm.cusactcomdate --AS Kayttoonottopaiva\n\n    , addr.postalcode\n    , addr.city\n    , addr.streetaddress\n    , addr.directions\n    , mla.`RYHM\u00c4` --AS ryhm\u00e4\n\t/* tekniset kent\u00e4t jolla n\u00e4kee asema/varav */\n\t, bvm.classificationid\n\t, bvm.classstructureid\n\t, bvm.classstructure_desc_translated\n\nFROM MAXIMO_ASEMA_AND_VARAV bvm\n\n/* parent \"region\" details */\nLEFT JOIN PARENTS AS par \nON par.substation_location = bvm.location\n    \n/* location attributes (pivot / coalesce)*/\nLEFT JOIN MAXIMO_LOCATION_ATTRIBUTES AS mla \nON bvm.location =mla.location\n\n/* Work area */\nLEFT JOIN work_area wa ON bvm.location = wa.location\n\n/* Addresses */\nLEFT JOIN `clean_test`.`maximo`.`serviceaddress` addr on addr.addresscode = bvm.saddresscode\n\n/* coordinates */\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.b_workarea": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_enriched", "name": "b_workarea", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\b_workarea.sql", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\b_workarea.sql", "unique_id": "model.Fingrid.b_workarea", "fqn": ["Fingrid", "sa_kunnonhallinta", "enriched", "b_workarea"], "alias": "b_workarea", "checksum": {"name": "sha256", "checksum": "02b3e1817e0213e333757fc55b050d62d9d89d9d2ad0a1403aacceb5a904102e"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_enriched", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Maximo ty\u00f6alueet locations ja classstructure tauluista. \r\nNoudetaan rivit, joiden parenttina on geneerinen ty\u00f6alue.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_enriched"}, "created_at": 1683555523.4783003, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`b_workarea`", "raw_code": "SELECT\r\n        l.LOCATION\r\n        ,l.CLASSSTRUCTUREID\r\n        ,l.CUSSEQUENCE\r\n        ,l.CHANGEBY\r\n        ,l.TYPE\r\n        ,l.CONTROLACC\r\n        ,l.CHANGEDATE\r\n        ,l.PURCHVARACC\r\n        ,l.INVOICEVARACC\r\n        ,l.CURVARACC\r\n        ,l.SHRINKAGEACC\r\n        ,l.INVCOSTADJACC\r\n        ,l.RECEIPTVARACC\r\n        ,l.CUSBUSINESSID\r\n        ,l.CUSDIVISION\r\n        ,l.OLDCONTROLACC\r\n        ,l.OLDSHRINKAGEACC\r\n        ,l.OLDINVCOSTADJACC\r\n        ,l.CUSDMTRANSID\r\n        ,l.GISPARAM1\r\n        ,l.GISPARAM2\r\n        ,l.GISPARAM3\r\n        ,l.CUSDMTRANSSEQ\r\n        ,l.CUSITEMNUM\r\n        ,l.CUSITEMSETID\r\n        ,l.CUSMAINRESP\r\n        ,l.CUSPRIMMC\r\n        ,l.LANGCODE\r\n        ,l.INTLABREC\r\n        ,l.ISDEFAULT\r\n        ,l.SHIPTOADDRESSCODE\r\n        ,l.SHIPTOLABORCODE\r\n        ,l.BILLTOADDRESSCODE\r\n        ,l.BILLTOLABORCODE\r\n        ,l.SERVICEADDRESSCODE\r\n        ,l.LOCATIONSID\r\n        ,l.USEINPOPR\r\n        ,l.TOOLCONTROLACC\r\n        ,l.ORGID\r\n        ,l.OWNERSYSID\r\n        ,l.AUTOWOGEN\r\n        ,l.PLUSCLOOP\r\n        ,l.PLUSPCOSTCENTER\r\n        ,l.INVOWNER\r\n        ,l.ISREPAIRFACILITY\r\n        ,l.PLUSCDUEDATE\r\n        ,l.PLUSPCUSTCHACCT\r\n        ,l.PLUSCPMEXTDATE\r\n        ,l.PLUSVWORKLOCPREFIX\r\n        ,l.PLUSPCUSTOMER\r\n        ,l.PLUSSFEATURECLASS\r\n        ,l.PLUSSADDRESSCODE\r\n        ,l.SADDRESSCODE\r\n        ,l.PLUSSISGIS\r\n        ,l.CUSTOPLOCATION\r\n        ,l.CUSWORKAREA\r\n        ,l.CUSACTCOMDATE\r\n        ,l.CUSACTDECOMDATE\r\n        ,l.CUSCOMMISMS\r\n        ,l.CUSDECOMMISMS\r\n        ,l.DESCRIPTION\r\n        ,l.CUSGRIDVALGRP\r\n        ,l.CUSHOLDER\r\n        ,l.CUSMAINPLAN\r\n        ,l.CUSOUTPLAN\r\n        ,l.CUSOWNER\r\n        ,l.CUSPLUSSPHONE\r\n        ,l.CUSPROJECTID\r\n        ,l.DISABLED\r\n        ,l.CUSVOLTAGE\r\n        ,l.CUSWASYS\r\n        ,l.EXTERNALREFID\r\n        ,l.DEVICENAME1\r\n        ,l.DEVICENAME2\r\n        ,l.FUNCDESCRIPTION\r\n        ,l.ISSUBSTATION\r\n        ,l.PLUSSPHONENUMBER\r\n        ,l.PROJECTID\r\n        ,l.GLACCOUNT\r\n        ,l.CUSACTCHANGEMSDATE\r\n        ,l.CUSACTUALCOMPLETIONDATE\r\n        ,l.CUSAGREEDATE\r\n        ,l.CUSAREA\r\n        ,l.CUSBRANCH\r\n        ,l.CUSCHANGEMS\r\n        ,l.CUSCLASSCHANGEDATE\r\n        ,l.CUSCONDLENGTH\r\n        ,l.CUSCROSSINGLIST\r\n        ,l.CUSDESCODE\r\n        ,l.CUSDIMMAINSYS\r\n        ,l.CUSDISTANCE\r\n        ,l.HASLD\r\n        ,l.ROWSTAMP\r\n        ,l.CUSEARTGRIDREMARKS\r\n        ,l.CUSEARTHMEASREQ\r\n        ,l.CUSEARTWIRES\r\n        ,l.CUSEATYPE\r\n        ,l.CUSEWLENGTH\r\n        ,l.CUSEXPECTEDCOMPLETIONDATE\r\n        ,l.CUSFEATURECLASS\r\n        ,l.CUSGISTYPE\r\n        ,l.CUSGISVERSION\r\n        ,l.CUSHOUSENO\r\n        ,l.CUSIMPPVCL\r\n        ,l.SENDERSYSID\r\n        ,l.SITEID\r\n        ,l.CUSLANDNO\r\n        ,l.CUSLENGTH\r\n        ,l.CUSLENGTHTYPE\r\n        ,l.CUSLINESEC\r\n        ,l.CUSMAADEXEC\r\n        ,l.CUSMAADIMPDATE\r\n        ,l.CUSMAADIMPHUOM\r\n        ,l.CUSMAADPLANHUOM\r\n        ,l.CUSMAAPLANDATE\r\n        ,l.CUSMAAPLANNER\r\n        ,l.SOURCESYSID\r\n        ,l.CUSMASTERSYS\r\n        ,l.CUSMUNICIPALITY\r\n        ,l.CUSMUNICIPALITYNO\r\n        ,l.CUSMUNVILNO\r\n        ,l.CUSNATR\r\n        ,l.CUSNOOFCIRCUITS\r\n        ,l.CUSNOOFSHARETOWERS\r\n        ,l.CUSNOOFTOWERS\r\n        ,l.CUSORDER\r\n        ,l.CUSORDER2\r\n        ,l.CUSPLANPVCL\r\n        ,l.CUSPLANZ50\r\n        ,l.CUSPLANZLI\r\n        ,l.CUSREALESTATEID\r\n        ,l.CUSREGISTERNO\r\n        ,l.CUSRENLSID\r\n        ,l.CUSREPROJECT\r\n        ,l.CUSRETOWN\r\n        ,l.CUSREVILLAGE\r\n        ,l.CUSROADCOMMENT\r\n        ,l.STATUSDATE\r\n        ,l.CUSTARGETR\r\n        ,l.CUSTERMCARE\r\n        ,l.CUSVILLAGE\r\n        ,l.CUSVILLAGENO\r\n        ,l.PHASESEQ\r\n        ,l.RA\r\n        ,l.RB\r\n        ,l.RSPAN\r\n        ,l.RSPANA\r\n        ,l.RSPANB\r\n        ,l.ZA\r\n        ,l.ZB\r\n        ,l.ZE\r\n        ,l.ZP\r\n        ,l.ZSPAN\r\n        ,l.ZSPANA\r\n        ,l.ZSPANB\r\n        ,l.CUSEOL\r\n        ,l.CUSGRIDCHANGEDATE\r\n        ,l.CUSINCLINGDP\r\n        ,l.CUSLASTMP\r\n        ,l.CUSLASTMPTYPE\r\n        ,l.CUSLASTMPYEAR\r\n        ,l.CUSNEXTLTPACTION\r\n        ,l.CUSNEXTMP\r\n        ,l.CUSNEXTMPTYPE\r\n        ,l.CUSNEXTMPYEAR\r\n        ,l.CUSNOOFMPTOWERS\r\n        ,l.CUSTERMCAREDATE\r\n        ,l.CUSTERMCAREYEAR\r\n        ,l.CUSTOWERTYPE\r\n        ,l.CUSITEMSETTOWER\r\n        ,l.CUSITEMTOWER\r\n        ,l.CUSCPBRANCH\r\n        ,l.CUSCRMID\r\n        ,l.CUSCUSTOMERID\r\n        ,l.CUSFUELCALC\r\n        ,l.CUSLTJID\r\n        ,l.CUSOUTAGECALC\r\n        ,l.CUSRISTLOCACCESS\r\n        ,l.CUSSPECIALRISK\r\n        ,l.CUSSTATLENGTH\r\n        ,l.CUSIPSLOCSPECINTHREADCOUNT\r\n        ,l.CUSLASTGISLOC\r\n        ,l.CUSGVCBOTTLEINVESTMENT\r\n        ,l.CUSCUSTOMER\r\n        ,l.STATUS\r\nFROM\r\n        {{ source('maximo', 'locations') }} AS l\r\nINNER JOIN\r\n        {{ source('maximo', 'classstructure') }} AS cl\r\nON\r\n        cl.CLASSSTRUCTUREID = l.CLASSSTRUCTUREID\r\nWHERE\r\n        /* Select classtructures that have generic workarea as their parent. */\r\n        cl.PARENT = '3707'\r\n        /* cusbusniessid is the business key of this entity. */\r\nAND     l.CUSBUSINESSID IS NOT NULL", "language": "sql", "refs": [], "sources": [["maximo", "locations"], ["maximo", "classstructure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.locations", "source.Fingrid.maximo.classstructure"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\enriched\\b_workarea.sql", "compiled": true, "compiled_code": "SELECT\n        l.LOCATION\n        ,l.CLASSSTRUCTUREID\n        ,l.CUSSEQUENCE\n        ,l.CHANGEBY\n        ,l.TYPE\n        ,l.CONTROLACC\n        ,l.CHANGEDATE\n        ,l.PURCHVARACC\n        ,l.INVOICEVARACC\n        ,l.CURVARACC\n        ,l.SHRINKAGEACC\n        ,l.INVCOSTADJACC\n        ,l.RECEIPTVARACC\n        ,l.CUSBUSINESSID\n        ,l.CUSDIVISION\n        ,l.OLDCONTROLACC\n        ,l.OLDSHRINKAGEACC\n        ,l.OLDINVCOSTADJACC\n        ,l.CUSDMTRANSID\n        ,l.GISPARAM1\n        ,l.GISPARAM2\n        ,l.GISPARAM3\n        ,l.CUSDMTRANSSEQ\n        ,l.CUSITEMNUM\n        ,l.CUSITEMSETID\n        ,l.CUSMAINRESP\n        ,l.CUSPRIMMC\n        ,l.LANGCODE\n        ,l.INTLABREC\n        ,l.ISDEFAULT\n        ,l.SHIPTOADDRESSCODE\n        ,l.SHIPTOLABORCODE\n        ,l.BILLTOADDRESSCODE\n        ,l.BILLTOLABORCODE\n        ,l.SERVICEADDRESSCODE\n        ,l.LOCATIONSID\n        ,l.USEINPOPR\n        ,l.TOOLCONTROLACC\n        ,l.ORGID\n        ,l.OWNERSYSID\n        ,l.AUTOWOGEN\n        ,l.PLUSCLOOP\n        ,l.PLUSPCOSTCENTER\n        ,l.INVOWNER\n        ,l.ISREPAIRFACILITY\n        ,l.PLUSCDUEDATE\n        ,l.PLUSPCUSTCHACCT\n        ,l.PLUSCPMEXTDATE\n        ,l.PLUSVWORKLOCPREFIX\n        ,l.PLUSPCUSTOMER\n        ,l.PLUSSFEATURECLASS\n        ,l.PLUSSADDRESSCODE\n        ,l.SADDRESSCODE\n        ,l.PLUSSISGIS\n        ,l.CUSTOPLOCATION\n        ,l.CUSWORKAREA\n        ,l.CUSACTCOMDATE\n        ,l.CUSACTDECOMDATE\n        ,l.CUSCOMMISMS\n        ,l.CUSDECOMMISMS\n        ,l.DESCRIPTION\n        ,l.CUSGRIDVALGRP\n        ,l.CUSHOLDER\n        ,l.CUSMAINPLAN\n        ,l.CUSOUTPLAN\n        ,l.CUSOWNER\n        ,l.CUSPLUSSPHONE\n        ,l.CUSPROJECTID\n        ,l.DISABLED\n        ,l.CUSVOLTAGE\n        ,l.CUSWASYS\n        ,l.EXTERNALREFID\n        ,l.DEVICENAME1\n        ,l.DEVICENAME2\n        ,l.FUNCDESCRIPTION\n        ,l.ISSUBSTATION\n        ,l.PLUSSPHONENUMBER\n        ,l.PROJECTID\n        ,l.GLACCOUNT\n        ,l.CUSACTCHANGEMSDATE\n        ,l.CUSACTUALCOMPLETIONDATE\n        ,l.CUSAGREEDATE\n        ,l.CUSAREA\n        ,l.CUSBRANCH\n        ,l.CUSCHANGEMS\n        ,l.CUSCLASSCHANGEDATE\n        ,l.CUSCONDLENGTH\n        ,l.CUSCROSSINGLIST\n        ,l.CUSDESCODE\n        ,l.CUSDIMMAINSYS\n        ,l.CUSDISTANCE\n        ,l.HASLD\n        ,l.ROWSTAMP\n        ,l.CUSEARTGRIDREMARKS\n        ,l.CUSEARTHMEASREQ\n        ,l.CUSEARTWIRES\n        ,l.CUSEATYPE\n        ,l.CUSEWLENGTH\n        ,l.CUSEXPECTEDCOMPLETIONDATE\n        ,l.CUSFEATURECLASS\n        ,l.CUSGISTYPE\n        ,l.CUSGISVERSION\n        ,l.CUSHOUSENO\n        ,l.CUSIMPPVCL\n        ,l.SENDERSYSID\n        ,l.SITEID\n        ,l.CUSLANDNO\n        ,l.CUSLENGTH\n        ,l.CUSLENGTHTYPE\n        ,l.CUSLINESEC\n        ,l.CUSMAADEXEC\n        ,l.CUSMAADIMPDATE\n        ,l.CUSMAADIMPHUOM\n        ,l.CUSMAADPLANHUOM\n        ,l.CUSMAAPLANDATE\n        ,l.CUSMAAPLANNER\n        ,l.SOURCESYSID\n        ,l.CUSMASTERSYS\n        ,l.CUSMUNICIPALITY\n        ,l.CUSMUNICIPALITYNO\n        ,l.CUSMUNVILNO\n        ,l.CUSNATR\n        ,l.CUSNOOFCIRCUITS\n        ,l.CUSNOOFSHARETOWERS\n        ,l.CUSNOOFTOWERS\n        ,l.CUSORDER\n        ,l.CUSORDER2\n        ,l.CUSPLANPVCL\n        ,l.CUSPLANZ50\n        ,l.CUSPLANZLI\n        ,l.CUSREALESTATEID\n        ,l.CUSREGISTERNO\n        ,l.CUSRENLSID\n        ,l.CUSREPROJECT\n        ,l.CUSRETOWN\n        ,l.CUSREVILLAGE\n        ,l.CUSROADCOMMENT\n        ,l.STATUSDATE\n        ,l.CUSTARGETR\n        ,l.CUSTERMCARE\n        ,l.CUSVILLAGE\n        ,l.CUSVILLAGENO\n        ,l.PHASESEQ\n        ,l.RA\n        ,l.RB\n        ,l.RSPAN\n        ,l.RSPANA\n        ,l.RSPANB\n        ,l.ZA\n        ,l.ZB\n        ,l.ZE\n        ,l.ZP\n        ,l.ZSPAN\n        ,l.ZSPANA\n        ,l.ZSPANB\n        ,l.CUSEOL\n        ,l.CUSGRIDCHANGEDATE\n        ,l.CUSINCLINGDP\n        ,l.CUSLASTMP\n        ,l.CUSLASTMPTYPE\n        ,l.CUSLASTMPYEAR\n        ,l.CUSNEXTLTPACTION\n        ,l.CUSNEXTMP\n        ,l.CUSNEXTMPTYPE\n        ,l.CUSNEXTMPYEAR\n        ,l.CUSNOOFMPTOWERS\n        ,l.CUSTERMCAREDATE\n        ,l.CUSTERMCAREYEAR\n        ,l.CUSTOWERTYPE\n        ,l.CUSITEMSETTOWER\n        ,l.CUSITEMTOWER\n        ,l.CUSCPBRANCH\n        ,l.CUSCRMID\n        ,l.CUSCUSTOMERID\n        ,l.CUSFUELCALC\n        ,l.CUSLTJID\n        ,l.CUSOUTAGECALC\n        ,l.CUSRISTLOCACCESS\n        ,l.CUSSPECIALRISK\n        ,l.CUSSTATLENGTH\n        ,l.CUSIPSLOCSPECINTHREADCOUNT\n        ,l.CUSLASTGISLOC\n        ,l.CUSGVCBOTTLEINVESTMENT\n        ,l.CUSCUSTOMER\n        ,l.STATUS\nFROM\n        `clean_test`.`maximo`.`locations` AS l\nINNER JOIN\n        `clean_test`.`maximo`.`classstructure` AS cl\nON\n        cl.CLASSSTRUCTUREID = l.CLASSSTRUCTUREID\nWHERE\n        /* Select classtructures that have generic workarea as their parent. */\n        cl.PARENT = '3707'\n        /* cusbusniessid is the business key of this entity. */\nAND     l.CUSBUSINESSID IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.classstructure_translations": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_enriched", "name": "classstructure_translations", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\classstructure_translations.sql", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\classstructure_translations.sql", "unique_id": "model.Fingrid.classstructure_translations", "fqn": ["Fingrid", "sa_kunnonhallinta", "enriched", "classstructure_translations"], "alias": "classstructure_translations", "checksum": {"name": "sha256", "checksum": "8cad60df1b5def8fdbccd355fa64e6b26dcc189ea0c3973ed48549de32bf3d18"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_enriched", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Maximo classstructure taulun nimien k\u00e4\u00e4nn\u00f6kset.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_enriched"}, "created_at": 1683555523.4783003, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`classstructure_translations`", "raw_code": "WITH DataSet\r\n    AS (SELECT \r\n\t\t  att.CLASSSTRUCTUREID,\r\n\t\t  att.CLASSSTRUCTUREUID, \r\n\t\t  att.CLASSIFICATIONID, \r\n\t\t  att.DESCRIPTION, \r\n\t\t  att.PARENT, \r\n\t\t  att.CUSHIERARCHYPATH, \r\n\t\t  tra.LANGCODE, \r\n\t\t  tra.DESCRIPTION AS DESCRIPTION_TRANSLATED\r\n\t   FROM {{ source('maximo', 'classstructure') }} AS att\r\n\t   LEFT JOIN {{ source('maximo', 'l_classstructure') }} AS tra ON att.CLASSSTRUCTUREUID = tra.OWNERID\r\n\t   WHERE tra.LANGCODE = 'FI'\r\n\t   )\r\n    SELECT \r\n\t   CLASSSTRUCTUREID,\r\n\t   CLASSSTRUCTUREUID, \r\n\t   CLASSIFICATIONID, \r\n\t   DESCRIPTION, \r\n\t   PARENT, \r\n\t   CUSHIERARCHYPATH, \r\n\t   LANGCODE, \r\n\t   DESCRIPTION_TRANSLATED\r\n    FROM DataSet", "language": "sql", "refs": [], "sources": [["maximo", "classstructure"], ["maximo", "l_classstructure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.l_classstructure"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\enriched\\classstructure_translations.sql", "compiled": true, "compiled_code": "WITH DataSet\n    AS (SELECT \n\t\t  att.CLASSSTRUCTUREID,\n\t\t  att.CLASSSTRUCTUREUID, \n\t\t  att.CLASSIFICATIONID, \n\t\t  att.DESCRIPTION, \n\t\t  att.PARENT, \n\t\t  att.CUSHIERARCHYPATH, \n\t\t  tra.LANGCODE, \n\t\t  tra.DESCRIPTION AS DESCRIPTION_TRANSLATED\n\t   FROM `clean_test`.`maximo`.`classstructure` AS att\n\t   LEFT JOIN `clean_test`.`maximo`.`l_classstructure` AS tra ON att.CLASSSTRUCTUREUID = tra.OWNERID\n\t   WHERE tra.LANGCODE = 'FI'\n\t   )\n    SELECT \n\t   CLASSSTRUCTUREID,\n\t   CLASSSTRUCTUREUID, \n\t   CLASSIFICATIONID, \n\t   DESCRIPTION, \n\t   PARENT, \n\t   CUSHIERARCHYPATH, \n\t   LANGCODE, \n\t   DESCRIPTION_TRANSLATED\n    FROM DataSet", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.sa_laiteluokittelu": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_enriched", "name": "sa_laiteluokittelu", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\sa_laiteluokittelu.sql", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_laiteluokittelu.sql", "unique_id": "model.Fingrid.sa_laiteluokittelu", "fqn": ["Fingrid", "sa_kunnonhallinta", "enriched", "sa_laiteluokittelu"], "alias": "sa_laiteluokittelu", "checksum": {"name": "sha256", "checksum": "4c7b56836e8c7769cb3a7a8be8ed742b15e7d6967ef0cf8adb1414780fd3e0c0"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_enriched", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_enriched"}, "created_at": 1683555523.3060777, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`sa_laiteluokittelu`", "raw_code": "WITH cls0 as (\r\n    select \r\n        cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , r.laiteryhma_luokka\r\n        , r.laiteryhma_luokka_0_4\r\n        , cls.classstructureid as classstructureid_0, cls.classificationid as classificationid_0, cls.description as description_0\r\n        , NULL as classstructureid_1, NULL as classificationid_1, NULL as description_1\r\n        , NULL as classstructureid_2, NULL as classificationid_2, NULL as description_2\r\n        , NULL as classstructureid_3, NULL as classificationid_3, NULL as description_3\r\n        , NULL as classstructureid_4, NULL as classificationid_4, NULL as description_4\r\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\r\n        , 0 as level        \r\n    from {{ ref('r_sa_laiteryhmaluokittelu') }} r\r\n    join {{ source('maximo', 'classstructure') }} cls\r\n    on r.laiteryhma_classificationid = cls.classificationid\r\n        and cls.parent is null\r\n),\r\ncls1 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.laiteryhma_luokka\r\n        , p.laiteryhma_luokka_0_4\r\n        , p.classstructureid_0, p.classificationid_0, p.description_0\r\n        , cls.classstructureid as classstructureid_1, cls.classificationid as classificationid_1, cls.description as description_1 \r\n        , NULL as classstructureid_2, NULL as classificationid_2, NULL as description_2\r\n        , NULL as classstructureid_3, NULL as classificationid_3, NULL as description_3\r\n        , NULL as classstructureid_4, NULL as classificationid_4, NULL as description_4\r\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\r\n        , 1 as level\r\n    from cls0 p\r\n    join {{ source('maximo', 'classstructure') }} cls\r\n    on p.classstructureid = cls.parent\r\n),\r\n\r\ncls2 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.laiteryhma_luokka\r\n        , p.laiteryhma_luokka_0_4\r\n        , p.classstructureid_0, p.classificationid_0, p.description_0\r\n        , p.classstructureid_1, p.classificationid_1, p.description_1\r\n        , cls.classstructureid as classstructureid_2, cls.classificationid as classificationid_2, cls.description as description_2 \r\n        , NULL as classstructureid_3, NULL as classificationid_3, NULL as description_3\r\n        , NULL as classstructureid_4, NULL as classificationid_4, NULL as description_4\r\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\r\n        , 2 as level        \r\n    from cls1 p\r\n    join {{ source('maximo', 'classstructure') }} cls\r\n    on p.classstructureid = cls.parent\r\n),\r\ncls3 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.laiteryhma_luokka\r\n        , p.laiteryhma_luokka_0_4\r\n        , p.classstructureid_0, p.classificationid_0, p.description_0\r\n        , p.classstructureid_1, p.classificationid_1, p.description_1\r\n        , p.classstructureid_2, p.classificationid_2, p.description_2\r\n        , cls.classstructureid as classstructureid_3, cls.classificationid as classificationid_3, cls.description as description_3 \r\n        , NULL as classstructureid_4, NULL as classificationid_4, NULL as description_4\r\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\r\n        , 3 as level\r\n    from cls2 p\r\n    join {{ source('maximo', 'classstructure') }} cls\r\n    on p.classstructureid = cls.parent\r\n),\r\ncls4 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.laiteryhma_luokka\r\n        , p.laiteryhma_luokka_0_4\r\n        , p.classstructureid_0, p.classificationid_0, p.description_0\r\n        , p.classstructureid_1, p.classificationid_1, p.description_1\r\n        , p.classstructureid_2, p.classificationid_2, p.description_2\r\n        , p.classstructureid_3, p.classificationid_3, p.description_3\r\n        , cls.classstructureid as classstructureid_4, cls.classificationid as classificationid_4, cls.description as description_4 \r\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\r\n        , 4 as level\r\n    from cls3 p\r\n    join {{ source('maximo', 'classstructure') }} cls\r\n    on p.classstructureid = cls.parent\r\n),\r\n/*cls5 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.laiteryhma_luokka\r\n        , p.laiteryhma_luokka_0_4\r\n        , p.classstructureid_0, p.classificationid_0, p.description_0\r\n        , p.classstructureid_1, p.classificationid_1, p.description_1\r\n        , p.classstructureid_2, p.classificationid_2, p.description_2\r\n        , p.classstructureid_3, p.classificationid_3, p.description_3\r\n        , p.classstructureid_4, p.classificationid_4, p.description_4\r\n        , cls.classstructureid as classstructureid_5, cls.classificationid as classificationid_5, cls.description as description_5 \r\n        , 5 as level        \r\n    from cls4 p\r\n    join {{ source('maximo', 'classstructure') }} cls\r\n    on p.classstructureid = cls.parent\r\n),*/\r\ncls_all as (\r\n    select *\r\n    from cls0\r\n    union all\r\n    select * from cls1\r\n    union all\r\n    select * from cls2\r\n    union all\r\n    select * from cls3\r\n    union all\r\n    select * from cls4\r\n--    union all\r\n--    select * from cls5\r\n)\r\n/*select classstructureid, classificiationid, description, haschildren, parent, cushierarchypath, laiteryhma_luokka, laiteryhma_luokka_0_4, level\r\n    , classificationid_0, classificationid_0, description_0\r\n\r\n    , coalesce(classstructureid_1, classstructureid_0) as classstructureid_1\r\n    , coalesce(classificationid_1, classificationid_0) as classificationid_1\r\n    , coalesce(description_1, description_0) as description_1\r\n\r\n    , coalesce(classstructureid_2, classstructureid_1, classstructureid_0) as classstructureid_2\r\n    , coalesce(classificationid_2, classificationid_1, classificationid_0) as classificationid_2\r\n    , coalesce(description_2, description_1, description_0) as description_2\r\n\r\n    , coalesce(classstructureid_3, classstructureid_2, classstructureid_1, classstructureid_0) as classstructureid_3\r\n    , coalesce(classificationid_3, classificationid_2, classificationid_1, classificationid_0) as classificationid_3\r\n    , coalesce(description_3, description_2, description_1, description_0) as description_3\r\n\r\n    , coalesce(classstructureid_4, classstructureid_3, classstructureid_2, classstructureid_1, classstructureid_0) as classstructureid_4\r\n    , coalesce(classificationid_4, classificationid_3, classificationid_2, classificationid_1, classificationid_0) as classificationid_4\r\n    , coalesce(description_4, description_3, description_2, description_1, description_0) as description_4\r\n*/\r\nselect *\r\nfrom cls_all", "language": "sql", "refs": [["r_sa_laiteryhmaluokittelu"]], "sources": [["maximo", "classstructure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "seed.Fingrid.r_sa_laiteryhmaluokittelu"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\enriched\\sa_laiteluokittelu.sql", "compiled": true, "compiled_code": "WITH cls0 as (\n    select \n        cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , r.laiteryhma_luokka\n        , r.laiteryhma_luokka_0_4\n        , cls.classstructureid as classstructureid_0, cls.classificationid as classificationid_0, cls.description as description_0\n        , NULL as classstructureid_1, NULL as classificationid_1, NULL as description_1\n        , NULL as classstructureid_2, NULL as classificationid_2, NULL as description_2\n        , NULL as classstructureid_3, NULL as classificationid_3, NULL as description_3\n        , NULL as classstructureid_4, NULL as classificationid_4, NULL as description_4\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\n        , 0 as level        \n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`r_sa_laiteryhmaluokittelu` r\n    join `clean_test`.`maximo`.`classstructure` cls\n    on r.laiteryhma_classificationid = cls.classificationid\n        and cls.parent is null\n),\ncls1 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.laiteryhma_luokka\n        , p.laiteryhma_luokka_0_4\n        , p.classstructureid_0, p.classificationid_0, p.description_0\n        , cls.classstructureid as classstructureid_1, cls.classificationid as classificationid_1, cls.description as description_1 \n        , NULL as classstructureid_2, NULL as classificationid_2, NULL as description_2\n        , NULL as classstructureid_3, NULL as classificationid_3, NULL as description_3\n        , NULL as classstructureid_4, NULL as classificationid_4, NULL as description_4\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\n        , 1 as level\n    from cls0 p\n    join `clean_test`.`maximo`.`classstructure` cls\n    on p.classstructureid = cls.parent\n),\n\ncls2 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.laiteryhma_luokka\n        , p.laiteryhma_luokka_0_4\n        , p.classstructureid_0, p.classificationid_0, p.description_0\n        , p.classstructureid_1, p.classificationid_1, p.description_1\n        , cls.classstructureid as classstructureid_2, cls.classificationid as classificationid_2, cls.description as description_2 \n        , NULL as classstructureid_3, NULL as classificationid_3, NULL as description_3\n        , NULL as classstructureid_4, NULL as classificationid_4, NULL as description_4\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\n        , 2 as level        \n    from cls1 p\n    join `clean_test`.`maximo`.`classstructure` cls\n    on p.classstructureid = cls.parent\n),\ncls3 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.laiteryhma_luokka\n        , p.laiteryhma_luokka_0_4\n        , p.classstructureid_0, p.classificationid_0, p.description_0\n        , p.classstructureid_1, p.classificationid_1, p.description_1\n        , p.classstructureid_2, p.classificationid_2, p.description_2\n        , cls.classstructureid as classstructureid_3, cls.classificationid as classificationid_3, cls.description as description_3 \n        , NULL as classstructureid_4, NULL as classificationid_4, NULL as description_4\n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\n        , 3 as level\n    from cls2 p\n    join `clean_test`.`maximo`.`classstructure` cls\n    on p.classstructureid = cls.parent\n),\ncls4 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.laiteryhma_luokka\n        , p.laiteryhma_luokka_0_4\n        , p.classstructureid_0, p.classificationid_0, p.description_0\n        , p.classstructureid_1, p.classificationid_1, p.description_1\n        , p.classstructureid_2, p.classificationid_2, p.description_2\n        , p.classstructureid_3, p.classificationid_3, p.description_3\n        , cls.classstructureid as classstructureid_4, cls.classificationid as classificationid_4, cls.description as description_4 \n        , NULL as classstructureid_5, NULL as classificationid_5, NULL as description_5\n        , 4 as level\n    from cls3 p\n    join `clean_test`.`maximo`.`classstructure` cls\n    on p.classstructureid = cls.parent\n),\n/*cls5 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.laiteryhma_luokka\n        , p.laiteryhma_luokka_0_4\n        , p.classstructureid_0, p.classificationid_0, p.description_0\n        , p.classstructureid_1, p.classificationid_1, p.description_1\n        , p.classstructureid_2, p.classificationid_2, p.description_2\n        , p.classstructureid_3, p.classificationid_3, p.description_3\n        , p.classstructureid_4, p.classificationid_4, p.description_4\n        , cls.classstructureid as classstructureid_5, cls.classificationid as classificationid_5, cls.description as description_5 \n        , 5 as level        \n    from cls4 p\n    join `clean_test`.`maximo`.`classstructure` cls\n    on p.classstructureid = cls.parent\n),*/\ncls_all as (\n    select *\n    from cls0\n    union all\n    select * from cls1\n    union all\n    select * from cls2\n    union all\n    select * from cls3\n    union all\n    select * from cls4\n--    union all\n--    select * from cls5\n)\n/*select classstructureid, classificiationid, description, haschildren, parent, cushierarchypath, laiteryhma_luokka, laiteryhma_luokka_0_4, level\n    , classificationid_0, classificationid_0, description_0\n\n    , coalesce(classstructureid_1, classstructureid_0) as classstructureid_1\n    , coalesce(classificationid_1, classificationid_0) as classificationid_1\n    , coalesce(description_1, description_0) as description_1\n\n    , coalesce(classstructureid_2, classstructureid_1, classstructureid_0) as classstructureid_2\n    , coalesce(classificationid_2, classificationid_1, classificationid_0) as classificationid_2\n    , coalesce(description_2, description_1, description_0) as description_2\n\n    , coalesce(classstructureid_3, classstructureid_2, classstructureid_1, classstructureid_0) as classstructureid_3\n    , coalesce(classificationid_3, classificationid_2, classificationid_1, classificationid_0) as classificationid_3\n    , coalesce(description_3, description_2, description_1, description_0) as description_3\n\n    , coalesce(classstructureid_4, classstructureid_3, classstructureid_2, classstructureid_1, classstructureid_0) as classstructureid_4\n    , coalesce(classificationid_4, classificationid_3, classificationid_2, classificationid_1, classificationid_0) as classificationid_4\n    , coalesce(description_4, description_3, description_2, description_1, description_0) as description_4\n*/\nselect *\nfrom cls_all", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.sa_laitepaikkaluokittelu": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_enriched", "name": "sa_laitepaikkaluokittelu", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\sa_laitepaikkaluokittelu.sql", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_laitepaikkaluokittelu.sql", "unique_id": "model.Fingrid.sa_laitepaikkaluokittelu", "fqn": ["Fingrid", "sa_kunnonhallinta", "enriched", "sa_laitepaikkaluokittelu"], "alias": "sa_laitepaikkaluokittelu", "checksum": {"name": "sha256", "checksum": "2737854df7d753fdf6a37c7b684900a2feb76242d28bae2e01e85122f521007f"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_enriched", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_enriched"}, "created_at": 1683555523.3089828, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`sa_laitepaikkaluokittelu`", "raw_code": "WITH cls0 as (\r\n    select cls.classificationid as classificationid_0\r\n        , cls.classstructureid as classstructureid_0\r\n        , cls.description as description_0\r\n        , r.laiteryhma_luokka\r\n        , r.laiteryhma_luokka_0_4\r\n        , 0 as level        \r\n    from {{ ref('r_sa_laitepaikkaryhmaluokittelu') }} r\r\n    join {{ source('maximo', 'classstructure') }} cls\r\n    on r.laiteryhma_classificationid = cls.classificationid\r\n    where r.parent_classificationid is null and cls.classificationid is null\r\n\r\n    union all \r\n\r\n    select cls.classificationid as classificationid_0\r\n        , cls.classstructureid as classstructureid_0\r\n        , cls.description as description_0\r\n        , r.laiteryhma_luokka\r\n        , r.laiteryhma_luokka_0_4\r\n        , 0 as level\r\n    from {{ ref('r_sa_laitepaikkaryhmaluokittelu') }} r\r\n    join {{ source('maximo', 'classstructure') }} cls\r\n    on r.laiteryhma_classificationid = cls.classificationid\r\n    join {{ source('maximo', 'classstructure') }} cls_p\r\n    on cls.parent = cls_p.classstructureid\r\n        and r.parent_classificationid = cls_p.classificationid\r\n),\r\ncls1 as (\r\n    select classificationid_0\r\n        , classstructureid_0\r\n        , description_0\r\n        , laiteryhma_luokka\r\n        , laiteryhma_luokka_0_4\r\n        , child.classificationid as classificationid_1\r\n        , child.classstructureid as classstructureid_1\r\n        , child.description as description_1\r\n        , 1 as level\r\n    from cls0\r\n    join {{ source('maximo', 'classstructure') }} child\r\n    on cls0.classstructureid_0 = child.parent\r\n),\r\ncls_all as (\r\n    select CLASSSTRUCTUREID_0 as classstructureid\r\n        , classificationid_0\r\n        , classstructureid_0\r\n        , description_0\r\n        , null as CLASSIFICATIONID_1\r\n        , null as CLASSSTRUCTUREID_1\r\n        , null as DESCRIPTION_1    \r\n        , laiteryhma_luokka\r\n        , laiteryhma_luokka_0_4\r\n        , level\r\n    from cls0\r\n    union all\r\n    select CLASSSTRUCTUREID_1 as classstructureid\r\n        , classificationid_0\r\n        , classstructureid_0\r\n        , description_0\r\n        , CLASSIFICATIONID_1\r\n        , CLASSSTRUCTUREID_1\r\n        , DESCRIPTION_1\r\n        , laiteryhma_luokka\r\n        , laiteryhma_luokka_0_4\r\n        , level\r\n    from cls1\r\n)\r\nselect * from cls_all", "language": "sql", "refs": [["r_sa_laitepaikkaryhmaluokittelu"], ["r_sa_laitepaikkaryhmaluokittelu"]], "sources": [["maximo", "classstructure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "seed.Fingrid.r_sa_laitepaikkaryhmaluokittelu", "seed.Fingrid.r_sa_laitepaikkaryhmaluokittelu"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\enriched\\sa_laitepaikkaluokittelu.sql", "compiled": true, "compiled_code": "WITH cls0 as (\n    select cls.classificationid as classificationid_0\n        , cls.classstructureid as classstructureid_0\n        , cls.description as description_0\n        , r.laiteryhma_luokka\n        , r.laiteryhma_luokka_0_4\n        , 0 as level        \n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`r_sa_laitepaikkaryhmaluokittelu` r\n    join `clean_test`.`maximo`.`classstructure` cls\n    on r.laiteryhma_classificationid = cls.classificationid\n    where r.parent_classificationid is null and cls.classificationid is null\n\n    union all \n\n    select cls.classificationid as classificationid_0\n        , cls.classstructureid as classstructureid_0\n        , cls.description as description_0\n        , r.laiteryhma_luokka\n        , r.laiteryhma_luokka_0_4\n        , 0 as level\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`r_sa_laitepaikkaryhmaluokittelu` r\n    join `clean_test`.`maximo`.`classstructure` cls\n    on r.laiteryhma_classificationid = cls.classificationid\n    join `clean_test`.`maximo`.`classstructure` cls_p\n    on cls.parent = cls_p.classstructureid\n        and r.parent_classificationid = cls_p.classificationid\n),\ncls1 as (\n    select classificationid_0\n        , classstructureid_0\n        , description_0\n        , laiteryhma_luokka\n        , laiteryhma_luokka_0_4\n        , child.classificationid as classificationid_1\n        , child.classstructureid as classstructureid_1\n        , child.description as description_1\n        , 1 as level\n    from cls0\n    join `clean_test`.`maximo`.`classstructure` child\n    on cls0.classstructureid_0 = child.parent\n),\ncls_all as (\n    select CLASSSTRUCTUREID_0 as classstructureid\n        , classificationid_0\n        , classstructureid_0\n        , description_0\n        , null as CLASSIFICATIONID_1\n        , null as CLASSSTRUCTUREID_1\n        , null as DESCRIPTION_1    \n        , laiteryhma_luokka\n        , laiteryhma_luokka_0_4\n        , level\n    from cls0\n    union all\n    select CLASSSTRUCTUREID_1 as classstructureid\n        , classificationid_0\n        , classstructureid_0\n        , description_0\n        , CLASSIFICATIONID_1\n        , CLASSSTRUCTUREID_1\n        , DESCRIPTION_1\n        , laiteryhma_luokka\n        , laiteryhma_luokka_0_4\n        , level\n    from cls1\n)\nselect * from cls_all", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_erotin": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_erotin", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_erotin.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_erotin.sql", "unique_id": "model.Fingrid.d_erotin", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_erotin"], "alias": "d_erotin", "checksum": {"name": "sha256", "checksum": "d1552ec28eab5a161a890c35f33c5bc356f03c07140aecac7b85b7b32ee76c01"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien laitteet - Erottimet.", "columns": {"ASSETNUM": {"name": "ASSETNUM", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEMNUM": {"name": "ITEMNUM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.5753038, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_erotin`", "raw_code": "SELECT\r\na.ASSETNUM,\r\na.ITEMNUM,\r\nmax(case when s.assetattrid = 'AERPAINT' then coalesce(s.numvalue,s.alnvalue) else null end) as AERPAINT_VALUE,\r\nmax(case when s.assetattrid = 'AERPAINT' then s.measureunitid else null end) as AERPAINT_UNITID,\r\nmax(case when s.assetattrid = 'ALARM' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_VALUE,\r\nmax(case when s.assetattrid = 'ALARM' then s.measureunitid else null end) as ALARM_UNITID,\r\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMMANUFACTOR_VALUE,\r\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then s.measureunitid else null end) as ALARMMANUFACTOR_UNITID,\r\nmax(case when s.assetattrid = 'ALARMTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMTYPE_VALUE,\r\nmax(case when s.assetattrid = 'ALARMTYPE' then s.measureunitid else null end) as ALARMTYPE_UNITID,\r\nmax(case when s.assetattrid = 'ANTURI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANTURI_VALUE,\r\nmax(case when s.assetattrid = 'ANTURI' then s.measureunitid else null end) as ANTURI_UNITID,\r\nmax(case when s.assetattrid = 'BIRDPROH' then coalesce(s.numvalue,s.alnvalue) else null end) as BIRDPROH_VALUE,\r\nmax(case when s.assetattrid = 'BIRDPROH' then s.measureunitid else null end) as BIRDPROH_UNITID,\r\nmax(case when s.assetattrid = 'CAPACI' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACI_VALUE,\r\nmax(case when s.assetattrid = 'CAPACI' then s.measureunitid else null end) as CAPACI_UNITID,\r\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE,\r\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\r\nmax(case when s.assetattrid = 'COLORCODE' then coalesce(s.numvalue,s.alnvalue) else null end) as COLORCODE_VALUE,\r\nmax(case when s.assetattrid = 'COLORCODE' then s.measureunitid else null end) as COLORCODE_UNITID,\r\nmax(case when s.assetattrid = 'CROSSARM' then coalesce(s.numvalue,s.alnvalue) else null end) as CROSSARM_VALUE,\r\nmax(case when s.assetattrid = 'CROSSARM' then s.measureunitid else null end) as CROSSARM_UNITID,\r\nmax(case when s.assetattrid = 'DCOND' then coalesce(s.numvalue,s.alnvalue) else null end) as DCOND_VALUE,\r\nmax(case when s.assetattrid = 'DCOND' then s.measureunitid else null end) as DCOND_UNITID,\r\nmax(case when s.assetattrid = 'FLYWARNSIGN' then coalesce(s.numvalue,s.alnvalue) else null end) as FLYWARNSIGN_VALUE,\r\nmax(case when s.assetattrid = 'FLYWARNSIGN' then s.measureunitid else null end) as FLYWARNSIGN_UNITID,\r\nmax(case when s.assetattrid = 'GUYWIREMARK' then coalesce(s.numvalue,s.alnvalue) else null end) as GUYWIREMARK_VALUE,\r\nmax(case when s.assetattrid = 'GUYWIREMARK' then s.measureunitid else null end) as GUYWIREMARK_UNITID,\r\nmax(case when s.assetattrid = 'HORBRADAMP' then coalesce(s.numvalue,s.alnvalue) else null end) as HORBRADAMP_VALUE,\r\nmax(case when s.assetattrid = 'HORBRADAMP' then s.measureunitid else null end) as HORBRADAMP_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE,\r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE,\r\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE,\r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE,\r\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\r\nmax(case when s.assetattrid = 'KOALISAATTORI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOALISAATTORI_VALUE,\r\nmax(case when s.assetattrid = 'KOALISAATTORI' then s.measureunitid else null end) as KOALISAATTORI_UNITID,\r\nmax(case when s.assetattrid = 'LEGTOP' then coalesce(s.numvalue,s.alnvalue) else null end) as LEGTOP_VALUE,\r\nmax(case when s.assetattrid = 'LEGTOP' then s.measureunitid else null end) as LEGTOP_UNITID,\r\nmax(case when s.assetattrid = 'LEG_LEN1' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN1_VALUE,\r\nmax(case when s.assetattrid = 'LEG_LEN1' then s.measureunitid else null end) as LEG_LEN1_UNITID,\r\nmax(case when s.assetattrid = 'LEG_LEN2' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN2_VALUE,\r\nmax(case when s.assetattrid = 'LEG_LEN2' then s.measureunitid else null end) as LEG_LEN2_UNITID,\r\nmax(case when s.assetattrid = 'LEG_LEN3' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN3_VALUE,\r\nmax(case when s.assetattrid = 'LEG_LEN3' then s.measureunitid else null end) as LEG_LEN3_UNITID,\r\nmax(case when s.assetattrid = 'LEG_LEN4' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN4_VALUE,\r\nmax(case when s.assetattrid = 'LEG_LEN4' then s.measureunitid else null end) as LEG_LEN4_UNITID,\r\nmax(case when s.assetattrid = 'LEG_NO1' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO1_VALUE,\r\nmax(case when s.assetattrid = 'LEG_NO1' then s.measureunitid else null end) as LEG_NO1_UNITID,\r\nmax(case when s.assetattrid = 'LEG_NO2' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO2_VALUE,\r\nmax(case when s.assetattrid = 'LEG_NO2' then s.measureunitid else null end) as LEG_NO2_UNITID,\r\nmax(case when s.assetattrid = 'LEG_NO3' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO3_VALUE,\r\nmax(case when s.assetattrid = 'LEG_NO3' then s.measureunitid else null end) as LEG_NO3_UNITID,\r\nmax(case when s.assetattrid = 'LEG_NO4' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO4_VALUE,\r\nmax(case when s.assetattrid = 'LEG_NO4' then s.measureunitid else null end) as LEG_NO4_UNITID,\r\nmax(case when s.assetattrid = 'LIGHTS' then coalesce(s.numvalue,s.alnvalue) else null end) as LIGHTS_VALUE,\r\nmax(case when s.assetattrid = 'LIGHTS' then s.measureunitid else null end) as LIGHTS_UNITID,\r\nmax(case when s.assetattrid = 'MATERIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as MATERIAL_VALUE,\r\nmax(case when s.assetattrid = 'MATERIAL' then s.measureunitid else null end) as MATERIAL_UNITID,\r\nmax(case when s.assetattrid = 'MAT_STR' then coalesce(s.numvalue,s.alnvalue) else null end) as MAT_STR_VALUE,\r\nmax(case when s.assetattrid = 'MAT_STR' then s.measureunitid else null end) as MAT_STR_UNITID,\r\nmax(case when s.assetattrid = 'MAXFLOW' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxFLOW_VALUE,\r\nmax(case when s.assetattrid = 'MAXFLOW' then s.measureunitid else null end) asmaxFLOW_UNITID,\r\nmax(case when s.assetattrid = 'MIN_TEMP' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_TEMP_VALUE,\r\nmax(case when s.assetattrid = 'MIN_TEMP' then s.measureunitid else null end) as MIN_TEMP_UNITID,\r\nmax(case when s.assetattrid = 'NAMEPLATE' then coalesce(s.numvalue,s.alnvalue) else null end) as NAMEPLATE_VALUE,\r\nmax(case when s.assetattrid = 'NAMEPLATE' then s.measureunitid else null end) as NAMEPLATE_UNITID,\r\nmax(case when s.assetattrid = 'NOOFCARM' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFCARM_VALUE,\r\nmax(case when s.assetattrid = 'NOOFCARM' then s.measureunitid else null end) as NOOFCARM_UNITID,\r\nmax(case when s.assetattrid = 'NOOFFNDS' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFFNDS_VALUE,\r\nmax(case when s.assetattrid = 'NOOFFNDS' then s.measureunitid else null end) as NOOFFNDS_UNITID,\r\nmax(case when s.assetattrid = 'NOOFGFND' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFGFND_VALUE,\r\nmax(case when s.assetattrid = 'NOOFGFND' then s.measureunitid else null end) as NOOFGFND_UNITID,\r\nmax(case when s.assetattrid = 'NOOFGUYS' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFGUYS_VALUE,\r\nmax(case when s.assetattrid = 'NOOFGUYS' then s.measureunitid else null end) as NOOFGUYS_UNITID,\r\nmax(case when s.assetattrid = 'NOOFSTPRT' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFSTPRT_VALUE,\r\nmax(case when s.assetattrid = 'NOOFSTPRT' then s.measureunitid else null end) as NOOFSTPRT_UNITID,\r\nmax(case when s.assetattrid = 'NOOFWPRT' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFWPRT_VALUE,\r\nmax(case when s.assetattrid = 'NOOFWPRT' then s.measureunitid else null end) as NOOFWPRT_UNITID,\r\nmax(case when s.assetattrid = 'OILMAX' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMAX_VALUE,\r\nmax(case when s.assetattrid = 'OILMAX' then s.measureunitid else null end) as OILMAX_UNITID,\r\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE,\r\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\r\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE,\r\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\r\nmax(case when s.assetattrid = 'SORT_U' then coalesce(s.numvalue,s.alnvalue) else null end) as SORT_U_VALUE,\r\nmax(case when s.assetattrid = 'SORT_U' then s.measureunitid else null end) as SORT_U_UNITID,\r\nmax(case when s.assetattrid = 'SPACER_L' then coalesce(s.numvalue,s.alnvalue) else null end) as SPACER_L_VALUE,\r\nmax(case when s.assetattrid = 'SPACER_L' then s.measureunitid else null end) as SPACER_L_UNITID,\r\nmax(case when s.assetattrid = 'SPACER_M' then coalesce(s.numvalue,s.alnvalue) else null end) as SPACER_M_VALUE,\r\nmax(case when s.assetattrid = 'SPACER_M' then s.measureunitid else null end) as SPACER_M_UNITID,\r\nmax(case when s.assetattrid = 'SPECIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as SPECIAL_VALUE,\r\nmax(case when s.assetattrid = 'SPECIAL' then s.measureunitid else null end) as SPECIAL_UNITID,\r\nmax(case when s.assetattrid = 'SPECSTRUCC' then coalesce(s.numvalue,s.alnvalue) else null end) as SPECSTRUCC_VALUE,\r\nmax(case when s.assetattrid = 'SPECSTRUCC' then s.measureunitid else null end) as SPECSTRUCC_UNITID,\r\nmax(case when s.assetattrid = 'STEELWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as STEELWEIGHT_VALUE,\r\nmax(case when s.assetattrid = 'STEELWEIGHT' then s.measureunitid else null end) as STEELWEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'SULKIJA' then coalesce(s.numvalue,s.alnvalue) else null end) as SULKIJA_VALUE,\r\nmax(case when s.assetattrid = 'SULKIJA' then s.measureunitid else null end) as SULKIJA_UNITID,\r\nmax(case when s.assetattrid = 'SW_ANGLE' then coalesce(s.numvalue,s.alnvalue) else null end) as SW_ANGLE_VALUE,\r\nmax(case when s.assetattrid = 'SW_ANGLE' then s.measureunitid else null end) as SW_ANGLE_UNITID,\r\nmax(case when s.assetattrid = 'TEHOLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TEHOLUOKKA_VALUE,\r\nmax(case when s.assetattrid = 'TEHOLUOKKA' then s.measureunitid else null end) as TEHOLUOKKA_UNITID,\r\nmax(case when s.assetattrid = 'TENSTWR' then coalesce(s.numvalue,s.alnvalue) else null end) as TENSTWR_VALUE,\r\nmax(case when s.assetattrid = 'TENSTWR' then s.measureunitid else null end) as TENSTWR_UNITID,\r\nmax(case when s.assetattrid = 'TOPHGHT1' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT1_VALUE,\r\nmax(case when s.assetattrid = 'TOPHGHT1' then s.measureunitid else null end) as TOPHGHT1_UNITID,\r\nmax(case when s.assetattrid = 'TOPHGHT2' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT2_VALUE,\r\nmax(case when s.assetattrid = 'TOPHGHT2' then s.measureunitid else null end) as TOPHGHT2_UNITID,\r\nmax(case when s.assetattrid = 'TOPHGHT3' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT3_VALUE,\r\nmax(case when s.assetattrid = 'TOPHGHT3' then s.measureunitid else null end) as TOPHGHT3_UNITID,\r\nmax(case when s.assetattrid = 'TOPHGHT4' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT4_VALUE,\r\nmax(case when s.assetattrid = 'TOPHGHT4' then s.measureunitid else null end) as TOPHGHT4_UNITID,\r\nmax(case when s.assetattrid = 'UCONTROL' then coalesce(s.numvalue,s.alnvalue) else null end) as UCONTROL_VALUE,\r\nmax(case when s.assetattrid = 'UCONTROL' then s.measureunitid else null end) as UCONTROL_UNITID,\r\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE,\r\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\r\nmax(case when s.assetattrid = 'VOL' then coalesce(s.numvalue,s.alnvalue) else null end) as VOL_VALUE,\r\nmax(case when s.assetattrid = 'VOL' then s.measureunitid else null end) as VOL_UNITID,\r\nmax(case when s.assetattrid = 'WARNSIGN' then coalesce(s.numvalue,s.alnvalue) else null end) as WARNSIGN_VALUE,\r\nmax(case when s.assetattrid = 'WARNSIGN' then s.measureunitid else null end) as WARNSIGN_UNITID,\r\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE,\r\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'WOODPNET' then coalesce(s.numvalue,s.alnvalue) else null end) as WOODPNET_VALUE,\r\nmax(case when s.assetattrid = 'WOODPNET' then s.measureunitid else null end) as WOODPNET_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere exists (select 1 from {{ source('maximo', 'classstructure') }} cs \r\n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\r\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'ERO' \r\n                and cs.cushierarchypath != 'EROTINAS' /*'Erottimet'*/ )\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "classstructure"], ["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_erotin.sql", "compiled": true, "compiled_code": "SELECT\na.ASSETNUM,\na.ITEMNUM,\nmax(case when s.assetattrid = 'AERPAINT' then coalesce(s.numvalue,s.alnvalue) else null end) as AERPAINT_VALUE,\nmax(case when s.assetattrid = 'AERPAINT' then s.measureunitid else null end) as AERPAINT_UNITID,\nmax(case when s.assetattrid = 'ALARM' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_VALUE,\nmax(case when s.assetattrid = 'ALARM' then s.measureunitid else null end) as ALARM_UNITID,\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMMANUFACTOR_VALUE,\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then s.measureunitid else null end) as ALARMMANUFACTOR_UNITID,\nmax(case when s.assetattrid = 'ALARMTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMTYPE_VALUE,\nmax(case when s.assetattrid = 'ALARMTYPE' then s.measureunitid else null end) as ALARMTYPE_UNITID,\nmax(case when s.assetattrid = 'ANTURI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANTURI_VALUE,\nmax(case when s.assetattrid = 'ANTURI' then s.measureunitid else null end) as ANTURI_UNITID,\nmax(case when s.assetattrid = 'BIRDPROH' then coalesce(s.numvalue,s.alnvalue) else null end) as BIRDPROH_VALUE,\nmax(case when s.assetattrid = 'BIRDPROH' then s.measureunitid else null end) as BIRDPROH_UNITID,\nmax(case when s.assetattrid = 'CAPACI' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACI_VALUE,\nmax(case when s.assetattrid = 'CAPACI' then s.measureunitid else null end) as CAPACI_UNITID,\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE,\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\nmax(case when s.assetattrid = 'COLORCODE' then coalesce(s.numvalue,s.alnvalue) else null end) as COLORCODE_VALUE,\nmax(case when s.assetattrid = 'COLORCODE' then s.measureunitid else null end) as COLORCODE_UNITID,\nmax(case when s.assetattrid = 'CROSSARM' then coalesce(s.numvalue,s.alnvalue) else null end) as CROSSARM_VALUE,\nmax(case when s.assetattrid = 'CROSSARM' then s.measureunitid else null end) as CROSSARM_UNITID,\nmax(case when s.assetattrid = 'DCOND' then coalesce(s.numvalue,s.alnvalue) else null end) as DCOND_VALUE,\nmax(case when s.assetattrid = 'DCOND' then s.measureunitid else null end) as DCOND_UNITID,\nmax(case when s.assetattrid = 'FLYWARNSIGN' then coalesce(s.numvalue,s.alnvalue) else null end) as FLYWARNSIGN_VALUE,\nmax(case when s.assetattrid = 'FLYWARNSIGN' then s.measureunitid else null end) as FLYWARNSIGN_UNITID,\nmax(case when s.assetattrid = 'GUYWIREMARK' then coalesce(s.numvalue,s.alnvalue) else null end) as GUYWIREMARK_VALUE,\nmax(case when s.assetattrid = 'GUYWIREMARK' then s.measureunitid else null end) as GUYWIREMARK_UNITID,\nmax(case when s.assetattrid = 'HORBRADAMP' then coalesce(s.numvalue,s.alnvalue) else null end) as HORBRADAMP_VALUE,\nmax(case when s.assetattrid = 'HORBRADAMP' then s.measureunitid else null end) as HORBRADAMP_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE,\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE,\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE,\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE,\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\nmax(case when s.assetattrid = 'KOALISAATTORI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOALISAATTORI_VALUE,\nmax(case when s.assetattrid = 'KOALISAATTORI' then s.measureunitid else null end) as KOALISAATTORI_UNITID,\nmax(case when s.assetattrid = 'LEGTOP' then coalesce(s.numvalue,s.alnvalue) else null end) as LEGTOP_VALUE,\nmax(case when s.assetattrid = 'LEGTOP' then s.measureunitid else null end) as LEGTOP_UNITID,\nmax(case when s.assetattrid = 'LEG_LEN1' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN1_VALUE,\nmax(case when s.assetattrid = 'LEG_LEN1' then s.measureunitid else null end) as LEG_LEN1_UNITID,\nmax(case when s.assetattrid = 'LEG_LEN2' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN2_VALUE,\nmax(case when s.assetattrid = 'LEG_LEN2' then s.measureunitid else null end) as LEG_LEN2_UNITID,\nmax(case when s.assetattrid = 'LEG_LEN3' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN3_VALUE,\nmax(case when s.assetattrid = 'LEG_LEN3' then s.measureunitid else null end) as LEG_LEN3_UNITID,\nmax(case when s.assetattrid = 'LEG_LEN4' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN4_VALUE,\nmax(case when s.assetattrid = 'LEG_LEN4' then s.measureunitid else null end) as LEG_LEN4_UNITID,\nmax(case when s.assetattrid = 'LEG_NO1' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO1_VALUE,\nmax(case when s.assetattrid = 'LEG_NO1' then s.measureunitid else null end) as LEG_NO1_UNITID,\nmax(case when s.assetattrid = 'LEG_NO2' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO2_VALUE,\nmax(case when s.assetattrid = 'LEG_NO2' then s.measureunitid else null end) as LEG_NO2_UNITID,\nmax(case when s.assetattrid = 'LEG_NO3' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO3_VALUE,\nmax(case when s.assetattrid = 'LEG_NO3' then s.measureunitid else null end) as LEG_NO3_UNITID,\nmax(case when s.assetattrid = 'LEG_NO4' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO4_VALUE,\nmax(case when s.assetattrid = 'LEG_NO4' then s.measureunitid else null end) as LEG_NO4_UNITID,\nmax(case when s.assetattrid = 'LIGHTS' then coalesce(s.numvalue,s.alnvalue) else null end) as LIGHTS_VALUE,\nmax(case when s.assetattrid = 'LIGHTS' then s.measureunitid else null end) as LIGHTS_UNITID,\nmax(case when s.assetattrid = 'MATERIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as MATERIAL_VALUE,\nmax(case when s.assetattrid = 'MATERIAL' then s.measureunitid else null end) as MATERIAL_UNITID,\nmax(case when s.assetattrid = 'MAT_STR' then coalesce(s.numvalue,s.alnvalue) else null end) as MAT_STR_VALUE,\nmax(case when s.assetattrid = 'MAT_STR' then s.measureunitid else null end) as MAT_STR_UNITID,\nmax(case when s.assetattrid = 'MAXFLOW' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxFLOW_VALUE,\nmax(case when s.assetattrid = 'MAXFLOW' then s.measureunitid else null end) asmaxFLOW_UNITID,\nmax(case when s.assetattrid = 'MIN_TEMP' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_TEMP_VALUE,\nmax(case when s.assetattrid = 'MIN_TEMP' then s.measureunitid else null end) as MIN_TEMP_UNITID,\nmax(case when s.assetattrid = 'NAMEPLATE' then coalesce(s.numvalue,s.alnvalue) else null end) as NAMEPLATE_VALUE,\nmax(case when s.assetattrid = 'NAMEPLATE' then s.measureunitid else null end) as NAMEPLATE_UNITID,\nmax(case when s.assetattrid = 'NOOFCARM' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFCARM_VALUE,\nmax(case when s.assetattrid = 'NOOFCARM' then s.measureunitid else null end) as NOOFCARM_UNITID,\nmax(case when s.assetattrid = 'NOOFFNDS' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFFNDS_VALUE,\nmax(case when s.assetattrid = 'NOOFFNDS' then s.measureunitid else null end) as NOOFFNDS_UNITID,\nmax(case when s.assetattrid = 'NOOFGFND' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFGFND_VALUE,\nmax(case when s.assetattrid = 'NOOFGFND' then s.measureunitid else null end) as NOOFGFND_UNITID,\nmax(case when s.assetattrid = 'NOOFGUYS' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFGUYS_VALUE,\nmax(case when s.assetattrid = 'NOOFGUYS' then s.measureunitid else null end) as NOOFGUYS_UNITID,\nmax(case when s.assetattrid = 'NOOFSTPRT' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFSTPRT_VALUE,\nmax(case when s.assetattrid = 'NOOFSTPRT' then s.measureunitid else null end) as NOOFSTPRT_UNITID,\nmax(case when s.assetattrid = 'NOOFWPRT' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFWPRT_VALUE,\nmax(case when s.assetattrid = 'NOOFWPRT' then s.measureunitid else null end) as NOOFWPRT_UNITID,\nmax(case when s.assetattrid = 'OILMAX' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMAX_VALUE,\nmax(case when s.assetattrid = 'OILMAX' then s.measureunitid else null end) as OILMAX_UNITID,\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE,\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE,\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\nmax(case when s.assetattrid = 'SORT_U' then coalesce(s.numvalue,s.alnvalue) else null end) as SORT_U_VALUE,\nmax(case when s.assetattrid = 'SORT_U' then s.measureunitid else null end) as SORT_U_UNITID,\nmax(case when s.assetattrid = 'SPACER_L' then coalesce(s.numvalue,s.alnvalue) else null end) as SPACER_L_VALUE,\nmax(case when s.assetattrid = 'SPACER_L' then s.measureunitid else null end) as SPACER_L_UNITID,\nmax(case when s.assetattrid = 'SPACER_M' then coalesce(s.numvalue,s.alnvalue) else null end) as SPACER_M_VALUE,\nmax(case when s.assetattrid = 'SPACER_M' then s.measureunitid else null end) as SPACER_M_UNITID,\nmax(case when s.assetattrid = 'SPECIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as SPECIAL_VALUE,\nmax(case when s.assetattrid = 'SPECIAL' then s.measureunitid else null end) as SPECIAL_UNITID,\nmax(case when s.assetattrid = 'SPECSTRUCC' then coalesce(s.numvalue,s.alnvalue) else null end) as SPECSTRUCC_VALUE,\nmax(case when s.assetattrid = 'SPECSTRUCC' then s.measureunitid else null end) as SPECSTRUCC_UNITID,\nmax(case when s.assetattrid = 'STEELWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as STEELWEIGHT_VALUE,\nmax(case when s.assetattrid = 'STEELWEIGHT' then s.measureunitid else null end) as STEELWEIGHT_UNITID,\nmax(case when s.assetattrid = 'SULKIJA' then coalesce(s.numvalue,s.alnvalue) else null end) as SULKIJA_VALUE,\nmax(case when s.assetattrid = 'SULKIJA' then s.measureunitid else null end) as SULKIJA_UNITID,\nmax(case when s.assetattrid = 'SW_ANGLE' then coalesce(s.numvalue,s.alnvalue) else null end) as SW_ANGLE_VALUE,\nmax(case when s.assetattrid = 'SW_ANGLE' then s.measureunitid else null end) as SW_ANGLE_UNITID,\nmax(case when s.assetattrid = 'TEHOLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TEHOLUOKKA_VALUE,\nmax(case when s.assetattrid = 'TEHOLUOKKA' then s.measureunitid else null end) as TEHOLUOKKA_UNITID,\nmax(case when s.assetattrid = 'TENSTWR' then coalesce(s.numvalue,s.alnvalue) else null end) as TENSTWR_VALUE,\nmax(case when s.assetattrid = 'TENSTWR' then s.measureunitid else null end) as TENSTWR_UNITID,\nmax(case when s.assetattrid = 'TOPHGHT1' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT1_VALUE,\nmax(case when s.assetattrid = 'TOPHGHT1' then s.measureunitid else null end) as TOPHGHT1_UNITID,\nmax(case when s.assetattrid = 'TOPHGHT2' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT2_VALUE,\nmax(case when s.assetattrid = 'TOPHGHT2' then s.measureunitid else null end) as TOPHGHT2_UNITID,\nmax(case when s.assetattrid = 'TOPHGHT3' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT3_VALUE,\nmax(case when s.assetattrid = 'TOPHGHT3' then s.measureunitid else null end) as TOPHGHT3_UNITID,\nmax(case when s.assetattrid = 'TOPHGHT4' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT4_VALUE,\nmax(case when s.assetattrid = 'TOPHGHT4' then s.measureunitid else null end) as TOPHGHT4_UNITID,\nmax(case when s.assetattrid = 'UCONTROL' then coalesce(s.numvalue,s.alnvalue) else null end) as UCONTROL_VALUE,\nmax(case when s.assetattrid = 'UCONTROL' then s.measureunitid else null end) as UCONTROL_UNITID,\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE,\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\nmax(case when s.assetattrid = 'VOL' then coalesce(s.numvalue,s.alnvalue) else null end) as VOL_VALUE,\nmax(case when s.assetattrid = 'VOL' then s.measureunitid else null end) as VOL_UNITID,\nmax(case when s.assetattrid = 'WARNSIGN' then coalesce(s.numvalue,s.alnvalue) else null end) as WARNSIGN_VALUE,\nmax(case when s.assetattrid = 'WARNSIGN' then s.measureunitid else null end) as WARNSIGN_UNITID,\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE,\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID,\nmax(case when s.assetattrid = 'WOODPNET' then coalesce(s.numvalue,s.alnvalue) else null end) as WOODPNET_VALUE,\nmax(case when s.assetattrid = 'WOODPNET' then s.measureunitid else null end) as WOODPNET_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere exists (select 1 from `clean_test`.`maximo`.`classstructure` cs \n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'ERO' \n                and cs.cushierarchypath != 'EROTINAS' /*'Erottimet'*/ )\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_henkilo": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_henkilo", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_henkilo.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_henkilo.sql", "unique_id": "model.Fingrid.d_henkilo", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_henkilo"], "alias": "d_henkilo", "checksum": {"name": "sha256", "checksum": "8dc948a4377581a93561d6fa5cbeacf9cc7892365476f578dd7517c036db492c"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien kunnossapidon toimittajien henkil\u00f6st\u00f6.", "columns": {"personid": {"name": "personid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pluspcustomer": {"name": "pluspcustomer", "description": "Foreign key to d_toimittaja.customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pluspcustvendor": {"name": "pluspcustvendor", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laborcode": {"name": "laborcode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personuid": {"name": "personuid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pluspcustvndtype": {"name": "pluspcustvndtype", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusisworkforsycloss": {"name": "cusisworkforsycloss", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusisworkforsyclotl": {"name": "cusisworkforsyclotl", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusdate": {"name": "statusdate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp_person": {"name": "rowstamp_person", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp_labor": {"name": "rowstamp_labor", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.4993036, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\n\r\nselect p.personid\r\n     , p.pluspcustomer\r\n     , p.pluspcustvendor\r\n     , l.laborid\r\n     , l.laborcode\r\n     , p.department\r\n     , p.personuid\r\n     , p.pluspcustvndtype\r\n     , p.cusisworkforsycloss\r\n     , p.cusisworkforsyclotl\r\n     , p.status\r\n     , p.statusdate\r\n     , p.rowstamp rowstamp_person\r\n     , l.rowstamp rowstamp_labor\r\nfrom {{ source('maximo', 'person') }} p\r\njoin {{ source('maximo', 'labor') }} l on l.personid = p.personid", "language": "sql", "refs": [], "sources": [["maximo", "labor"], ["maximo", "person"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.labor", "source.Fingrid.maximo.person"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_henkilo.sql", "compiled": true, "compiled_code": "\n\nselect p.personid\n     , p.pluspcustomer\n     , p.pluspcustvendor\n     , l.laborid\n     , l.laborcode\n     , p.department\n     , p.personuid\n     , p.pluspcustvndtype\n     , p.cusisworkforsycloss\n     , p.cusisworkforsyclotl\n     , p.status\n     , p.statusdate\n     , p.rowstamp rowstamp_person\n     , l.rowstamp rowstamp_labor\nfrom `clean_test`.`maximo`.`person` p\njoin `clean_test`.`maximo`.`labor` l on l.personid = p.personid", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_jannitemuuntaja": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_jannitemuuntaja", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_jannitemuuntaja.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_jannitemuuntaja.sql", "unique_id": "model.Fingrid.d_jannitemuuntaja", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_jannitemuuntaja"], "alias": "d_jannitemuuntaja", "checksum": {"name": "sha256", "checksum": "15b8355d2cb850c7d9081f9985a0492bd2b1f62688b47e618765619c96992a8b"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien laitteet - J\u00e4nnitemuuntajat.", "columns": {"ASSETNUM": {"name": "ASSETNUM", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEMNUM": {"name": "ITEMNUM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.5803041, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_jannitemuuntaja`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\nselect\r\na.ASSETNUM,\r\na.ITEMNUM,\r\nmax(case when s.assetattrid = 'CAPACITA' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACITA_VALUE,\r\nmax(case when s.assetattrid = 'CAPACITA' then s.measureunitid else null end) as CAPACITA_UNITID,\r\nmax(case when s.assetattrid = 'CLASSINS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASSINS_VALUE,\r\nmax(case when s.assetattrid = 'CLASSINS' then s.measureunitid else null end) as CLASSINS_UNITID,\r\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE,\r\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\r\nmax(case when s.assetattrid = 'GIS' then coalesce(s.numvalue,s.alnvalue) else null end) as GIS_VALUE,\r\nmax(case when s.assetattrid = 'GIS' then s.measureunitid else null end) as GIS_UNITID,\r\nmax(case when s.assetattrid = 'INNERINS' then coalesce(s.numvalue,s.alnvalue) else null end) as INNERINS_VALUE,\r\nmax(case when s.assetattrid = 'INNERINS' then s.measureunitid else null end) as INNERINS_UNITID,\r\nmax(case when s.assetattrid = 'LITESTU' then coalesce(s.numvalue,s.alnvalue) else null end) as LITESTU_VALUE,\r\nmax(case when s.assetattrid = 'LITESTU' then s.measureunitid else null end) as LITESTU_UNITID,\r\nmax(case when s.assetattrid = 'MAXSYSU' then coalesce(s.numvalue,s.alnvalue) else null end) as MAXSYSU_VALUE,\r\nmax(case when s.assetattrid = 'MAXSYSU' then s.measureunitid else null end) as MAXSYSU_UNITID,\r\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE,\r\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\r\nmax(case when s.assetattrid = 'OILMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMASS_VALUE,\r\nmax(case when s.assetattrid = 'OILMASS' then s.measureunitid else null end) as OILMASS_UNITID,\r\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE,\r\nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\r\nmax(case when s.assetattrid = 'OUTINS' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTINS_VALUE,\r\nmax(case when s.assetattrid = 'OUTINS' then s.measureunitid else null end) as OUTINS_UNITID,\r\nmax(case when s.assetattrid = 'POWERFU' then coalesce(s.numvalue,s.alnvalue) else null end) as POWERFU_VALUE,\r\nmax(case when s.assetattrid = 'POWERFU' then s.measureunitid else null end) as POWERFU_UNITID,\r\nmax(case when s.assetattrid = 'RATEDTIM' then coalesce(s.numvalue,s.alnvalue) else null end) as RATEDTIM_VALUE,\r\nmax(case when s.assetattrid = 'RATEDTIM' then s.measureunitid else null end) as RATEDTIM_UNITID,\r\nmax(case when s.assetattrid = 'RATVFACT' then coalesce(s.numvalue,s.alnvalue) else null end) as RATVFACT_VALUE,\r\nmax(case when s.assetattrid = 'RATVFACT' then s.measureunitid else null end) as RATVFACT_UNITID,\r\nmax(case when s.assetattrid = 'STANDARD' then coalesce(s.numvalue,s.alnvalue) else null end) as STANDARD_VALUE,\r\nmax(case when s.assetattrid = 'STANDARD' then s.measureunitid else null end) as STANDARD_UNITID,\r\nmax(case when s.assetattrid = 'TERMDESC' then coalesce(s.numvalue,s.alnvalue) else null end) as TERMDESC_VALUE,\r\nmax(case when s.assetattrid = 'TERMDESC' then s.measureunitid else null end) as TERMDESC_UNITID,\r\nmax(case when s.assetattrid = 'TOTMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTMASS_VALUE,\r\nmax(case when s.assetattrid = 'TOTMASS' then s.measureunitid else null end) as TOTMASS_UNITID,\r\nmax(case when s.assetattrid = 'URATED' then coalesce(s.numvalue,s.alnvalue) else null end) as URATED_VALUE,\r\nmax(case when s.assetattrid = 'URATED' then s.measureunitid else null end) as URATED_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere exists (select 1 from {{ source('maximo', 'classstructure') }} cs \r\n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\r\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'J\u00c4N' /*'J\u00e4nnitemuuntajat'*/ )\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "classstructure"], ["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_jannitemuuntaja.sql", "compiled": true, "compiled_code": "\nselect\na.ASSETNUM,\na.ITEMNUM,\nmax(case when s.assetattrid = 'CAPACITA' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACITA_VALUE,\nmax(case when s.assetattrid = 'CAPACITA' then s.measureunitid else null end) as CAPACITA_UNITID,\nmax(case when s.assetattrid = 'CLASSINS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASSINS_VALUE,\nmax(case when s.assetattrid = 'CLASSINS' then s.measureunitid else null end) as CLASSINS_UNITID,\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE,\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\nmax(case when s.assetattrid = 'GIS' then coalesce(s.numvalue,s.alnvalue) else null end) as GIS_VALUE,\nmax(case when s.assetattrid = 'GIS' then s.measureunitid else null end) as GIS_UNITID,\nmax(case when s.assetattrid = 'INNERINS' then coalesce(s.numvalue,s.alnvalue) else null end) as INNERINS_VALUE,\nmax(case when s.assetattrid = 'INNERINS' then s.measureunitid else null end) as INNERINS_UNITID,\nmax(case when s.assetattrid = 'LITESTU' then coalesce(s.numvalue,s.alnvalue) else null end) as LITESTU_VALUE,\nmax(case when s.assetattrid = 'LITESTU' then s.measureunitid else null end) as LITESTU_UNITID,\nmax(case when s.assetattrid = 'MAXSYSU' then coalesce(s.numvalue,s.alnvalue) else null end) as MAXSYSU_VALUE,\nmax(case when s.assetattrid = 'MAXSYSU' then s.measureunitid else null end) as MAXSYSU_UNITID,\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE,\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\nmax(case when s.assetattrid = 'OILMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMASS_VALUE,\nmax(case when s.assetattrid = 'OILMASS' then s.measureunitid else null end) as OILMASS_UNITID,\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE,\nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE,\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\nmax(case when s.assetattrid = 'OUTINS' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTINS_VALUE,\nmax(case when s.assetattrid = 'OUTINS' then s.measureunitid else null end) as OUTINS_UNITID,\nmax(case when s.assetattrid = 'POWERFU' then coalesce(s.numvalue,s.alnvalue) else null end) as POWERFU_VALUE,\nmax(case when s.assetattrid = 'POWERFU' then s.measureunitid else null end) as POWERFU_UNITID,\nmax(case when s.assetattrid = 'RATEDTIM' then coalesce(s.numvalue,s.alnvalue) else null end) as RATEDTIM_VALUE,\nmax(case when s.assetattrid = 'RATEDTIM' then s.measureunitid else null end) as RATEDTIM_UNITID,\nmax(case when s.assetattrid = 'RATVFACT' then coalesce(s.numvalue,s.alnvalue) else null end) as RATVFACT_VALUE,\nmax(case when s.assetattrid = 'RATVFACT' then s.measureunitid else null end) as RATVFACT_UNITID,\nmax(case when s.assetattrid = 'STANDARD' then coalesce(s.numvalue,s.alnvalue) else null end) as STANDARD_VALUE,\nmax(case when s.assetattrid = 'STANDARD' then s.measureunitid else null end) as STANDARD_UNITID,\nmax(case when s.assetattrid = 'TERMDESC' then coalesce(s.numvalue,s.alnvalue) else null end) as TERMDESC_VALUE,\nmax(case when s.assetattrid = 'TERMDESC' then s.measureunitid else null end) as TERMDESC_UNITID,\nmax(case when s.assetattrid = 'TOTMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTMASS_VALUE,\nmax(case when s.assetattrid = 'TOTMASS' then s.measureunitid else null end) as TOTMASS_UNITID,\nmax(case when s.assetattrid = 'URATED' then coalesce(s.numvalue,s.alnvalue) else null end) as URATED_VALUE,\nmax(case when s.assetattrid = 'URATED' then s.measureunitid else null end) as URATED_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere exists (select 1 from `clean_test`.`maximo`.`classstructure` cs \n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'J\u00c4N' /*'J\u00e4nnitemuuntajat'*/ )\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_katkaisija": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_katkaisija", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_katkaisija.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_katkaisija.sql", "unique_id": "model.Fingrid.d_katkaisija", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_katkaisija"], "alias": "d_katkaisija", "checksum": {"name": "sha256", "checksum": "b98fc69d1cf89c323d4bcb7a5ee89f1017602fa43df49751cfd0b414f566803e"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien laitteet - Katkaisijat.", "columns": {"ASSETNUM": {"name": "ASSETNUM", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEMNUM": {"name": "ITEMNUM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.576304, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_katkaisija`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\nselect\r\na.ASSETNUM,\r\na.ITEMNUM,\r\nmax(case when s.assetattrid = 'APRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as APRESS_VALUE, \r\nmax(case when s.assetattrid = 'APRESS' then s.measureunitid else null end) as APRESS_UNITID,\r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\r\nmax(case when s.assetattrid = 'ARCLP' then coalesce(s.numvalue,s.alnvalue) else null end) as ARCLP_VALUE, \r\nmax(case when s.assetattrid = 'ARCLP' then s.measureunitid else null end) as ARCLP_UNITID,\r\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \r\nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\r\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \r\nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\r\nmax(case when s.assetattrid = 'CLPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLPRESS_VALUE, \r\nmax(case when s.assetattrid = 'CLPRESS' then s.measureunitid else null end) as CLPRESS_UNITID,\r\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE, \r\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\r\nmax(case when s.assetattrid = 'DENMON' then coalesce(s.numvalue,s.alnvalue) else null end) as DENMON_VALUE, \r\nmax(case when s.assetattrid = 'DENMON' then s.measureunitid else null end) as DENMON_UNITID,\r\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \r\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\r\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \r\nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\r\nmax(case when s.assetattrid = 'FPRES' then coalesce(s.numvalue,s.alnvalue) else null end) as FPRES_VALUE, \r\nmax(case when s.assetattrid = 'FPRES' then s.measureunitid else null end) as FPRES_UNITID,\r\nmax(case when s.assetattrid = 'GMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as GMASS_VALUE, \r\nmax(case when s.assetattrid = 'GMASS' then s.measureunitid else null end) as GMASS_UNITID,\r\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \r\nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\r\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \r\nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\r\nmax(case when s.assetattrid = 'IBRK' then coalesce(s.numvalue,s.alnvalue) else null end) as IBRK_VALUE, \r\nmax(case when s.assetattrid = 'IBRK' then s.measureunitid else null end) as IBRK_UNITID,\r\nmax(case when s.assetattrid = 'IDC' then coalesce(s.numvalue,s.alnvalue) else null end) as IDC_VALUE, \r\nmax(case when s.assetattrid = 'IDC' then s.measureunitid else null end) as IDC_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'IMAKE' then coalesce(s.numvalue,s.alnvalue) else null end) as IMAKE_VALUE, \r\nmax(case when s.assetattrid = 'IMAKE' then s.measureunitid else null end) as IMAKE_UNITID,\r\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE, \r\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\r\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \r\nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE, \r\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\r\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \r\nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\r\nmax(case when s.assetattrid = 'LPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as LPRESS_VALUE, \r\nmax(case when s.assetattrid = 'LPRESS' then s.measureunitid else null end) as LPRESS_UNITID,\r\nmax(case when s.assetattrid = 'MEDIUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MEDIUM_VALUE, \r\nmax(case when s.assetattrid = 'MEDIUM' then s.measureunitid else null end) as MEDIUM_UNITID,\r\nmax(case when s.assetattrid = 'MIN_TEMP' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_TEMP_VALUE, \r\nmax(case when s.assetattrid = 'MIN_TEMP' then s.measureunitid else null end) as MIN_TEMP_UNITID,\r\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \r\nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\r\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \r\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\r\nmax(case when s.assetattrid = 'OILTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as OILTYPE_VALUE, \r\nmax(case when s.assetattrid = 'OILTYPE' then s.measureunitid else null end) as OILTYPE_UNITID,\r\nmax(case when s.assetattrid = 'OIL_AM' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AM_VALUE, \r\nmax(case when s.assetattrid = 'OIL_AM' then s.measureunitid else null end) as OIL_AM_UNITID,\r\nmax(case when s.assetattrid = 'OLPRESS1' then coalesce(s.numvalue,s.alnvalue) else null end) as OLPRESS1_VALUE, \r\nmax(case when s.assetattrid = 'OLPRESS1' then s.measureunitid else null end) as OLPRESS1_UNITID,\r\nmax(case when s.assetattrid = 'OLPRESS2' then coalesce(s.numvalue,s.alnvalue) else null end) as OLPRESS2_VALUE, \r\nmax(case when s.assetattrid = 'OLPRESS2' then s.measureunitid else null end) as OLPRESS2_UNITID,\r\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE, \r\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \r\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\r\nmax(case when s.assetattrid = 'OPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPRESS_VALUE, \r\nmax(case when s.assetattrid = 'OPRESS' then s.measureunitid else null end) as OPRESS_UNITID,\r\nmax(case when s.assetattrid = 'PRES_NOTATION' then coalesce(s.numvalue,s.alnvalue) else null end) as PRES_NOTATION_VALUE, \r\nmax(case when s.assetattrid = 'PRES_NOTATION' then s.measureunitid else null end) as PRES_NOTATION_UNITID,\r\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \r\nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\r\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \r\nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\r\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \r\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\r\nmax(case when s.assetattrid = 'SORT_U' then coalesce(s.numvalue,s.alnvalue) else null end) as SORT_U_VALUE, \r\nmax(case when s.assetattrid = 'SORT_U' then s.measureunitid else null end) as SORT_U_UNITID,\r\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \r\nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\r\nmax(case when s.assetattrid = 'SVALVE' then coalesce(s.numvalue,s.alnvalue) else null end) as SVALVE_VALUE, \r\nmax(case when s.assetattrid = 'SVALVE' then s.measureunitid else null end) as SVALVE_UNITID,\r\nmax(case when s.assetattrid = 'SW_ANGLE' then coalesce(s.numvalue,s.alnvalue) else null end) as SW_ANGLE_VALUE, \r\nmax(case when s.assetattrid = 'SW_ANGLE' then s.measureunitid else null end) as SW_ANGLE_UNITID,\r\nmax(case when s.assetattrid = 'TMPCLSS' then coalesce(s.numvalue,s.alnvalue) else null end) as TMPCLSS_VALUE, \r\nmax(case when s.assetattrid = 'TMPCLSS' then s.measureunitid else null end) as TMPCLSS_UNITID,\r\nmax(case when s.assetattrid = 'TPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as TPRESS_VALUE, \r\nmax(case when s.assetattrid = 'TPRESS' then s.measureunitid else null end) as TPRESS_UNITID,\r\nmax(case when s.assetattrid = 'UCONTROL' then coalesce(s.numvalue,s.alnvalue) else null end) as UCONTROL_VALUE, \r\nmax(case when s.assetattrid = 'UCONTROL' then s.measureunitid else null end) as UCONTROL_UNITID,\r\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE, \r\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\r\nmax(case when s.assetattrid = 'UPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as UPRESS_VALUE, \r\nmax(case when s.assetattrid = 'UPRESS' then s.measureunitid else null end) as UPRESS_UNITID,\r\nmax(case when s.assetattrid = 'VPOLE' then coalesce(s.numvalue,s.alnvalue) else null end) as VPOLE_VALUE, \r\nmax(case when s.assetattrid = 'VPOLE' then s.measureunitid else null end) as VPOLE_UNITID,\r\nmax(case when s.assetattrid = 'VTOT' then coalesce(s.numvalue,s.alnvalue) else null end) as VTOT_VALUE, \r\nmax(case when s.assetattrid = 'VTOT' then s.measureunitid else null end) as VTOT_UNITID,\r\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere exists (select 1 from {{ source('maximo', 'classstructure') }} cs \r\n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\r\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'KAT' /*'Katkaisijat'*/ )\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "classstructure"], ["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_katkaisija.sql", "compiled": true, "compiled_code": "\nselect\na.ASSETNUM,\na.ITEMNUM,\nmax(case when s.assetattrid = 'APRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as APRESS_VALUE, \nmax(case when s.assetattrid = 'APRESS' then s.measureunitid else null end) as APRESS_UNITID,\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\nmax(case when s.assetattrid = 'ARCLP' then coalesce(s.numvalue,s.alnvalue) else null end) as ARCLP_VALUE, \nmax(case when s.assetattrid = 'ARCLP' then s.measureunitid else null end) as ARCLP_UNITID,\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\nmax(case when s.assetattrid = 'CLPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLPRESS_VALUE, \nmax(case when s.assetattrid = 'CLPRESS' then s.measureunitid else null end) as CLPRESS_UNITID,\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE, \nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\nmax(case when s.assetattrid = 'DENMON' then coalesce(s.numvalue,s.alnvalue) else null end) as DENMON_VALUE, \nmax(case when s.assetattrid = 'DENMON' then s.measureunitid else null end) as DENMON_UNITID,\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\nmax(case when s.assetattrid = 'FPRES' then coalesce(s.numvalue,s.alnvalue) else null end) as FPRES_VALUE, \nmax(case when s.assetattrid = 'FPRES' then s.measureunitid else null end) as FPRES_UNITID,\nmax(case when s.assetattrid = 'GMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as GMASS_VALUE, \nmax(case when s.assetattrid = 'GMASS' then s.measureunitid else null end) as GMASS_UNITID,\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\nmax(case when s.assetattrid = 'IBRK' then coalesce(s.numvalue,s.alnvalue) else null end) as IBRK_VALUE, \nmax(case when s.assetattrid = 'IBRK' then s.measureunitid else null end) as IBRK_UNITID,\nmax(case when s.assetattrid = 'IDC' then coalesce(s.numvalue,s.alnvalue) else null end) as IDC_VALUE, \nmax(case when s.assetattrid = 'IDC' then s.measureunitid else null end) as IDC_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'IMAKE' then coalesce(s.numvalue,s.alnvalue) else null end) as IMAKE_VALUE, \nmax(case when s.assetattrid = 'IMAKE' then s.measureunitid else null end) as IMAKE_UNITID,\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE, \nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE, \nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\nmax(case when s.assetattrid = 'LPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as LPRESS_VALUE, \nmax(case when s.assetattrid = 'LPRESS' then s.measureunitid else null end) as LPRESS_UNITID,\nmax(case when s.assetattrid = 'MEDIUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MEDIUM_VALUE, \nmax(case when s.assetattrid = 'MEDIUM' then s.measureunitid else null end) as MEDIUM_UNITID,\nmax(case when s.assetattrid = 'MIN_TEMP' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_TEMP_VALUE, \nmax(case when s.assetattrid = 'MIN_TEMP' then s.measureunitid else null end) as MIN_TEMP_UNITID,\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\nmax(case when s.assetattrid = 'OILTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as OILTYPE_VALUE, \nmax(case when s.assetattrid = 'OILTYPE' then s.measureunitid else null end) as OILTYPE_UNITID,\nmax(case when s.assetattrid = 'OIL_AM' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AM_VALUE, \nmax(case when s.assetattrid = 'OIL_AM' then s.measureunitid else null end) as OIL_AM_UNITID,\nmax(case when s.assetattrid = 'OLPRESS1' then coalesce(s.numvalue,s.alnvalue) else null end) as OLPRESS1_VALUE, \nmax(case when s.assetattrid = 'OLPRESS1' then s.measureunitid else null end) as OLPRESS1_UNITID,\nmax(case when s.assetattrid = 'OLPRESS2' then coalesce(s.numvalue,s.alnvalue) else null end) as OLPRESS2_VALUE, \nmax(case when s.assetattrid = 'OLPRESS2' then s.measureunitid else null end) as OLPRESS2_UNITID,\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE, \nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\nmax(case when s.assetattrid = 'OPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPRESS_VALUE, \nmax(case when s.assetattrid = 'OPRESS' then s.measureunitid else null end) as OPRESS_UNITID,\nmax(case when s.assetattrid = 'PRES_NOTATION' then coalesce(s.numvalue,s.alnvalue) else null end) as PRES_NOTATION_VALUE, \nmax(case when s.assetattrid = 'PRES_NOTATION' then s.measureunitid else null end) as PRES_NOTATION_UNITID,\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\nmax(case when s.assetattrid = 'SORT_U' then coalesce(s.numvalue,s.alnvalue) else null end) as SORT_U_VALUE, \nmax(case when s.assetattrid = 'SORT_U' then s.measureunitid else null end) as SORT_U_UNITID,\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\nmax(case when s.assetattrid = 'SVALVE' then coalesce(s.numvalue,s.alnvalue) else null end) as SVALVE_VALUE, \nmax(case when s.assetattrid = 'SVALVE' then s.measureunitid else null end) as SVALVE_UNITID,\nmax(case when s.assetattrid = 'SW_ANGLE' then coalesce(s.numvalue,s.alnvalue) else null end) as SW_ANGLE_VALUE, \nmax(case when s.assetattrid = 'SW_ANGLE' then s.measureunitid else null end) as SW_ANGLE_UNITID,\nmax(case when s.assetattrid = 'TMPCLSS' then coalesce(s.numvalue,s.alnvalue) else null end) as TMPCLSS_VALUE, \nmax(case when s.assetattrid = 'TMPCLSS' then s.measureunitid else null end) as TMPCLSS_UNITID,\nmax(case when s.assetattrid = 'TPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as TPRESS_VALUE, \nmax(case when s.assetattrid = 'TPRESS' then s.measureunitid else null end) as TPRESS_UNITID,\nmax(case when s.assetattrid = 'UCONTROL' then coalesce(s.numvalue,s.alnvalue) else null end) as UCONTROL_VALUE, \nmax(case when s.assetattrid = 'UCONTROL' then s.measureunitid else null end) as UCONTROL_UNITID,\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE, \nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\nmax(case when s.assetattrid = 'UPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as UPRESS_VALUE, \nmax(case when s.assetattrid = 'UPRESS' then s.measureunitid else null end) as UPRESS_UNITID,\nmax(case when s.assetattrid = 'VPOLE' then coalesce(s.numvalue,s.alnvalue) else null end) as VPOLE_VALUE, \nmax(case when s.assetattrid = 'VPOLE' then s.measureunitid else null end) as VPOLE_UNITID,\nmax(case when s.assetattrid = 'VTOT' then coalesce(s.numvalue,s.alnvalue) else null end) as VTOT_VALUE, \nmax(case when s.assetattrid = 'VTOT' then s.measureunitid else null end) as VTOT_UNITID,\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE, \nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere exists (select 1 from `clean_test`.`maximo`.`classstructure` cs \n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'KAT' /*'Katkaisijat'*/ )\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_laitepaikka_muuntaja": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_laitepaikka_muuntaja", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_laitepaikka_muuntaja.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_laitepaikka_muuntaja.sql", "unique_id": "model.Fingrid.d_laitepaikka_muuntaja", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_laitepaikka_muuntaja"], "alias": "d_laitepaikka_muuntaja", "checksum": {"name": "sha256", "checksum": "65fe366c35ff0a4f160b99c4817bd3d40d051bc272a542f803d351f71ddcff48"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"substation": {"name": "substation", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substation_name": {"name": "substation_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hierarchy_level": {"name": "hierarchy_level", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "glaccount": {"name": "glaccount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea": {"name": "cusworkarea", "description": "Foreign key to d_tyoalueet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusvoltage": {"name": "cusvoltage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusbusinessid": {"name": "cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custoplocation": {"name": "custoplocation", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusowner": {"name": "cusowner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructureid": {"name": "classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cushierarchypath": {"name": "cushierarchypath", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructure_description": {"name": "classstructure_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_luokka": {"name": "laitepaikkaryhma_luokka", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma": {"name": "laitepaikkaryhma", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_description": {"name": "laitepaikkaryhma_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_classstructureid": {"name": "laitepaikkaryhma_classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma": {"name": "laitepaikka_aliryhma", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma_description": {"name": "laitepaikka_aliryhma_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma_classstructureid": {"name": "laitepaikka_aliryhma_classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_location": {"name": "level1_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_cusbusinessid": {"name": "level1_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_name": {"name": "level1_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_location": {"name": "level2_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_cusbusinessid": {"name": "level2_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_name": {"name": "level2_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_location": {"name": "level3_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_cusbusinessid": {"name": "level3_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_name": {"name": "level3_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_location": {"name": "level4_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_cusbusinessid": {"name": "level4_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_name": {"name": "level4_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_location": {"name": "level5_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_cusbusinessid": {"name": "level5_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_name": {"name": "level5_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_location": {"name": "level6_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_cusbusinessid": {"name": "level6_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_name": {"name": "level6_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_location": {"name": "level7_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_cusbusinessid": {"name": "level7_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_name": {"name": "level7_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_location": {"name": "level8_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_cusbusinessid": {"name": "level8_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_name": {"name": "level8_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_location": {"name": "level9_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_cusbusinessid": {"name": "level9_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_name": {"name": "level9_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_location": {"name": "level10_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_cusbusinessid": {"name": "level10_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_name": {"name": "level10_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_location": {"name": "level11_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_cusbusinessid": {"name": "level11_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_name": {"name": "level11_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_location": {"name": "level12_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_cusbusinessid": {"name": "level12_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_name": {"name": "level12_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_location": {"name": "level13_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_cusbusinessid": {"name": "level13_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_name": {"name": "level13_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_location": {"name": "level14_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_cusbusinessid": {"name": "level14_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_name": {"name": "level14_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_location": {"name": "level15_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_cusbusinessid": {"name": "level15_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_name": {"name": "level15_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.5553036, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_laitepaikka_muuntaja`", "raw_code": "with transformers as (\r\n    select l.location\r\n         , case\r\n            WHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'VIR' THEN 'Virtamuuntajat'\r\n\t\t    WHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'J\u00c4N' THEN 'J\u00e4nnitemuuntajat'\r\n\t\t    WHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'MUU' THEN 'Muuntajat'\r\n\t      end as laiteryhma\r\n    from {{ source('maximo', 'locations') }} l\r\n    join {{ source('maximo', 'classstructure') }} cs on l.CLASSSTRUCTUREID = cs.CLASSSTRUCTUREID\r\n    where SUBSTRING(cs.cushierarchypath, 0, 4)  in ('VIR', 'J\u00c4N', 'MUU')    /* ehto otettu esimerkkikyselyst\u00e4 E_KUHA_SA_LAITTEIDEN_MAARA_IKA_JA_VIAT_KUMULATIIVINEN_R.sql -> tarkistettava!*/\r\n)\r\nselect l.*\r\nfrom {{ ref('d_sa_laitepaikka') }} l \r\njoin transformers t on t.location = l.location", "language": "sql", "refs": [["d_sa_laitepaikka"]], "sources": [["maximo", "locations"], ["maximo", "classstructure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.locations", "source.Fingrid.maximo.classstructure", "model.Fingrid.d_sa_laitepaikka"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_laitepaikka_muuntaja.sql", "compiled": true, "compiled_code": "with transformers as (\n    select l.location\n         , case\n            WHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'VIR' THEN 'Virtamuuntajat'\n\t\t    WHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'J\u00c4N' THEN 'J\u00e4nnitemuuntajat'\n\t\t    WHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'MUU' THEN 'Muuntajat'\n\t      end as laiteryhma\n    from `clean_test`.`maximo`.`locations` l\n    join `clean_test`.`maximo`.`classstructure` cs on l.CLASSSTRUCTUREID = cs.CLASSSTRUCTUREID\n    where SUBSTRING(cs.cushierarchypath, 0, 4)  in ('VIR', 'J\u00c4N', 'MUU')    /* ehto otettu esimerkkikyselyst\u00e4 E_KUHA_SA_LAITTEIDEN_MAARA_IKA_JA_VIAT_KUMULATIIVINEN_R.sql -> tarkistettava!*/\n)\nselect l.*\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_laitepaikka` l \njoin transformers t on t.location = l.location", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_laitepaikka_primaarilaite": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_laitepaikka_primaarilaite", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_laitepaikka_primaarilaite.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_laitepaikka_primaarilaite.sql", "unique_id": "model.Fingrid.d_laitepaikka_primaarilaite", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_laitepaikka_primaarilaite"], "alias": "d_laitepaikka_primaarilaite", "checksum": {"name": "sha256", "checksum": "a93d5525039bf0ef4506d8be7daa686bf3d2cbc7887e794a8e5a7b214808a6b3"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Prim\u00e4\u00e4rilaitteen laitepaikka.", "columns": {"location": {"name": "location", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "glaccount": {"name": "glaccount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea": {"name": "cusworkarea", "description": "Foreign key to d_tyoalueet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusvoltage": {"name": "cusvoltage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusbusinessid": {"name": "cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custoplocation": {"name": "custoplocation", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusowner": {"name": "cusowner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructureid": {"name": "classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cushierarchypath": {"name": "cushierarchypath", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructure_description": {"name": "classstructure_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_luokka": {"name": "laitepaikkaryhma_luokka", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma": {"name": "laitepaikkaryhma", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_description": {"name": "laitepaikkaryhma_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_classstructureid": {"name": "laitepaikkaryhma_classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma": {"name": "laitepaikka_aliryhma", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma_description": {"name": "laitepaikka_aliryhma_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma_classstructureid": {"name": "laitepaikka_aliryhma_classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_location": {"name": "level1_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_cusbusinessid": {"name": "level1_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_name": {"name": "level1_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_location": {"name": "level2_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_cusbusinessid": {"name": "level2_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_name": {"name": "level2_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_location": {"name": "level3_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_cusbusinessid": {"name": "level3_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_name": {"name": "level3_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_location": {"name": "level4_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_cusbusinessid": {"name": "level4_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_name": {"name": "level4_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_location": {"name": "level5_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_cusbusinessid": {"name": "level5_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_name": {"name": "level5_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_location": {"name": "level6_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_cusbusinessid": {"name": "level6_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_name": {"name": "level6_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_location": {"name": "level7_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_cusbusinessid": {"name": "level7_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_name": {"name": "level7_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_location": {"name": "level8_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_cusbusinessid": {"name": "level8_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_name": {"name": "level8_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_location": {"name": "level9_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_cusbusinessid": {"name": "level9_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_name": {"name": "level9_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_location": {"name": "level10_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_cusbusinessid": {"name": "level10_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_name": {"name": "level10_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_location": {"name": "level11_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_cusbusinessid": {"name": "level11_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_name": {"name": "level11_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_location": {"name": "level12_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_cusbusinessid": {"name": "level12_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_name": {"name": "level12_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_location": {"name": "level13_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_cusbusinessid": {"name": "level13_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_name": {"name": "level13_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_location": {"name": "level14_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_cusbusinessid": {"name": "level14_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_name": {"name": "level14_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_location": {"name": "level15_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_cusbusinessid": {"name": "level15_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_name": {"name": "level15_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.5393043, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_laitepaikka_primaarilaite`", "raw_code": "with primary_assets as (\r\n    select l.location\r\n    from {{ source('maximo', 'locations') }} l\r\n    left join {{ source('maximo', 'classstructure') }} cs on l.CLASSSTRUCTUREID = cs.CLASSSTRUCTUREID\r\n    where cs.CUSHIERARCHYPATH in ('LAITE \\\\ KAT', 'LAITE \\\\ ERO', 'LAITE \\\\ MAA', 'LAITE \\\\ MUU', 'LAITE \\\\ VIR', 'LAITE \\\\ J\u00c4N',\r\n        'LAITE \\\\ YJS', 'LAITE \\\\ KAP','LAITE \\\\ KAA', 'LAITE \\\\ KIS', 'LAITE \\\\ RIN', 'LAITE \\\\ SAK',\r\n        'LAITE \\\\ RES', 'LAITE \\\\ KOC', 'LAITE \\\\ SUC', 'LAITE \\\\ TMK', 'LAITE \\\\ SVA', 'LAITE \\\\ SUD',\r\n        'LAITE \\\\ SUD \\\\ HFF', 'LAITE \\\\ TVT', 'LAITE \\\\ KOP')\r\n    and l.CUSVOLTAGE != '0,4'   /* ehto otettu kyselyst\u00e4 kysely_sahkoasemat_ja_laitteet.sql -> validoitava! */\r\n)\r\nselect l.*\r\nfrom {{ ref('d_sa_laitepaikka') }} l \r\njoin primary_assets p on p.location = l.location", "language": "sql", "refs": [["d_sa_laitepaikka"]], "sources": [["maximo", "locations"], ["maximo", "classstructure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.locations", "source.Fingrid.maximo.classstructure", "model.Fingrid.d_sa_laitepaikka"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_laitepaikka_primaarilaite.sql", "compiled": true, "compiled_code": "with primary_assets as (\n    select l.location\n    from `clean_test`.`maximo`.`locations` l\n    left join `clean_test`.`maximo`.`classstructure` cs on l.CLASSSTRUCTUREID = cs.CLASSSTRUCTUREID\n    where cs.CUSHIERARCHYPATH in ('LAITE \\\\ KAT', 'LAITE \\\\ ERO', 'LAITE \\\\ MAA', 'LAITE \\\\ MUU', 'LAITE \\\\ VIR', 'LAITE \\\\ J\u00c4N',\n        'LAITE \\\\ YJS', 'LAITE \\\\ KAP','LAITE \\\\ KAA', 'LAITE \\\\ KIS', 'LAITE \\\\ RIN', 'LAITE \\\\ SAK',\n        'LAITE \\\\ RES', 'LAITE \\\\ KOC', 'LAITE \\\\ SUC', 'LAITE \\\\ TMK', 'LAITE \\\\ SVA', 'LAITE \\\\ SUD',\n        'LAITE \\\\ SUD \\\\ HFF', 'LAITE \\\\ TVT', 'LAITE \\\\ KOP')\n    and l.CUSVOLTAGE != '0,4'   /* ehto otettu kyselyst\u00e4 kysely_sahkoasemat_ja_laitteet.sql -> validoitava! */\n)\nselect l.*\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_laitepaikka` l \njoin primary_assets p on p.location = l.location", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_maadoituskytkin": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_maadoituskytkin", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_maadoituskytkin.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_maadoituskytkin.sql", "unique_id": "model.Fingrid.d_maadoituskytkin", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_maadoituskytkin"], "alias": "d_maadoituskytkin", "checksum": {"name": "sha256", "checksum": "fa1ddc2155530850851995be6c3c5862b3eba44fdd7504740ebbc2d9c4197291"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien laitteet - Maadoituskytkimet.", "columns": {"ASSETNUM": {"name": "ASSETNUM", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEMNUM": {"name": "ITEMNUM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.5773044, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_maadoituskytkin`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\n\r\nselect\r\nA.ASSETNUM,\r\nA.ITEMNUM,\r\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE,\r\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\r\nmax(case when s.assetattrid = 'DCOND' then coalesce(s.numvalue,s.alnvalue) else null end) as DCOND_VALUE,\r\nmax(case when s.assetattrid = 'DCOND' then s.measureunitid else null end) as DCOND_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE,\r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE,\r\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE,\r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE,\r\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\r\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE,\r\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\r\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE,\r\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\r\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE,\r\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere exists (select 1 from {{ source('maximo', 'classstructure') }} cs \r\n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\r\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'MAA' /*'Maadoituskytkimet'*/ )\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "classstructure"], ["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_maadoituskytkin.sql", "compiled": true, "compiled_code": "\n\nselect\nA.ASSETNUM,\nA.ITEMNUM,\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE,\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\nmax(case when s.assetattrid = 'DCOND' then coalesce(s.numvalue,s.alnvalue) else null end) as DCOND_VALUE,\nmax(case when s.assetattrid = 'DCOND' then s.measureunitid else null end) as DCOND_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE,\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE,\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE,\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE,\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE,\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE,\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE,\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere exists (select 1 from `clean_test`.`maximo`.`classstructure` cs \n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'MAA' /*'Maadoituskytkimet'*/ )\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_muuntaja": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_muuntaja", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_muuntaja.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_muuntaja.sql", "unique_id": "model.Fingrid.d_muuntaja", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_muuntaja"], "alias": "d_muuntaja", "checksum": {"name": "sha256", "checksum": "872359829ddb346725af749b2932cfd5e45f3ed75cb2052da81ed79c8a36b754"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien laitteet - Muuntajat.", "columns": {"ASSETNUM": {"name": "ASSETNUM", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEMNUM": {"name": "ITEMNUM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.5783038, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_muuntaja`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\nselect\r\nA.ASSETNUM,\r\nA.ITEMNUM,\r\nmax(case when s.assetattrid = 'ACWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as ACWEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'ACWEIGHT' then s.measureunitid else null end) as ACWEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'ALARM' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_VALUE, \r\nmax(case when s.assetattrid = 'ALARM' then s.measureunitid else null end) as ALARM_UNITID,\r\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMMANUFACTOR_VALUE, \r\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then s.measureunitid else null end) as ALARMMANUFACTOR_UNITID,\r\nmax(case when s.assetattrid = 'ALARMTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMTYPE_VALUE, \r\nmax(case when s.assetattrid = 'ALARMTYPE' then s.measureunitid else null end) as ALARMTYPE_UNITID,\r\nmax(case when s.assetattrid = 'ALARM_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_PR_VALUE, \r\nmax(case when s.assetattrid = 'ALARM_PR' then s.measureunitid else null end) as ALARM_PR_UNITID,\r\nmax(case when s.assetattrid = 'AMOFOIL' then coalesce(s.numvalue,s.alnvalue) else null end) as AMOFOIL_VALUE, \r\nmax(case when s.assetattrid = 'AMOFOIL' then s.measureunitid else null end) as AMOFOIL_UNITID,\r\nmax(case when s.assetattrid = 'ANADIGI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANADIGI_VALUE, \r\nmax(case when s.assetattrid = 'ANADIGI' then s.measureunitid else null end) as ANADIGI_UNITID,\r\nmax(case when s.assetattrid = 'ANTURI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANTURI_VALUE, \r\nmax(case when s.assetattrid = 'ANTURI' then s.measureunitid else null end) as ANTURI_UNITID,\r\nmax(case when s.assetattrid = 'APPSTD' then coalesce(s.numvalue,s.alnvalue) else null end) as APPSTD_VALUE, \r\nmax(case when s.assetattrid = 'APPSTD' then s.measureunitid else null end) as APPSTD_UNITID,\r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\r\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \r\nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\r\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \r\nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\r\nmax(case when s.assetattrid = 'CAPACI' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACI_VALUE, \r\nmax(case when s.assetattrid = 'CAPACI' then s.measureunitid else null end) as CAPACI_UNITID,\r\nmax(case when s.assetattrid = 'CASINGC' then coalesce(s.numvalue,s.alnvalue) else null end) as CASINGC_VALUE, \r\nmax(case when s.assetattrid = 'CASINGC' then s.measureunitid else null end) as CASINGC_UNITID,\r\nmax(case when s.assetattrid = 'COOLING' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLING_VALUE, \r\nmax(case when s.assetattrid = 'COOLING' then s.measureunitid else null end) as COOLING_UNITID,\r\nmax(case when s.assetattrid = 'COOLW1' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLW1_VALUE, \r\nmax(case when s.assetattrid = 'COOLW1' then s.measureunitid else null end) as COOLW1_UNITID,\r\nmax(case when s.assetattrid = 'COOLW2' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLW2_VALUE, \r\nmax(case when s.assetattrid = 'COOLW2' then s.measureunitid else null end) as COOLW2_UNITID,\r\nmax(case when s.assetattrid = 'CURDEN' then coalesce(s.numvalue,s.alnvalue) else null end) as CURDEN_VALUE, \r\nmax(case when s.assetattrid = 'CURDEN' then s.measureunitid else null end) as CURDEN_UNITID,\r\nmax(case when s.assetattrid = 'CWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as CWEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'CWEIGHT' then s.measureunitid else null end) as CWEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'DBDS' then coalesce(s.numvalue,s.alnvalue) else null end) as DBDS_VALUE, \r\nmax(case when s.assetattrid = 'DBDS' then s.measureunitid else null end) as DBDS_UNITID,\r\nmax(case when s.assetattrid = 'DESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as DESCR_VALUE, \r\nmax(case when s.assetattrid = 'DESCR' then s.measureunitid else null end) as DESCR_UNITID,\r\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \r\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\r\nmax(case when s.assetattrid = 'DGENM' then coalesce(s.numvalue,s.alnvalue) else null end) as DGENM_VALUE, \r\nmax(case when s.assetattrid = 'DGENM' then s.measureunitid else null end) as DGENM_UNITID,\r\nmax(case when s.assetattrid = 'DGENP' then coalesce(s.numvalue,s.alnvalue) else null end) as DGENP_VALUE, \r\nmax(case when s.assetattrid = 'DGENP' then s.measureunitid else null end) as DGENP_UNITID,\r\nmax(case when s.assetattrid = 'DIAM_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as DIAM_NOM_VALUE, \r\nmax(case when s.assetattrid = 'DIAM_NOM' then s.measureunitid else null end) as DIAM_NOM_UNITID,\r\nmax(case when s.assetattrid = 'EX TILASSA' then coalesce(s.numvalue,s.alnvalue) else null end) as EX_TILASSA_VALUE, \r\nmax(case when s.assetattrid = 'EX TILASSA' then s.measureunitid else null end) as EX_TILASSA_UNITID,\r\nmax(case when s.assetattrid = 'FAULTTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as FAULTTYPE_VALUE, \r\nmax(case when s.assetattrid = 'FAULTTYPE' then s.measureunitid else null end) as FAULTTYPE_UNITID,\r\nmax(case when s.assetattrid = 'FILT_CAP' then coalesce(s.numvalue,s.alnvalue) else null end) as FILT_CAP_VALUE, \r\nmax(case when s.assetattrid = 'FILT_CAP' then s.measureunitid else null end) as FILT_CAP_UNITID,\r\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \r\nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\r\nmax(case when s.assetattrid = 'FLTBLMAT' then coalesce(s.numvalue,s.alnvalue) else null end) as FLTBLMAT_VALUE, \r\nmax(case when s.assetattrid = 'FLTBLMAT' then s.measureunitid else null end) as FLTBLMAT_UNITID,\r\nmax(case when s.assetattrid = 'FWVERSION' then coalesce(s.numvalue,s.alnvalue) else null end) as FWVERSION_VALUE, \r\nmax(case when s.assetattrid = 'FWVERSION' then s.measureunitid else null end) as FWVERSION_UNITID,\r\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \r\nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\r\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \r\nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\r\nmax(case when s.assetattrid = 'HKERROIN' then coalesce(s.numvalue,s.alnvalue) else null end) as HKERROIN_VALUE, \r\nmax(case when s.assetattrid = 'HKERROIN' then s.measureunitid else null end) as HKERROIN_UNITID,\r\nmax(case when s.assetattrid = 'HVLVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as HVLVSNOM_VALUE, \r\nmax(case when s.assetattrid = 'HVLVSNOM' then s.measureunitid else null end) as HVLVSNOM_UNITID,\r\nmax(case when s.assetattrid = 'HVMVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as HVMVSNOM_VALUE, \r\nmax(case when s.assetattrid = 'HVMVSNOM' then s.measureunitid else null end) as HVMVSNOM_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'IM_AGENT' then coalesce(s.numvalue,s.alnvalue) else null end) as IM_AGENT_VALUE, \r\nmax(case when s.assetattrid = 'IM_AGENT' then s.measureunitid else null end) as IM_AGENT_UNITID,\r\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE, \r\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\r\nmax(case when s.assetattrid = 'INSLEVEL' then coalesce(s.numvalue,s.alnvalue) else null end) as INSLEVEL_VALUE, \r\nmax(case when s.assetattrid = 'INSLEVEL' then s.measureunitid else null end) as INSLEVEL_UNITID,\r\nmax(case when s.assetattrid = 'INTERM' then coalesce(s.numvalue,s.alnvalue) else null end) as INTERM_VALUE, \r\nmax(case when s.assetattrid = 'INTERM' then s.measureunitid else null end) as INTERM_UNITID,\r\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \r\nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'JOINT' then coalesce(s.numvalue,s.alnvalue) else null end) as JOINT_VALUE, \r\nmax(case when s.assetattrid = 'JOINT' then s.measureunitid else null end) as JOINT_UNITID,\r\nmax(case when s.assetattrid = 'K11' then coalesce(s.numvalue,s.alnvalue) else null end) as K11_VALUE, \r\nmax(case when s.assetattrid = 'K11' then s.measureunitid else null end) as K11_UNITID,\r\nmax(case when s.assetattrid = 'K21' then coalesce(s.numvalue,s.alnvalue) else null end) as K21_VALUE, \r\nmax(case when s.assetattrid = 'K21' then s.measureunitid else null end) as K21_UNITID,\r\nmax(case when s.assetattrid = 'K22' then coalesce(s.numvalue,s.alnvalue) else null end) as K22_VALUE, \r\nmax(case when s.assetattrid = 'K22' then s.measureunitid else null end) as K22_UNITID,\r\nmax(case when s.assetattrid = 'KOALISAATTORI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOALISAATTORI_VALUE, \r\nmax(case when s.assetattrid = 'KOALISAATTORI' then s.measureunitid else null end) as KOALISAATTORI_UNITID,\r\nmax(case when s.assetattrid = 'KOMMENTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOMMENTTI_VALUE, \r\nmax(case when s.assetattrid = 'KOMMENTTI' then s.measureunitid else null end) as KOMMENTTI_UNITID,\r\nmax(case when s.assetattrid = 'LENGTH' then coalesce(s.numvalue,s.alnvalue) else null end) as LENGTH_VALUE, \r\nmax(case when s.assetattrid = 'LENGTH' then s.measureunitid else null end) as LENGTH_UNITID,\r\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \r\nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\r\nmax(case when s.assetattrid = 'MAALIITIN' then coalesce(s.numvalue,s.alnvalue) else null end) as MAALIITIN_VALUE, \r\nmax(case when s.assetattrid = 'MAALIITIN' then s.measureunitid else null end) as MAALIITIN_UNITID,\r\nmax(case when s.assetattrid = 'MACADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as MACADDR_VALUE, \r\nmax(case when s.assetattrid = 'MACADDR' then s.measureunitid else null end) as MACADDR_UNITID,\r\nmax(case when s.assetattrid = 'MATER' then coalesce(s.numvalue,s.alnvalue) else null end) as MATER_VALUE, \r\nmax(case when s.assetattrid = 'MATER' then s.measureunitid else null end) as MATER_UNITID,\r\nmax(case when s.assetattrid = 'MATERIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as MATERIAL_VALUE, \r\nmax(case when s.assetattrid = 'MATERIAL' then s.measureunitid else null end) as MATERIAL_UNITID,\r\nmax(case when s.assetattrid = 'MAXFLOW' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxFLOW_VALUE, \r\nmax(case when s.assetattrid = 'MAXFLOW' then s.measureunitid else null end) asmaxFLOW_UNITID,\r\nmax(case when s.assetattrid = 'MAXOPPR' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxOPPR_VALUE, \r\nmax(case when s.assetattrid = 'MAXOPPR' then s.measureunitid else null end) asmaxOPPR_UNITID,\r\nmax(case when s.assetattrid = 'MAX_PR' then coalesce(s.numvalue,s.alnvalue) else null end) asmax_PR_VALUE, \r\nmax(case when s.assetattrid = 'MAX_PR' then s.measureunitid else null end) asmax_PR_UNITID,\r\nmax(case when s.assetattrid = 'MEDDESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as MEDDESCR_VALUE, \r\nmax(case when s.assetattrid = 'MEDDESCR' then s.measureunitid else null end) as MEDDESCR_UNITID,\r\nmax(case when s.assetattrid = 'MEKKUORM' then coalesce(s.numvalue,s.alnvalue) else null end) as MEKKUORM_VALUE, \r\nmax(case when s.assetattrid = 'MEKKUORM' then s.measureunitid else null end) as MEKKUORM_UNITID,\r\nmax(case when s.assetattrid = 'MIN_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_PR_VALUE, \r\nmax(case when s.assetattrid = 'MIN_PR' then s.measureunitid else null end) as MIN_PR_UNITID,\r\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \r\nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\r\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \r\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\r\nmax(case when s.assetattrid = 'MVLVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as MVLVSNOM_VALUE, \r\nmax(case when s.assetattrid = 'MVLVSNOM' then s.measureunitid else null end) as MVLVSNOM_UNITID,\r\nmax(case when s.assetattrid = 'NBOFCORELIMBS' then coalesce(s.numvalue,s.alnvalue) else null end) as NBOFCORELIMBS_VALUE, \r\nmax(case when s.assetattrid = 'NBOFCORELIMBS' then s.measureunitid else null end) as NBOFCORELIMBS_UNITID,\r\nmax(case when s.assetattrid = 'OILDESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as OILDESCR_VALUE, \r\nmax(case when s.assetattrid = 'OILDESCR' then s.measureunitid else null end) as OILDESCR_UNITID,\r\nmax(case when s.assetattrid = 'OILMAX' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMAX_VALUE, \r\nmax(case when s.assetattrid = 'OILMAX' then s.measureunitid else null end) as OILMAX_UNITID,\r\nmax(case when s.assetattrid = 'OIL_AM' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AM_VALUE, \r\nmax(case when s.assetattrid = 'OIL_AM' then s.measureunitid else null end) as OIL_AM_UNITID,\r\nmax(case when s.assetattrid = 'OIL_AVE' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AVE_VALUE, \r\nmax(case when s.assetattrid = 'OIL_AVE' then s.measureunitid else null end) as OIL_AVE_UNITID,\r\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE, \r\nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\r\nmax(case when s.assetattrid = 'OPEN_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as OPEN_PR_VALUE, \r\nmax(case when s.assetattrid = 'OPEN_PR' then s.measureunitid else null end) as OPEN_PR_UNITID,\r\nmax(case when s.assetattrid = 'OPER' then coalesce(s.numvalue,s.alnvalue) else null end) as OPER_VALUE, \r\nmax(case when s.assetattrid = 'OPER' then s.measureunitid else null end) as OPER_UNITID,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \r\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\r\nmax(case when s.assetattrid = 'OUTPUT' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTPUT_VALUE, \r\nmax(case when s.assetattrid = 'OUTPUT' then s.measureunitid else null end) as OUTPUT_UNITID,\r\nmax(case when s.assetattrid = 'P0' then coalesce(s.numvalue,s.alnvalue) else null end) as P0_VALUE, \r\nmax(case when s.assetattrid = 'P0' then s.measureunitid else null end) as P0_UNITID,\r\nmax(case when s.assetattrid = 'PIPE' then coalesce(s.numvalue,s.alnvalue) else null end) as PIPE_VALUE, \r\nmax(case when s.assetattrid = 'PIPE' then s.measureunitid else null end) as PIPE_UNITID,\r\nmax(case when s.assetattrid = 'PJ' then coalesce(s.numvalue,s.alnvalue) else null end) as PJ_VALUE, \r\nmax(case when s.assetattrid = 'PJ' then s.measureunitid else null end) as PJ_UNITID,\r\nmax(case when s.assetattrid = 'PK' then coalesce(s.numvalue,s.alnvalue) else null end) as PK_VALUE, \r\nmax(case when s.assetattrid = 'PK' then s.measureunitid else null end) as PK_UNITID,\r\nmax(case when s.assetattrid = 'POS1' then coalesce(s.numvalue,s.alnvalue) else null end) as POS1_VALUE, \r\nmax(case when s.assetattrid = 'POS1' then s.measureunitid else null end) as POS1_UNITID,\r\nmax(case when s.assetattrid = 'POS2' then coalesce(s.numvalue,s.alnvalue) else null end) as POS2_VALUE, \r\nmax(case when s.assetattrid = 'POS2' then s.measureunitid else null end) as POS2_UNITID,\r\nmax(case when s.assetattrid = 'POS3' then coalesce(s.numvalue,s.alnvalue) else null end) as POS3_VALUE, \r\nmax(case when s.assetattrid = 'POS3' then s.measureunitid else null end) as POS3_UNITID,\r\nmax(case when s.assetattrid = 'PRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as PRESS_VALUE, \r\nmax(case when s.assetattrid = 'PRESS' then s.measureunitid else null end) as PRESS_UNITID,\r\nmax(case when s.assetattrid = 'PRNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as PRNOM_VALUE, \r\nmax(case when s.assetattrid = 'PRNOM' then s.measureunitid else null end) as PRNOM_UNITID,\r\nmax(case when s.assetattrid = 'PROSCSUBS' then coalesce(s.numvalue,s.alnvalue) else null end) as PROSCSUBS_VALUE, \r\nmax(case when s.assetattrid = 'PROSCSUBS' then s.measureunitid else null end) as PROSCSUBS_UNITID,\r\nmax(case when s.assetattrid = 'PR_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as PR_NOM_VALUE, \r\nmax(case when s.assetattrid = 'PR_NOM' then s.measureunitid else null end) as PR_NOM_UNITID,\r\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \r\nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\r\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \r\nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\r\nmax(case when s.assetattrid = 'RK' then coalesce(s.numvalue,s.alnvalue) else null end) as RK_VALUE, \r\nmax(case when s.assetattrid = 'RK' then s.measureunitid else null end) as RK_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV1_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_LV1' then s.measureunitid else null end) as RKHV_LV1_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV2_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_LV2' then s.measureunitid else null end) as RKHV_LV2_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV3_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_LV3' then s.measureunitid else null end) as RKHV_LV3_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_MV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV1_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_MV1' then s.measureunitid else null end) as RKHV_MV1_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_MV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV2_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_MV2' then s.measureunitid else null end) as RKHV_MV2_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_MV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV3_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_MV3' then s.measureunitid else null end) as RKHV_MV3_UNITID,\r\nmax(case when s.assetattrid = 'RKMV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV1_VALUE, \r\nmax(case when s.assetattrid = 'RKMV_LV1' then s.measureunitid else null end) as RKMV_LV1_UNITID,\r\nmax(case when s.assetattrid = 'RKMV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV2_VALUE, \r\nmax(case when s.assetattrid = 'RKMV_LV2' then s.measureunitid else null end) as RKMV_LV2_UNITID,\r\nmax(case when s.assetattrid = 'RKMV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV3_VALUE, \r\nmax(case when s.assetattrid = 'RKMV_LV3' then s.measureunitid else null end) as RKMV_LV3_UNITID,\r\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \r\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\r\nmax(case when s.assetattrid = 'S0' then coalesce(s.numvalue,s.alnvalue) else null end) as S0_VALUE, \r\nmax(case when s.assetattrid = 'S0' then s.measureunitid else null end) as S0_UNITID,\r\nmax(case when s.assetattrid = 'SCALING' then coalesce(s.numvalue,s.alnvalue) else null end) as SCALING_VALUE, \r\nmax(case when s.assetattrid = 'SCALING' then s.measureunitid else null end) as SCALING_UNITID,\r\nmax(case when s.assetattrid = 'SF6INFPR' then coalesce(s.numvalue,s.alnvalue) else null end) as SF6INFPR_VALUE, \r\nmax(case when s.assetattrid = 'SF6INFPR' then s.measureunitid else null end) as SF6INFPR_UNITID,\r\nmax(case when s.assetattrid = 'SNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as SNOM_VALUE, \r\nmax(case when s.assetattrid = 'SNOM' then s.measureunitid else null end) as SNOM_UNITID,\r\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \r\nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\r\nmax(case when s.assetattrid = 'SULKIJA' then coalesce(s.numvalue,s.alnvalue) else null end) as SULKIJA_VALUE, \r\nmax(case when s.assetattrid = 'SULKIJA' then s.measureunitid else null end) as SULKIJA_UNITID,\r\nmax(case when s.assetattrid = 'SUOJAUSLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as SUOJAUSLUOKKA_VALUE, \r\nmax(case when s.assetattrid = 'SUOJAUSLUOKKA' then s.measureunitid else null end) as SUOJAUSLUOKKA_UNITID,\r\nmax(case when s.assetattrid = 'TEHOLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TEHOLUOKKA_VALUE, \r\nmax(case when s.assetattrid = 'TEHOLUOKKA' then s.measureunitid else null end) as TEHOLUOKKA_UNITID,\r\nmax(case when s.assetattrid = 'TEMP_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as TEMP_NOM_VALUE, \r\nmax(case when s.assetattrid = 'TEMP_NOM' then s.measureunitid else null end) as TEMP_NOM_UNITID,\r\nmax(case when s.assetattrid = 'TERMDESC' then coalesce(s.numvalue,s.alnvalue) else null end) as TERMDESC_VALUE, \r\nmax(case when s.assetattrid = 'TERMDESC' then s.measureunitid else null end) as TERMDESC_UNITID,\r\nmax(case when s.assetattrid = 'TILALUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TILALUOKKA_VALUE, \r\nmax(case when s.assetattrid = 'TILALUOKKA' then s.measureunitid else null end) as TILALUOKKA_UNITID,\r\nmax(case when s.assetattrid = 'TODISTUKSET' then coalesce(s.numvalue,s.alnvalue) else null end) as TODISTUKSET_VALUE, \r\nmax(case when s.assetattrid = 'TODISTUKSET' then s.measureunitid else null end) as TODISTUKSET_UNITID,\r\nmax(case when s.assetattrid = 'TRWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as TRWEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'TRWEIGHT' then s.measureunitid else null end) as TRWEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'TYPEREF' then coalesce(s.numvalue,s.alnvalue) else null end) as TYPEREF_VALUE, \r\nmax(case when s.assetattrid = 'TYPEREF' then s.measureunitid else null end) as TYPEREF_UNITID,\r\nmax(case when s.assetattrid = 'TYPETEST' then coalesce(s.numvalue,s.alnvalue) else null end) as TYPETEST_VALUE, \r\nmax(case when s.assetattrid = 'TYPETEST' then s.measureunitid else null end) as TYPETEST_UNITID,\r\nmax(case when s.assetattrid = 'T_OIL_R' then coalesce(s.numvalue,s.alnvalue) else null end) as T_OIL_R_VALUE, \r\nmax(case when s.assetattrid = 'T_OIL_R' then s.measureunitid else null end) as T_OIL_R_UNITID,\r\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE, \r\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\r\nmax(case when s.assetattrid = 'UNOMHV' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOMHV_VALUE, \r\nmax(case when s.assetattrid = 'UNOMHV' then s.measureunitid else null end) as UNOMHV_UNITID,\r\nmax(case when s.assetattrid = 'UNOMMV' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOMMV_VALUE, \r\nmax(case when s.assetattrid = 'UNOMMV' then s.measureunitid else null end) as UNOMMV_UNITID,\r\nmax(case when s.assetattrid = 'VAIHELIITIN' then coalesce(s.numvalue,s.alnvalue) else null end) as VAIHELIITIN_VALUE, \r\nmax(case when s.assetattrid = 'VAIHELIITIN' then s.measureunitid else null end) as VAIHELIITIN_UNITID,\r\nmax(case when s.assetattrid = 'VECTORG' then coalesce(s.numvalue,s.alnvalue) else null end) as VECTORG_VALUE, \r\nmax(case when s.assetattrid = 'VECTORG' then s.measureunitid else null end) as VECTORG_UNITID,\r\nmax(case when s.assetattrid = 'VOL' then coalesce(s.numvalue,s.alnvalue) else null end) as VOL_VALUE, \r\nmax(case when s.assetattrid = 'VOL' then s.measureunitid else null end) as VOL_UNITID,\r\nmax(case when s.assetattrid = 'VOLT_OUT' then coalesce(s.numvalue,s.alnvalue) else null end) as VOLT_OUT_VALUE, \r\nmax(case when s.assetattrid = 'VOLT_OUT' then s.measureunitid else null end) as VOLT_OUT_UNITID,\r\nmax(case when s.assetattrid = 'VTOTGAS' then coalesce(s.numvalue,s.alnvalue) else null end) as VTOTGAS_VALUE, \r\nmax(case when s.assetattrid = 'VTOTGAS' then s.measureunitid else null end) as VTOTGAS_UNITID,\r\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'W-O_AVE' then coalesce(s.numvalue,s.alnvalue) else null end) as W_O_AVE_VALUE, \r\nmax(case when s.assetattrid = 'W-O_AVE' then s.measureunitid else null end) as W_O_AVE_UNITID,\r\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'X_EXP' then coalesce(s.numvalue,s.alnvalue) else null end) as X_EXP_VALUE, \r\nmax(case when s.assetattrid = 'X_EXP' then s.measureunitid else null end) as X_EXP_UNITID,\r\nmax(case when s.assetattrid = 'Y_EXP' then coalesce(s.numvalue,s.alnvalue) else null end) as Y_EXP_VALUE, \r\nmax(case when s.assetattrid = 'Y_EXP' then s.measureunitid else null end) as Y_EXP_UNITID,\r\nmax(case when s.assetattrid = 'ZK' then coalesce(s.numvalue,s.alnvalue) else null end) as ZK_VALUE, \r\nmax(case when s.assetattrid = 'ZK' then s.measureunitid else null end) as ZK_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV1_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_LV1' then s.measureunitid else null end) as ZKHV_LV1_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV2_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_LV2' then s.measureunitid else null end) as ZKHV_LV2_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV3_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_LV3' then s.measureunitid else null end) as ZKHV_LV3_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_MV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV1_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_MV1' then s.measureunitid else null end) as ZKHV_MV1_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_MV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV2_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_MV2' then s.measureunitid else null end) as ZKHV_MV2_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_MV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV3_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_MV3' then s.measureunitid else null end) as ZKHV_MV3_UNITID,\r\nmax(case when s.assetattrid = 'ZKMV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV1_VALUE, \r\nmax(case when s.assetattrid = 'ZKMV_LV1' then s.measureunitid else null end) as ZKMV_LV1_UNITID,\r\nmax(case when s.assetattrid = 'ZKMV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV2_VALUE, \r\nmax(case when s.assetattrid = 'ZKMV_LV2' then s.measureunitid else null end) as ZKMV_LV2_UNITID,\r\nmax(case when s.assetattrid = 'ZKMV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV3_VALUE, \r\nmax(case when s.assetattrid = 'ZKMV_LV3' then s.measureunitid else null end) as ZKMV_LV3_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere exists (select 1 from {{ source('maximo', 'classstructure') }} cs \r\n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\r\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'MUU' /*'Muuntajat'*/ )\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "classstructure"], ["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_muuntaja.sql", "compiled": true, "compiled_code": "\nselect\nA.ASSETNUM,\nA.ITEMNUM,\nmax(case when s.assetattrid = 'ACWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as ACWEIGHT_VALUE, \nmax(case when s.assetattrid = 'ACWEIGHT' then s.measureunitid else null end) as ACWEIGHT_UNITID,\nmax(case when s.assetattrid = 'ALARM' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_VALUE, \nmax(case when s.assetattrid = 'ALARM' then s.measureunitid else null end) as ALARM_UNITID,\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMMANUFACTOR_VALUE, \nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then s.measureunitid else null end) as ALARMMANUFACTOR_UNITID,\nmax(case when s.assetattrid = 'ALARMTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMTYPE_VALUE, \nmax(case when s.assetattrid = 'ALARMTYPE' then s.measureunitid else null end) as ALARMTYPE_UNITID,\nmax(case when s.assetattrid = 'ALARM_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_PR_VALUE, \nmax(case when s.assetattrid = 'ALARM_PR' then s.measureunitid else null end) as ALARM_PR_UNITID,\nmax(case when s.assetattrid = 'AMOFOIL' then coalesce(s.numvalue,s.alnvalue) else null end) as AMOFOIL_VALUE, \nmax(case when s.assetattrid = 'AMOFOIL' then s.measureunitid else null end) as AMOFOIL_UNITID,\nmax(case when s.assetattrid = 'ANADIGI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANADIGI_VALUE, \nmax(case when s.assetattrid = 'ANADIGI' then s.measureunitid else null end) as ANADIGI_UNITID,\nmax(case when s.assetattrid = 'ANTURI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANTURI_VALUE, \nmax(case when s.assetattrid = 'ANTURI' then s.measureunitid else null end) as ANTURI_UNITID,\nmax(case when s.assetattrid = 'APPSTD' then coalesce(s.numvalue,s.alnvalue) else null end) as APPSTD_VALUE, \nmax(case when s.assetattrid = 'APPSTD' then s.measureunitid else null end) as APPSTD_UNITID,\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\nmax(case when s.assetattrid = 'CAPACI' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACI_VALUE, \nmax(case when s.assetattrid = 'CAPACI' then s.measureunitid else null end) as CAPACI_UNITID,\nmax(case when s.assetattrid = 'CASINGC' then coalesce(s.numvalue,s.alnvalue) else null end) as CASINGC_VALUE, \nmax(case when s.assetattrid = 'CASINGC' then s.measureunitid else null end) as CASINGC_UNITID,\nmax(case when s.assetattrid = 'COOLING' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLING_VALUE, \nmax(case when s.assetattrid = 'COOLING' then s.measureunitid else null end) as COOLING_UNITID,\nmax(case when s.assetattrid = 'COOLW1' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLW1_VALUE, \nmax(case when s.assetattrid = 'COOLW1' then s.measureunitid else null end) as COOLW1_UNITID,\nmax(case when s.assetattrid = 'COOLW2' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLW2_VALUE, \nmax(case when s.assetattrid = 'COOLW2' then s.measureunitid else null end) as COOLW2_UNITID,\nmax(case when s.assetattrid = 'CURDEN' then coalesce(s.numvalue,s.alnvalue) else null end) as CURDEN_VALUE, \nmax(case when s.assetattrid = 'CURDEN' then s.measureunitid else null end) as CURDEN_UNITID,\nmax(case when s.assetattrid = 'CWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as CWEIGHT_VALUE, \nmax(case when s.assetattrid = 'CWEIGHT' then s.measureunitid else null end) as CWEIGHT_UNITID,\nmax(case when s.assetattrid = 'DBDS' then coalesce(s.numvalue,s.alnvalue) else null end) as DBDS_VALUE, \nmax(case when s.assetattrid = 'DBDS' then s.measureunitid else null end) as DBDS_UNITID,\nmax(case when s.assetattrid = 'DESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as DESCR_VALUE, \nmax(case when s.assetattrid = 'DESCR' then s.measureunitid else null end) as DESCR_UNITID,\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\nmax(case when s.assetattrid = 'DGENM' then coalesce(s.numvalue,s.alnvalue) else null end) as DGENM_VALUE, \nmax(case when s.assetattrid = 'DGENM' then s.measureunitid else null end) as DGENM_UNITID,\nmax(case when s.assetattrid = 'DGENP' then coalesce(s.numvalue,s.alnvalue) else null end) as DGENP_VALUE, \nmax(case when s.assetattrid = 'DGENP' then s.measureunitid else null end) as DGENP_UNITID,\nmax(case when s.assetattrid = 'DIAM_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as DIAM_NOM_VALUE, \nmax(case when s.assetattrid = 'DIAM_NOM' then s.measureunitid else null end) as DIAM_NOM_UNITID,\nmax(case when s.assetattrid = 'EX TILASSA' then coalesce(s.numvalue,s.alnvalue) else null end) as EX_TILASSA_VALUE, \nmax(case when s.assetattrid = 'EX TILASSA' then s.measureunitid else null end) as EX_TILASSA_UNITID,\nmax(case when s.assetattrid = 'FAULTTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as FAULTTYPE_VALUE, \nmax(case when s.assetattrid = 'FAULTTYPE' then s.measureunitid else null end) as FAULTTYPE_UNITID,\nmax(case when s.assetattrid = 'FILT_CAP' then coalesce(s.numvalue,s.alnvalue) else null end) as FILT_CAP_VALUE, \nmax(case when s.assetattrid = 'FILT_CAP' then s.measureunitid else null end) as FILT_CAP_UNITID,\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\nmax(case when s.assetattrid = 'FLTBLMAT' then coalesce(s.numvalue,s.alnvalue) else null end) as FLTBLMAT_VALUE, \nmax(case when s.assetattrid = 'FLTBLMAT' then s.measureunitid else null end) as FLTBLMAT_UNITID,\nmax(case when s.assetattrid = 'FWVERSION' then coalesce(s.numvalue,s.alnvalue) else null end) as FWVERSION_VALUE, \nmax(case when s.assetattrid = 'FWVERSION' then s.measureunitid else null end) as FWVERSION_UNITID,\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\nmax(case when s.assetattrid = 'HKERROIN' then coalesce(s.numvalue,s.alnvalue) else null end) as HKERROIN_VALUE, \nmax(case when s.assetattrid = 'HKERROIN' then s.measureunitid else null end) as HKERROIN_UNITID,\nmax(case when s.assetattrid = 'HVLVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as HVLVSNOM_VALUE, \nmax(case when s.assetattrid = 'HVLVSNOM' then s.measureunitid else null end) as HVLVSNOM_UNITID,\nmax(case when s.assetattrid = 'HVMVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as HVMVSNOM_VALUE, \nmax(case when s.assetattrid = 'HVMVSNOM' then s.measureunitid else null end) as HVMVSNOM_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'IM_AGENT' then coalesce(s.numvalue,s.alnvalue) else null end) as IM_AGENT_VALUE, \nmax(case when s.assetattrid = 'IM_AGENT' then s.measureunitid else null end) as IM_AGENT_UNITID,\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE, \nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\nmax(case when s.assetattrid = 'INSLEVEL' then coalesce(s.numvalue,s.alnvalue) else null end) as INSLEVEL_VALUE, \nmax(case when s.assetattrid = 'INSLEVEL' then s.measureunitid else null end) as INSLEVEL_UNITID,\nmax(case when s.assetattrid = 'INTERM' then coalesce(s.numvalue,s.alnvalue) else null end) as INTERM_VALUE, \nmax(case when s.assetattrid = 'INTERM' then s.measureunitid else null end) as INTERM_UNITID,\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'JOINT' then coalesce(s.numvalue,s.alnvalue) else null end) as JOINT_VALUE, \nmax(case when s.assetattrid = 'JOINT' then s.measureunitid else null end) as JOINT_UNITID,\nmax(case when s.assetattrid = 'K11' then coalesce(s.numvalue,s.alnvalue) else null end) as K11_VALUE, \nmax(case when s.assetattrid = 'K11' then s.measureunitid else null end) as K11_UNITID,\nmax(case when s.assetattrid = 'K21' then coalesce(s.numvalue,s.alnvalue) else null end) as K21_VALUE, \nmax(case when s.assetattrid = 'K21' then s.measureunitid else null end) as K21_UNITID,\nmax(case when s.assetattrid = 'K22' then coalesce(s.numvalue,s.alnvalue) else null end) as K22_VALUE, \nmax(case when s.assetattrid = 'K22' then s.measureunitid else null end) as K22_UNITID,\nmax(case when s.assetattrid = 'KOALISAATTORI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOALISAATTORI_VALUE, \nmax(case when s.assetattrid = 'KOALISAATTORI' then s.measureunitid else null end) as KOALISAATTORI_UNITID,\nmax(case when s.assetattrid = 'KOMMENTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOMMENTTI_VALUE, \nmax(case when s.assetattrid = 'KOMMENTTI' then s.measureunitid else null end) as KOMMENTTI_UNITID,\nmax(case when s.assetattrid = 'LENGTH' then coalesce(s.numvalue,s.alnvalue) else null end) as LENGTH_VALUE, \nmax(case when s.assetattrid = 'LENGTH' then s.measureunitid else null end) as LENGTH_UNITID,\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\nmax(case when s.assetattrid = 'MAALIITIN' then coalesce(s.numvalue,s.alnvalue) else null end) as MAALIITIN_VALUE, \nmax(case when s.assetattrid = 'MAALIITIN' then s.measureunitid else null end) as MAALIITIN_UNITID,\nmax(case when s.assetattrid = 'MACADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as MACADDR_VALUE, \nmax(case when s.assetattrid = 'MACADDR' then s.measureunitid else null end) as MACADDR_UNITID,\nmax(case when s.assetattrid = 'MATER' then coalesce(s.numvalue,s.alnvalue) else null end) as MATER_VALUE, \nmax(case when s.assetattrid = 'MATER' then s.measureunitid else null end) as MATER_UNITID,\nmax(case when s.assetattrid = 'MATERIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as MATERIAL_VALUE, \nmax(case when s.assetattrid = 'MATERIAL' then s.measureunitid else null end) as MATERIAL_UNITID,\nmax(case when s.assetattrid = 'MAXFLOW' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxFLOW_VALUE, \nmax(case when s.assetattrid = 'MAXFLOW' then s.measureunitid else null end) asmaxFLOW_UNITID,\nmax(case when s.assetattrid = 'MAXOPPR' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxOPPR_VALUE, \nmax(case when s.assetattrid = 'MAXOPPR' then s.measureunitid else null end) asmaxOPPR_UNITID,\nmax(case when s.assetattrid = 'MAX_PR' then coalesce(s.numvalue,s.alnvalue) else null end) asmax_PR_VALUE, \nmax(case when s.assetattrid = 'MAX_PR' then s.measureunitid else null end) asmax_PR_UNITID,\nmax(case when s.assetattrid = 'MEDDESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as MEDDESCR_VALUE, \nmax(case when s.assetattrid = 'MEDDESCR' then s.measureunitid else null end) as MEDDESCR_UNITID,\nmax(case when s.assetattrid = 'MEKKUORM' then coalesce(s.numvalue,s.alnvalue) else null end) as MEKKUORM_VALUE, \nmax(case when s.assetattrid = 'MEKKUORM' then s.measureunitid else null end) as MEKKUORM_UNITID,\nmax(case when s.assetattrid = 'MIN_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_PR_VALUE, \nmax(case when s.assetattrid = 'MIN_PR' then s.measureunitid else null end) as MIN_PR_UNITID,\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\nmax(case when s.assetattrid = 'MVLVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as MVLVSNOM_VALUE, \nmax(case when s.assetattrid = 'MVLVSNOM' then s.measureunitid else null end) as MVLVSNOM_UNITID,\nmax(case when s.assetattrid = 'NBOFCORELIMBS' then coalesce(s.numvalue,s.alnvalue) else null end) as NBOFCORELIMBS_VALUE, \nmax(case when s.assetattrid = 'NBOFCORELIMBS' then s.measureunitid else null end) as NBOFCORELIMBS_UNITID,\nmax(case when s.assetattrid = 'OILDESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as OILDESCR_VALUE, \nmax(case when s.assetattrid = 'OILDESCR' then s.measureunitid else null end) as OILDESCR_UNITID,\nmax(case when s.assetattrid = 'OILMAX' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMAX_VALUE, \nmax(case when s.assetattrid = 'OILMAX' then s.measureunitid else null end) as OILMAX_UNITID,\nmax(case when s.assetattrid = 'OIL_AM' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AM_VALUE, \nmax(case when s.assetattrid = 'OIL_AM' then s.measureunitid else null end) as OIL_AM_UNITID,\nmax(case when s.assetattrid = 'OIL_AVE' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AVE_VALUE, \nmax(case when s.assetattrid = 'OIL_AVE' then s.measureunitid else null end) as OIL_AVE_UNITID,\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE, \nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\nmax(case when s.assetattrid = 'OPEN_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as OPEN_PR_VALUE, \nmax(case when s.assetattrid = 'OPEN_PR' then s.measureunitid else null end) as OPEN_PR_UNITID,\nmax(case when s.assetattrid = 'OPER' then coalesce(s.numvalue,s.alnvalue) else null end) as OPER_VALUE, \nmax(case when s.assetattrid = 'OPER' then s.measureunitid else null end) as OPER_UNITID,\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\nmax(case when s.assetattrid = 'OUTPUT' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTPUT_VALUE, \nmax(case when s.assetattrid = 'OUTPUT' then s.measureunitid else null end) as OUTPUT_UNITID,\nmax(case when s.assetattrid = 'P0' then coalesce(s.numvalue,s.alnvalue) else null end) as P0_VALUE, \nmax(case when s.assetattrid = 'P0' then s.measureunitid else null end) as P0_UNITID,\nmax(case when s.assetattrid = 'PIPE' then coalesce(s.numvalue,s.alnvalue) else null end) as PIPE_VALUE, \nmax(case when s.assetattrid = 'PIPE' then s.measureunitid else null end) as PIPE_UNITID,\nmax(case when s.assetattrid = 'PJ' then coalesce(s.numvalue,s.alnvalue) else null end) as PJ_VALUE, \nmax(case when s.assetattrid = 'PJ' then s.measureunitid else null end) as PJ_UNITID,\nmax(case when s.assetattrid = 'PK' then coalesce(s.numvalue,s.alnvalue) else null end) as PK_VALUE, \nmax(case when s.assetattrid = 'PK' then s.measureunitid else null end) as PK_UNITID,\nmax(case when s.assetattrid = 'POS1' then coalesce(s.numvalue,s.alnvalue) else null end) as POS1_VALUE, \nmax(case when s.assetattrid = 'POS1' then s.measureunitid else null end) as POS1_UNITID,\nmax(case when s.assetattrid = 'POS2' then coalesce(s.numvalue,s.alnvalue) else null end) as POS2_VALUE, \nmax(case when s.assetattrid = 'POS2' then s.measureunitid else null end) as POS2_UNITID,\nmax(case when s.assetattrid = 'POS3' then coalesce(s.numvalue,s.alnvalue) else null end) as POS3_VALUE, \nmax(case when s.assetattrid = 'POS3' then s.measureunitid else null end) as POS3_UNITID,\nmax(case when s.assetattrid = 'PRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as PRESS_VALUE, \nmax(case when s.assetattrid = 'PRESS' then s.measureunitid else null end) as PRESS_UNITID,\nmax(case when s.assetattrid = 'PRNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as PRNOM_VALUE, \nmax(case when s.assetattrid = 'PRNOM' then s.measureunitid else null end) as PRNOM_UNITID,\nmax(case when s.assetattrid = 'PROSCSUBS' then coalesce(s.numvalue,s.alnvalue) else null end) as PROSCSUBS_VALUE, \nmax(case when s.assetattrid = 'PROSCSUBS' then s.measureunitid else null end) as PROSCSUBS_UNITID,\nmax(case when s.assetattrid = 'PR_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as PR_NOM_VALUE, \nmax(case when s.assetattrid = 'PR_NOM' then s.measureunitid else null end) as PR_NOM_UNITID,\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\nmax(case when s.assetattrid = 'RK' then coalesce(s.numvalue,s.alnvalue) else null end) as RK_VALUE, \nmax(case when s.assetattrid = 'RK' then s.measureunitid else null end) as RK_UNITID,\nmax(case when s.assetattrid = 'RKHV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV1_VALUE, \nmax(case when s.assetattrid = 'RKHV_LV1' then s.measureunitid else null end) as RKHV_LV1_UNITID,\nmax(case when s.assetattrid = 'RKHV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV2_VALUE, \nmax(case when s.assetattrid = 'RKHV_LV2' then s.measureunitid else null end) as RKHV_LV2_UNITID,\nmax(case when s.assetattrid = 'RKHV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV3_VALUE, \nmax(case when s.assetattrid = 'RKHV_LV3' then s.measureunitid else null end) as RKHV_LV3_UNITID,\nmax(case when s.assetattrid = 'RKHV_MV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV1_VALUE, \nmax(case when s.assetattrid = 'RKHV_MV1' then s.measureunitid else null end) as RKHV_MV1_UNITID,\nmax(case when s.assetattrid = 'RKHV_MV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV2_VALUE, \nmax(case when s.assetattrid = 'RKHV_MV2' then s.measureunitid else null end) as RKHV_MV2_UNITID,\nmax(case when s.assetattrid = 'RKHV_MV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV3_VALUE, \nmax(case when s.assetattrid = 'RKHV_MV3' then s.measureunitid else null end) as RKHV_MV3_UNITID,\nmax(case when s.assetattrid = 'RKMV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV1_VALUE, \nmax(case when s.assetattrid = 'RKMV_LV1' then s.measureunitid else null end) as RKMV_LV1_UNITID,\nmax(case when s.assetattrid = 'RKMV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV2_VALUE, \nmax(case when s.assetattrid = 'RKMV_LV2' then s.measureunitid else null end) as RKMV_LV2_UNITID,\nmax(case when s.assetattrid = 'RKMV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV3_VALUE, \nmax(case when s.assetattrid = 'RKMV_LV3' then s.measureunitid else null end) as RKMV_LV3_UNITID,\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\nmax(case when s.assetattrid = 'S0' then coalesce(s.numvalue,s.alnvalue) else null end) as S0_VALUE, \nmax(case when s.assetattrid = 'S0' then s.measureunitid else null end) as S0_UNITID,\nmax(case when s.assetattrid = 'SCALING' then coalesce(s.numvalue,s.alnvalue) else null end) as SCALING_VALUE, \nmax(case when s.assetattrid = 'SCALING' then s.measureunitid else null end) as SCALING_UNITID,\nmax(case when s.assetattrid = 'SF6INFPR' then coalesce(s.numvalue,s.alnvalue) else null end) as SF6INFPR_VALUE, \nmax(case when s.assetattrid = 'SF6INFPR' then s.measureunitid else null end) as SF6INFPR_UNITID,\nmax(case when s.assetattrid = 'SNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as SNOM_VALUE, \nmax(case when s.assetattrid = 'SNOM' then s.measureunitid else null end) as SNOM_UNITID,\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\nmax(case when s.assetattrid = 'SULKIJA' then coalesce(s.numvalue,s.alnvalue) else null end) as SULKIJA_VALUE, \nmax(case when s.assetattrid = 'SULKIJA' then s.measureunitid else null end) as SULKIJA_UNITID,\nmax(case when s.assetattrid = 'SUOJAUSLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as SUOJAUSLUOKKA_VALUE, \nmax(case when s.assetattrid = 'SUOJAUSLUOKKA' then s.measureunitid else null end) as SUOJAUSLUOKKA_UNITID,\nmax(case when s.assetattrid = 'TEHOLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TEHOLUOKKA_VALUE, \nmax(case when s.assetattrid = 'TEHOLUOKKA' then s.measureunitid else null end) as TEHOLUOKKA_UNITID,\nmax(case when s.assetattrid = 'TEMP_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as TEMP_NOM_VALUE, \nmax(case when s.assetattrid = 'TEMP_NOM' then s.measureunitid else null end) as TEMP_NOM_UNITID,\nmax(case when s.assetattrid = 'TERMDESC' then coalesce(s.numvalue,s.alnvalue) else null end) as TERMDESC_VALUE, \nmax(case when s.assetattrid = 'TERMDESC' then s.measureunitid else null end) as TERMDESC_UNITID,\nmax(case when s.assetattrid = 'TILALUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TILALUOKKA_VALUE, \nmax(case when s.assetattrid = 'TILALUOKKA' then s.measureunitid else null end) as TILALUOKKA_UNITID,\nmax(case when s.assetattrid = 'TODISTUKSET' then coalesce(s.numvalue,s.alnvalue) else null end) as TODISTUKSET_VALUE, \nmax(case when s.assetattrid = 'TODISTUKSET' then s.measureunitid else null end) as TODISTUKSET_UNITID,\nmax(case when s.assetattrid = 'TRWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as TRWEIGHT_VALUE, \nmax(case when s.assetattrid = 'TRWEIGHT' then s.measureunitid else null end) as TRWEIGHT_UNITID,\nmax(case when s.assetattrid = 'TYPEREF' then coalesce(s.numvalue,s.alnvalue) else null end) as TYPEREF_VALUE, \nmax(case when s.assetattrid = 'TYPEREF' then s.measureunitid else null end) as TYPEREF_UNITID,\nmax(case when s.assetattrid = 'TYPETEST' then coalesce(s.numvalue,s.alnvalue) else null end) as TYPETEST_VALUE, \nmax(case when s.assetattrid = 'TYPETEST' then s.measureunitid else null end) as TYPETEST_UNITID,\nmax(case when s.assetattrid = 'T_OIL_R' then coalesce(s.numvalue,s.alnvalue) else null end) as T_OIL_R_VALUE, \nmax(case when s.assetattrid = 'T_OIL_R' then s.measureunitid else null end) as T_OIL_R_UNITID,\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE, \nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\nmax(case when s.assetattrid = 'UNOMHV' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOMHV_VALUE, \nmax(case when s.assetattrid = 'UNOMHV' then s.measureunitid else null end) as UNOMHV_UNITID,\nmax(case when s.assetattrid = 'UNOMMV' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOMMV_VALUE, \nmax(case when s.assetattrid = 'UNOMMV' then s.measureunitid else null end) as UNOMMV_UNITID,\nmax(case when s.assetattrid = 'VAIHELIITIN' then coalesce(s.numvalue,s.alnvalue) else null end) as VAIHELIITIN_VALUE, \nmax(case when s.assetattrid = 'VAIHELIITIN' then s.measureunitid else null end) as VAIHELIITIN_UNITID,\nmax(case when s.assetattrid = 'VECTORG' then coalesce(s.numvalue,s.alnvalue) else null end) as VECTORG_VALUE, \nmax(case when s.assetattrid = 'VECTORG' then s.measureunitid else null end) as VECTORG_UNITID,\nmax(case when s.assetattrid = 'VOL' then coalesce(s.numvalue,s.alnvalue) else null end) as VOL_VALUE, \nmax(case when s.assetattrid = 'VOL' then s.measureunitid else null end) as VOL_UNITID,\nmax(case when s.assetattrid = 'VOLT_OUT' then coalesce(s.numvalue,s.alnvalue) else null end) as VOLT_OUT_VALUE, \nmax(case when s.assetattrid = 'VOLT_OUT' then s.measureunitid else null end) as VOLT_OUT_UNITID,\nmax(case when s.assetattrid = 'VTOTGAS' then coalesce(s.numvalue,s.alnvalue) else null end) as VTOTGAS_VALUE, \nmax(case when s.assetattrid = 'VTOTGAS' then s.measureunitid else null end) as VTOTGAS_UNITID,\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'W-O_AVE' then coalesce(s.numvalue,s.alnvalue) else null end) as W_O_AVE_VALUE, \nmax(case when s.assetattrid = 'W-O_AVE' then s.measureunitid else null end) as W_O_AVE_UNITID,\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE, \nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID,\nmax(case when s.assetattrid = 'X_EXP' then coalesce(s.numvalue,s.alnvalue) else null end) as X_EXP_VALUE, \nmax(case when s.assetattrid = 'X_EXP' then s.measureunitid else null end) as X_EXP_UNITID,\nmax(case when s.assetattrid = 'Y_EXP' then coalesce(s.numvalue,s.alnvalue) else null end) as Y_EXP_VALUE, \nmax(case when s.assetattrid = 'Y_EXP' then s.measureunitid else null end) as Y_EXP_UNITID,\nmax(case when s.assetattrid = 'ZK' then coalesce(s.numvalue,s.alnvalue) else null end) as ZK_VALUE, \nmax(case when s.assetattrid = 'ZK' then s.measureunitid else null end) as ZK_UNITID,\nmax(case when s.assetattrid = 'ZKHV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV1_VALUE, \nmax(case when s.assetattrid = 'ZKHV_LV1' then s.measureunitid else null end) as ZKHV_LV1_UNITID,\nmax(case when s.assetattrid = 'ZKHV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV2_VALUE, \nmax(case when s.assetattrid = 'ZKHV_LV2' then s.measureunitid else null end) as ZKHV_LV2_UNITID,\nmax(case when s.assetattrid = 'ZKHV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV3_VALUE, \nmax(case when s.assetattrid = 'ZKHV_LV3' then s.measureunitid else null end) as ZKHV_LV3_UNITID,\nmax(case when s.assetattrid = 'ZKHV_MV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV1_VALUE, \nmax(case when s.assetattrid = 'ZKHV_MV1' then s.measureunitid else null end) as ZKHV_MV1_UNITID,\nmax(case when s.assetattrid = 'ZKHV_MV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV2_VALUE, \nmax(case when s.assetattrid = 'ZKHV_MV2' then s.measureunitid else null end) as ZKHV_MV2_UNITID,\nmax(case when s.assetattrid = 'ZKHV_MV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV3_VALUE, \nmax(case when s.assetattrid = 'ZKHV_MV3' then s.measureunitid else null end) as ZKHV_MV3_UNITID,\nmax(case when s.assetattrid = 'ZKMV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV1_VALUE, \nmax(case when s.assetattrid = 'ZKMV_LV1' then s.measureunitid else null end) as ZKMV_LV1_UNITID,\nmax(case when s.assetattrid = 'ZKMV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV2_VALUE, \nmax(case when s.assetattrid = 'ZKMV_LV2' then s.measureunitid else null end) as ZKMV_LV2_UNITID,\nmax(case when s.assetattrid = 'ZKMV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV3_VALUE, \nmax(case when s.assetattrid = 'ZKMV_LV3' then s.measureunitid else null end) as ZKMV_LV3_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere exists (select 1 from `clean_test`.`maximo`.`classstructure` cs \n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'MUU' /*'Muuntajat'*/ )\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sahkoasema": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sahkoasema", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sahkoasema.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sahkoasema.sql", "unique_id": "model.Fingrid.d_sahkoasema", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sahkoasema"], "alias": "d_sahkoasema", "checksum": {"name": "sha256", "checksum": "f4bc36f6d2f59e03c3c74320bc8f8339dbaf42b4213bdfe3ed5df9624f05cdc0"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien tiedot", "columns": {"substation_cusbusinessid": {"name": "substation_cusbusinessid", "description": "cusbusinessid - Asema", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substation_name": {"name": "substation_name", "description": "substation_name - Aseman nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substation_location": {"name": "substation_location", "description": "location - Aseman sijainti", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tyyppi": {"name": "tyyppi", "description": "substation type - tukiaseman tyyppi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusvoltage": {"name": "cusvoltage", "description": "cusvoltage  - J\u00e4nnite", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea_desc": {"name": "cusworkarea_desc", "description": "cusworkarea_desc  - s\u00e4hk\u00f6asemat_tilaajan_ty\u00f6alue_nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea": {"name": "cusworkarea", "description": "cusworkarea - s\u00e4hk\u00f6asemat_tilaajan_ty\u00f6alue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region_description": {"name": "region_description", "description": "region_description - s\u00e4hk\u00f6asemat_tilaajan_alue_nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region_cusbusinessid": {"name": "region_cusbusinessid", "description": "region_cusbusinessid - s\u00e4hk\u00f6asemat_tilaajan_alue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusowner": {"name": "cusowner", "description": "cusowner - Omistaja", "meta": {}, "data_type": null, "quote": null, "tags": []}, "glaccount": {"name": "glaccount", "description": "glaccount - Tili\u00f6inti", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusactcomdate": {"name": "cusactcomdate", "description": "cusactcomdate - K\u00e4ytt\u00f6\u00f6nottop\u00e4iv\u00e4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postalcode": {"name": "postalcode", "description": "postalcode - Postinumero", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "city - Paikkakunta", "meta": {}, "data_type": null, "quote": null, "tags": []}, "streetaddress": {"name": "streetaddress", "description": "streetaddress - Katuosoite", "meta": {}, "data_type": null, "quote": null, "tags": []}, "directions": {"name": "directions", "description": "directions - Saapumisohjeet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RYHM\u00c4": {"name": "RYHM\u00c4", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classificationid": {"name": "classificationid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructureid": {"name": "classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructure_desc_translated": {"name": "classstructure_desc_translated", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.5853043, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sahkoasema`", "raw_code": "SELECT *\r\nFROM {{ ref('b_substations') }}\r\nWHERE status IN('OPERATING', 'PLANNED')", "language": "sql", "refs": [["b_substations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.Fingrid.b_substations"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sahkoasema.sql", "compiled": true, "compiled_code": "SELECT *\nFROM `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`b_substations`\nWHERE status IN('OPERATING', 'PLANNED')", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_erotin": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_erotin", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_erotin.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_erotin.sql", "unique_id": "model.Fingrid.d_sa_erotin", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_erotin"], "alias": "d_sa_erotin", "checksum": {"name": "sha256", "checksum": "6ab286a94d0feb2781b14f2580c10ac9ffe5e753b93d9bf4a72b3c0264aac407"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.336971, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_erotin`", "raw_code": "select\r\na.ASSETNUM,\r\na.ITEMNUM,\r\nmax(case when s.assetattrid = 'AERPAINT' then coalesce(s.numvalue,s.alnvalue) else null end) as AERPAINT_VALUE,\r\nmax(case when s.assetattrid = 'AERPAINT' then s.measureunitid else null end) as AERPAINT_UNITID,\r\nmax(case when s.assetattrid = 'ALARM' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_VALUE,\r\nmax(case when s.assetattrid = 'ALARM' then s.measureunitid else null end) as ALARM_UNITID,\r\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMMANUFACTOR_VALUE,\r\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then s.measureunitid else null end) as ALARMMANUFACTOR_UNITID,\r\nmax(case when s.assetattrid = 'ALARMTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMTYPE_VALUE,\r\nmax(case when s.assetattrid = 'ALARMTYPE' then s.measureunitid else null end) as ALARMTYPE_UNITID,\r\nmax(case when s.assetattrid = 'ANTURI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANTURI_VALUE,\r\nmax(case when s.assetattrid = 'ANTURI' then s.measureunitid else null end) as ANTURI_UNITID,\r\nmax(case when s.assetattrid = 'BIRDPROH' then coalesce(s.numvalue,s.alnvalue) else null end) as BIRDPROH_VALUE,\r\nmax(case when s.assetattrid = 'BIRDPROH' then s.measureunitid else null end) as BIRDPROH_UNITID,\r\nmax(case when s.assetattrid = 'CAPACI' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACI_VALUE,\r\nmax(case when s.assetattrid = 'CAPACI' then s.measureunitid else null end) as CAPACI_UNITID,\r\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE,\r\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\r\nmax(case when s.assetattrid = 'COLORCODE' then coalesce(s.numvalue,s.alnvalue) else null end) as COLORCODE_VALUE,\r\nmax(case when s.assetattrid = 'COLORCODE' then s.measureunitid else null end) as COLORCODE_UNITID,\r\nmax(case when s.assetattrid = 'CROSSARM' then coalesce(s.numvalue,s.alnvalue) else null end) as CROSSARM_VALUE,\r\nmax(case when s.assetattrid = 'CROSSARM' then s.measureunitid else null end) as CROSSARM_UNITID,\r\nmax(case when s.assetattrid = 'DCOND' then coalesce(s.numvalue,s.alnvalue) else null end) as DCOND_VALUE,\r\nmax(case when s.assetattrid = 'DCOND' then s.measureunitid else null end) as DCOND_UNITID,\r\nmax(case when s.assetattrid = 'FLYWARNSIGN' then coalesce(s.numvalue,s.alnvalue) else null end) as FLYWARNSIGN_VALUE,\r\nmax(case when s.assetattrid = 'FLYWARNSIGN' then s.measureunitid else null end) as FLYWARNSIGN_UNITID,\r\nmax(case when s.assetattrid = 'GUYWIREMARK' then coalesce(s.numvalue,s.alnvalue) else null end) as GUYWIREMARK_VALUE,\r\nmax(case when s.assetattrid = 'GUYWIREMARK' then s.measureunitid else null end) as GUYWIREMARK_UNITID,\r\nmax(case when s.assetattrid = 'HORBRADAMP' then coalesce(s.numvalue,s.alnvalue) else null end) as HORBRADAMP_VALUE,\r\nmax(case when s.assetattrid = 'HORBRADAMP' then s.measureunitid else null end) as HORBRADAMP_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE,\r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE,\r\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE,\r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE,\r\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\r\nmax(case when s.assetattrid = 'KOALISAATTORI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOALISAATTORI_VALUE,\r\nmax(case when s.assetattrid = 'KOALISAATTORI' then s.measureunitid else null end) as KOALISAATTORI_UNITID,\r\nmax(case when s.assetattrid = 'LEGTOP' then coalesce(s.numvalue,s.alnvalue) else null end) as LEGTOP_VALUE,\r\nmax(case when s.assetattrid = 'LEGTOP' then s.measureunitid else null end) as LEGTOP_UNITID,\r\nmax(case when s.assetattrid = 'LEG_LEN1' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN1_VALUE,\r\nmax(case when s.assetattrid = 'LEG_LEN1' then s.measureunitid else null end) as LEG_LEN1_UNITID,\r\nmax(case when s.assetattrid = 'LEG_LEN2' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN2_VALUE,\r\nmax(case when s.assetattrid = 'LEG_LEN2' then s.measureunitid else null end) as LEG_LEN2_UNITID,\r\nmax(case when s.assetattrid = 'LEG_LEN3' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN3_VALUE,\r\nmax(case when s.assetattrid = 'LEG_LEN3' then s.measureunitid else null end) as LEG_LEN3_UNITID,\r\nmax(case when s.assetattrid = 'LEG_LEN4' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN4_VALUE,\r\nmax(case when s.assetattrid = 'LEG_LEN4' then s.measureunitid else null end) as LEG_LEN4_UNITID,\r\nmax(case when s.assetattrid = 'LEG_NO1' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO1_VALUE,\r\nmax(case when s.assetattrid = 'LEG_NO1' then s.measureunitid else null end) as LEG_NO1_UNITID,\r\nmax(case when s.assetattrid = 'LEG_NO2' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO2_VALUE,\r\nmax(case when s.assetattrid = 'LEG_NO2' then s.measureunitid else null end) as LEG_NO2_UNITID,\r\nmax(case when s.assetattrid = 'LEG_NO3' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO3_VALUE,\r\nmax(case when s.assetattrid = 'LEG_NO3' then s.measureunitid else null end) as LEG_NO3_UNITID,\r\nmax(case when s.assetattrid = 'LEG_NO4' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO4_VALUE,\r\nmax(case when s.assetattrid = 'LEG_NO4' then s.measureunitid else null end) as LEG_NO4_UNITID,\r\nmax(case when s.assetattrid = 'LIGHTS' then coalesce(s.numvalue,s.alnvalue) else null end) as LIGHTS_VALUE,\r\nmax(case when s.assetattrid = 'LIGHTS' then s.measureunitid else null end) as LIGHTS_UNITID,\r\nmax(case when s.assetattrid = 'MATERIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as MATERIAL_VALUE,\r\nmax(case when s.assetattrid = 'MATERIAL' then s.measureunitid else null end) as MATERIAL_UNITID,\r\nmax(case when s.assetattrid = 'MAT_STR' then coalesce(s.numvalue,s.alnvalue) else null end) as MAT_STR_VALUE,\r\nmax(case when s.assetattrid = 'MAT_STR' then s.measureunitid else null end) as MAT_STR_UNITID,\r\nmax(case when s.assetattrid = 'MAXFLOW' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxFLOW_VALUE,\r\nmax(case when s.assetattrid = 'MAXFLOW' then s.measureunitid else null end) asmaxFLOW_UNITID,\r\nmax(case when s.assetattrid = 'MIN_TEMP' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_TEMP_VALUE,\r\nmax(case when s.assetattrid = 'MIN_TEMP' then s.measureunitid else null end) as MIN_TEMP_UNITID,\r\nmax(case when s.assetattrid = 'NAMEPLATE' then coalesce(s.numvalue,s.alnvalue) else null end) as NAMEPLATE_VALUE,\r\nmax(case when s.assetattrid = 'NAMEPLATE' then s.measureunitid else null end) as NAMEPLATE_UNITID,\r\nmax(case when s.assetattrid = 'NOOFCARM' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFCARM_VALUE,\r\nmax(case when s.assetattrid = 'NOOFCARM' then s.measureunitid else null end) as NOOFCARM_UNITID,\r\nmax(case when s.assetattrid = 'NOOFFNDS' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFFNDS_VALUE,\r\nmax(case when s.assetattrid = 'NOOFFNDS' then s.measureunitid else null end) as NOOFFNDS_UNITID,\r\nmax(case when s.assetattrid = 'NOOFGFND' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFGFND_VALUE,\r\nmax(case when s.assetattrid = 'NOOFGFND' then s.measureunitid else null end) as NOOFGFND_UNITID,\r\nmax(case when s.assetattrid = 'NOOFGUYS' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFGUYS_VALUE,\r\nmax(case when s.assetattrid = 'NOOFGUYS' then s.measureunitid else null end) as NOOFGUYS_UNITID,\r\nmax(case when s.assetattrid = 'NOOFSTPRT' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFSTPRT_VALUE,\r\nmax(case when s.assetattrid = 'NOOFSTPRT' then s.measureunitid else null end) as NOOFSTPRT_UNITID,\r\nmax(case when s.assetattrid = 'NOOFWPRT' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFWPRT_VALUE,\r\nmax(case when s.assetattrid = 'NOOFWPRT' then s.measureunitid else null end) as NOOFWPRT_UNITID,\r\nmax(case when s.assetattrid = 'OILMAX' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMAX_VALUE,\r\nmax(case when s.assetattrid = 'OILMAX' then s.measureunitid else null end) as OILMAX_UNITID,\r\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE,\r\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\r\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE,\r\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\r\nmax(case when s.assetattrid = 'SORT_U' then coalesce(s.numvalue,s.alnvalue) else null end) as SORT_U_VALUE,\r\nmax(case when s.assetattrid = 'SORT_U' then s.measureunitid else null end) as SORT_U_UNITID,\r\nmax(case when s.assetattrid = 'SPACER_L' then coalesce(s.numvalue,s.alnvalue) else null end) as SPACER_L_VALUE,\r\nmax(case when s.assetattrid = 'SPACER_L' then s.measureunitid else null end) as SPACER_L_UNITID,\r\nmax(case when s.assetattrid = 'SPACER_M' then coalesce(s.numvalue,s.alnvalue) else null end) as SPACER_M_VALUE,\r\nmax(case when s.assetattrid = 'SPACER_M' then s.measureunitid else null end) as SPACER_M_UNITID,\r\nmax(case when s.assetattrid = 'SPECIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as SPECIAL_VALUE,\r\nmax(case when s.assetattrid = 'SPECIAL' then s.measureunitid else null end) as SPECIAL_UNITID,\r\nmax(case when s.assetattrid = 'SPECSTRUCC' then coalesce(s.numvalue,s.alnvalue) else null end) as SPECSTRUCC_VALUE,\r\nmax(case when s.assetattrid = 'SPECSTRUCC' then s.measureunitid else null end) as SPECSTRUCC_UNITID,\r\nmax(case when s.assetattrid = 'STEELWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as STEELWEIGHT_VALUE,\r\nmax(case when s.assetattrid = 'STEELWEIGHT' then s.measureunitid else null end) as STEELWEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'SULKIJA' then coalesce(s.numvalue,s.alnvalue) else null end) as SULKIJA_VALUE,\r\nmax(case when s.assetattrid = 'SULKIJA' then s.measureunitid else null end) as SULKIJA_UNITID,\r\nmax(case when s.assetattrid = 'SW_ANGLE' then coalesce(s.numvalue,s.alnvalue) else null end) as SW_ANGLE_VALUE,\r\nmax(case when s.assetattrid = 'SW_ANGLE' then s.measureunitid else null end) as SW_ANGLE_UNITID,\r\nmax(case when s.assetattrid = 'TEHOLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TEHOLUOKKA_VALUE,\r\nmax(case when s.assetattrid = 'TEHOLUOKKA' then s.measureunitid else null end) as TEHOLUOKKA_UNITID,\r\nmax(case when s.assetattrid = 'TENSTWR' then coalesce(s.numvalue,s.alnvalue) else null end) as TENSTWR_VALUE,\r\nmax(case when s.assetattrid = 'TENSTWR' then s.measureunitid else null end) as TENSTWR_UNITID,\r\nmax(case when s.assetattrid = 'TOPHGHT1' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT1_VALUE,\r\nmax(case when s.assetattrid = 'TOPHGHT1' then s.measureunitid else null end) as TOPHGHT1_UNITID,\r\nmax(case when s.assetattrid = 'TOPHGHT2' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT2_VALUE,\r\nmax(case when s.assetattrid = 'TOPHGHT2' then s.measureunitid else null end) as TOPHGHT2_UNITID,\r\nmax(case when s.assetattrid = 'TOPHGHT3' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT3_VALUE,\r\nmax(case when s.assetattrid = 'TOPHGHT3' then s.measureunitid else null end) as TOPHGHT3_UNITID,\r\nmax(case when s.assetattrid = 'TOPHGHT4' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT4_VALUE,\r\nmax(case when s.assetattrid = 'TOPHGHT4' then s.measureunitid else null end) as TOPHGHT4_UNITID,\r\nmax(case when s.assetattrid = 'UCONTROL' then coalesce(s.numvalue,s.alnvalue) else null end) as UCONTROL_VALUE,\r\nmax(case when s.assetattrid = 'UCONTROL' then s.measureunitid else null end) as UCONTROL_UNITID,\r\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE,\r\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\r\nmax(case when s.assetattrid = 'VOL' then coalesce(s.numvalue,s.alnvalue) else null end) as VOL_VALUE,\r\nmax(case when s.assetattrid = 'VOL' then s.measureunitid else null end) as VOL_UNITID,\r\nmax(case when s.assetattrid = 'WARNSIGN' then coalesce(s.numvalue,s.alnvalue) else null end) as WARNSIGN_VALUE,\r\nmax(case when s.assetattrid = 'WARNSIGN' then s.measureunitid else null end) as WARNSIGN_UNITID,\r\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE,\r\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'WOODPNET' then coalesce(s.numvalue,s.alnvalue) else null end) as WOODPNET_VALUE,\r\nmax(case when s.assetattrid = 'WOODPNET' then s.measureunitid else null end) as WOODPNET_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere upper(a.description) like '%EROTIN%'\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_erotin.sql", "compiled": true, "compiled_code": "select\na.ASSETNUM,\na.ITEMNUM,\nmax(case when s.assetattrid = 'AERPAINT' then coalesce(s.numvalue,s.alnvalue) else null end) as AERPAINT_VALUE,\nmax(case when s.assetattrid = 'AERPAINT' then s.measureunitid else null end) as AERPAINT_UNITID,\nmax(case when s.assetattrid = 'ALARM' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_VALUE,\nmax(case when s.assetattrid = 'ALARM' then s.measureunitid else null end) as ALARM_UNITID,\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMMANUFACTOR_VALUE,\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then s.measureunitid else null end) as ALARMMANUFACTOR_UNITID,\nmax(case when s.assetattrid = 'ALARMTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMTYPE_VALUE,\nmax(case when s.assetattrid = 'ALARMTYPE' then s.measureunitid else null end) as ALARMTYPE_UNITID,\nmax(case when s.assetattrid = 'ANTURI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANTURI_VALUE,\nmax(case when s.assetattrid = 'ANTURI' then s.measureunitid else null end) as ANTURI_UNITID,\nmax(case when s.assetattrid = 'BIRDPROH' then coalesce(s.numvalue,s.alnvalue) else null end) as BIRDPROH_VALUE,\nmax(case when s.assetattrid = 'BIRDPROH' then s.measureunitid else null end) as BIRDPROH_UNITID,\nmax(case when s.assetattrid = 'CAPACI' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACI_VALUE,\nmax(case when s.assetattrid = 'CAPACI' then s.measureunitid else null end) as CAPACI_UNITID,\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE,\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\nmax(case when s.assetattrid = 'COLORCODE' then coalesce(s.numvalue,s.alnvalue) else null end) as COLORCODE_VALUE,\nmax(case when s.assetattrid = 'COLORCODE' then s.measureunitid else null end) as COLORCODE_UNITID,\nmax(case when s.assetattrid = 'CROSSARM' then coalesce(s.numvalue,s.alnvalue) else null end) as CROSSARM_VALUE,\nmax(case when s.assetattrid = 'CROSSARM' then s.measureunitid else null end) as CROSSARM_UNITID,\nmax(case when s.assetattrid = 'DCOND' then coalesce(s.numvalue,s.alnvalue) else null end) as DCOND_VALUE,\nmax(case when s.assetattrid = 'DCOND' then s.measureunitid else null end) as DCOND_UNITID,\nmax(case when s.assetattrid = 'FLYWARNSIGN' then coalesce(s.numvalue,s.alnvalue) else null end) as FLYWARNSIGN_VALUE,\nmax(case when s.assetattrid = 'FLYWARNSIGN' then s.measureunitid else null end) as FLYWARNSIGN_UNITID,\nmax(case when s.assetattrid = 'GUYWIREMARK' then coalesce(s.numvalue,s.alnvalue) else null end) as GUYWIREMARK_VALUE,\nmax(case when s.assetattrid = 'GUYWIREMARK' then s.measureunitid else null end) as GUYWIREMARK_UNITID,\nmax(case when s.assetattrid = 'HORBRADAMP' then coalesce(s.numvalue,s.alnvalue) else null end) as HORBRADAMP_VALUE,\nmax(case when s.assetattrid = 'HORBRADAMP' then s.measureunitid else null end) as HORBRADAMP_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE,\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE,\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE,\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE,\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\nmax(case when s.assetattrid = 'KOALISAATTORI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOALISAATTORI_VALUE,\nmax(case when s.assetattrid = 'KOALISAATTORI' then s.measureunitid else null end) as KOALISAATTORI_UNITID,\nmax(case when s.assetattrid = 'LEGTOP' then coalesce(s.numvalue,s.alnvalue) else null end) as LEGTOP_VALUE,\nmax(case when s.assetattrid = 'LEGTOP' then s.measureunitid else null end) as LEGTOP_UNITID,\nmax(case when s.assetattrid = 'LEG_LEN1' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN1_VALUE,\nmax(case when s.assetattrid = 'LEG_LEN1' then s.measureunitid else null end) as LEG_LEN1_UNITID,\nmax(case when s.assetattrid = 'LEG_LEN2' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN2_VALUE,\nmax(case when s.assetattrid = 'LEG_LEN2' then s.measureunitid else null end) as LEG_LEN2_UNITID,\nmax(case when s.assetattrid = 'LEG_LEN3' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN3_VALUE,\nmax(case when s.assetattrid = 'LEG_LEN3' then s.measureunitid else null end) as LEG_LEN3_UNITID,\nmax(case when s.assetattrid = 'LEG_LEN4' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_LEN4_VALUE,\nmax(case when s.assetattrid = 'LEG_LEN4' then s.measureunitid else null end) as LEG_LEN4_UNITID,\nmax(case when s.assetattrid = 'LEG_NO1' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO1_VALUE,\nmax(case when s.assetattrid = 'LEG_NO1' then s.measureunitid else null end) as LEG_NO1_UNITID,\nmax(case when s.assetattrid = 'LEG_NO2' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO2_VALUE,\nmax(case when s.assetattrid = 'LEG_NO2' then s.measureunitid else null end) as LEG_NO2_UNITID,\nmax(case when s.assetattrid = 'LEG_NO3' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO3_VALUE,\nmax(case when s.assetattrid = 'LEG_NO3' then s.measureunitid else null end) as LEG_NO3_UNITID,\nmax(case when s.assetattrid = 'LEG_NO4' then coalesce(s.numvalue,s.alnvalue) else null end) as LEG_NO4_VALUE,\nmax(case when s.assetattrid = 'LEG_NO4' then s.measureunitid else null end) as LEG_NO4_UNITID,\nmax(case when s.assetattrid = 'LIGHTS' then coalesce(s.numvalue,s.alnvalue) else null end) as LIGHTS_VALUE,\nmax(case when s.assetattrid = 'LIGHTS' then s.measureunitid else null end) as LIGHTS_UNITID,\nmax(case when s.assetattrid = 'MATERIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as MATERIAL_VALUE,\nmax(case when s.assetattrid = 'MATERIAL' then s.measureunitid else null end) as MATERIAL_UNITID,\nmax(case when s.assetattrid = 'MAT_STR' then coalesce(s.numvalue,s.alnvalue) else null end) as MAT_STR_VALUE,\nmax(case when s.assetattrid = 'MAT_STR' then s.measureunitid else null end) as MAT_STR_UNITID,\nmax(case when s.assetattrid = 'MAXFLOW' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxFLOW_VALUE,\nmax(case when s.assetattrid = 'MAXFLOW' then s.measureunitid else null end) asmaxFLOW_UNITID,\nmax(case when s.assetattrid = 'MIN_TEMP' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_TEMP_VALUE,\nmax(case when s.assetattrid = 'MIN_TEMP' then s.measureunitid else null end) as MIN_TEMP_UNITID,\nmax(case when s.assetattrid = 'NAMEPLATE' then coalesce(s.numvalue,s.alnvalue) else null end) as NAMEPLATE_VALUE,\nmax(case when s.assetattrid = 'NAMEPLATE' then s.measureunitid else null end) as NAMEPLATE_UNITID,\nmax(case when s.assetattrid = 'NOOFCARM' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFCARM_VALUE,\nmax(case when s.assetattrid = 'NOOFCARM' then s.measureunitid else null end) as NOOFCARM_UNITID,\nmax(case when s.assetattrid = 'NOOFFNDS' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFFNDS_VALUE,\nmax(case when s.assetattrid = 'NOOFFNDS' then s.measureunitid else null end) as NOOFFNDS_UNITID,\nmax(case when s.assetattrid = 'NOOFGFND' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFGFND_VALUE,\nmax(case when s.assetattrid = 'NOOFGFND' then s.measureunitid else null end) as NOOFGFND_UNITID,\nmax(case when s.assetattrid = 'NOOFGUYS' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFGUYS_VALUE,\nmax(case when s.assetattrid = 'NOOFGUYS' then s.measureunitid else null end) as NOOFGUYS_UNITID,\nmax(case when s.assetattrid = 'NOOFSTPRT' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFSTPRT_VALUE,\nmax(case when s.assetattrid = 'NOOFSTPRT' then s.measureunitid else null end) as NOOFSTPRT_UNITID,\nmax(case when s.assetattrid = 'NOOFWPRT' then coalesce(s.numvalue,s.alnvalue) else null end) as NOOFWPRT_VALUE,\nmax(case when s.assetattrid = 'NOOFWPRT' then s.measureunitid else null end) as NOOFWPRT_UNITID,\nmax(case when s.assetattrid = 'OILMAX' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMAX_VALUE,\nmax(case when s.assetattrid = 'OILMAX' then s.measureunitid else null end) as OILMAX_UNITID,\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE,\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE,\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\nmax(case when s.assetattrid = 'SORT_U' then coalesce(s.numvalue,s.alnvalue) else null end) as SORT_U_VALUE,\nmax(case when s.assetattrid = 'SORT_U' then s.measureunitid else null end) as SORT_U_UNITID,\nmax(case when s.assetattrid = 'SPACER_L' then coalesce(s.numvalue,s.alnvalue) else null end) as SPACER_L_VALUE,\nmax(case when s.assetattrid = 'SPACER_L' then s.measureunitid else null end) as SPACER_L_UNITID,\nmax(case when s.assetattrid = 'SPACER_M' then coalesce(s.numvalue,s.alnvalue) else null end) as SPACER_M_VALUE,\nmax(case when s.assetattrid = 'SPACER_M' then s.measureunitid else null end) as SPACER_M_UNITID,\nmax(case when s.assetattrid = 'SPECIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as SPECIAL_VALUE,\nmax(case when s.assetattrid = 'SPECIAL' then s.measureunitid else null end) as SPECIAL_UNITID,\nmax(case when s.assetattrid = 'SPECSTRUCC' then coalesce(s.numvalue,s.alnvalue) else null end) as SPECSTRUCC_VALUE,\nmax(case when s.assetattrid = 'SPECSTRUCC' then s.measureunitid else null end) as SPECSTRUCC_UNITID,\nmax(case when s.assetattrid = 'STEELWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as STEELWEIGHT_VALUE,\nmax(case when s.assetattrid = 'STEELWEIGHT' then s.measureunitid else null end) as STEELWEIGHT_UNITID,\nmax(case when s.assetattrid = 'SULKIJA' then coalesce(s.numvalue,s.alnvalue) else null end) as SULKIJA_VALUE,\nmax(case when s.assetattrid = 'SULKIJA' then s.measureunitid else null end) as SULKIJA_UNITID,\nmax(case when s.assetattrid = 'SW_ANGLE' then coalesce(s.numvalue,s.alnvalue) else null end) as SW_ANGLE_VALUE,\nmax(case when s.assetattrid = 'SW_ANGLE' then s.measureunitid else null end) as SW_ANGLE_UNITID,\nmax(case when s.assetattrid = 'TEHOLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TEHOLUOKKA_VALUE,\nmax(case when s.assetattrid = 'TEHOLUOKKA' then s.measureunitid else null end) as TEHOLUOKKA_UNITID,\nmax(case when s.assetattrid = 'TENSTWR' then coalesce(s.numvalue,s.alnvalue) else null end) as TENSTWR_VALUE,\nmax(case when s.assetattrid = 'TENSTWR' then s.measureunitid else null end) as TENSTWR_UNITID,\nmax(case when s.assetattrid = 'TOPHGHT1' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT1_VALUE,\nmax(case when s.assetattrid = 'TOPHGHT1' then s.measureunitid else null end) as TOPHGHT1_UNITID,\nmax(case when s.assetattrid = 'TOPHGHT2' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT2_VALUE,\nmax(case when s.assetattrid = 'TOPHGHT2' then s.measureunitid else null end) as TOPHGHT2_UNITID,\nmax(case when s.assetattrid = 'TOPHGHT3' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT3_VALUE,\nmax(case when s.assetattrid = 'TOPHGHT3' then s.measureunitid else null end) as TOPHGHT3_UNITID,\nmax(case when s.assetattrid = 'TOPHGHT4' then coalesce(s.numvalue,s.alnvalue) else null end) as TOPHGHT4_VALUE,\nmax(case when s.assetattrid = 'TOPHGHT4' then s.measureunitid else null end) as TOPHGHT4_UNITID,\nmax(case when s.assetattrid = 'UCONTROL' then coalesce(s.numvalue,s.alnvalue) else null end) as UCONTROL_VALUE,\nmax(case when s.assetattrid = 'UCONTROL' then s.measureunitid else null end) as UCONTROL_UNITID,\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE,\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\nmax(case when s.assetattrid = 'VOL' then coalesce(s.numvalue,s.alnvalue) else null end) as VOL_VALUE,\nmax(case when s.assetattrid = 'VOL' then s.measureunitid else null end) as VOL_UNITID,\nmax(case when s.assetattrid = 'WARNSIGN' then coalesce(s.numvalue,s.alnvalue) else null end) as WARNSIGN_VALUE,\nmax(case when s.assetattrid = 'WARNSIGN' then s.measureunitid else null end) as WARNSIGN_UNITID,\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE,\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID,\nmax(case when s.assetattrid = 'WOODPNET' then coalesce(s.numvalue,s.alnvalue) else null end) as WOODPNET_VALUE,\nmax(case when s.assetattrid = 'WOODPNET' then s.measureunitid else null end) as WOODPNET_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere upper(a.description) like '%EROTIN%'\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_jannitemuuntaja": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_jannitemuuntaja", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_jannitemuuntaja.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_jannitemuuntaja.sql", "unique_id": "model.Fingrid.d_sa_jannitemuuntaja", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_jannitemuuntaja"], "alias": "d_sa_jannitemuuntaja", "checksum": {"name": "sha256", "checksum": "5166eaa53618c5964205510ef332eb07f3d5550c81d97d9600fcbcc42845ccaf"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.33997, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_jannitemuuntaja`", "raw_code": "select\r\na.ASSETNUM,\r\na.ITEMNUM,\r\nmax(case when s.assetattrid = 'CAPACITA' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACITA_VALUE,\r\nmax(case when s.assetattrid = 'CAPACITA' then s.measureunitid else null end) as CAPACITA_UNITID,\r\nmax(case when s.assetattrid = 'CLASSINS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASSINS_VALUE,\r\nmax(case when s.assetattrid = 'CLASSINS' then s.measureunitid else null end) as CLASSINS_UNITID,\r\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE,\r\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\r\nmax(case when s.assetattrid = 'GIS' then coalesce(s.numvalue,s.alnvalue) else null end) as GIS_VALUE,\r\nmax(case when s.assetattrid = 'GIS' then s.measureunitid else null end) as GIS_UNITID,\r\nmax(case when s.assetattrid = 'INNERINS' then coalesce(s.numvalue,s.alnvalue) else null end) as INNERINS_VALUE,\r\nmax(case when s.assetattrid = 'INNERINS' then s.measureunitid else null end) as INNERINS_UNITID,\r\nmax(case when s.assetattrid = 'LITESTU' then coalesce(s.numvalue,s.alnvalue) else null end) as LITESTU_VALUE,\r\nmax(case when s.assetattrid = 'LITESTU' then s.measureunitid else null end) as LITESTU_UNITID,\r\nmax(case when s.assetattrid = 'MAXSYSU' then coalesce(s.numvalue,s.alnvalue) else null end) as MAXSYSU_VALUE,\r\nmax(case when s.assetattrid = 'MAXSYSU' then s.measureunitid else null end) as MAXSYSU_UNITID,\r\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE,\r\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\r\nmax(case when s.assetattrid = 'OILMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMASS_VALUE,\r\nmax(case when s.assetattrid = 'OILMASS' then s.measureunitid else null end) as OILMASS_UNITID,\r\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE,\r\nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\r\nmax(case when s.assetattrid = 'OUTINS' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTINS_VALUE,\r\nmax(case when s.assetattrid = 'OUTINS' then s.measureunitid else null end) as OUTINS_UNITID,\r\nmax(case when s.assetattrid = 'POWERFU' then coalesce(s.numvalue,s.alnvalue) else null end) as POWERFU_VALUE,\r\nmax(case when s.assetattrid = 'POWERFU' then s.measureunitid else null end) as POWERFU_UNITID,\r\nmax(case when s.assetattrid = 'RATEDTIM' then coalesce(s.numvalue,s.alnvalue) else null end) as RATEDTIM_VALUE,\r\nmax(case when s.assetattrid = 'RATEDTIM' then s.measureunitid else null end) as RATEDTIM_UNITID,\r\nmax(case when s.assetattrid = 'RATVFACT' then coalesce(s.numvalue,s.alnvalue) else null end) as RATVFACT_VALUE,\r\nmax(case when s.assetattrid = 'RATVFACT' then s.measureunitid else null end) as RATVFACT_UNITID,\r\nmax(case when s.assetattrid = 'STANDARD' then coalesce(s.numvalue,s.alnvalue) else null end) as STANDARD_VALUE,\r\nmax(case when s.assetattrid = 'STANDARD' then s.measureunitid else null end) as STANDARD_UNITID,\r\nmax(case when s.assetattrid = 'TERMDESC' then coalesce(s.numvalue,s.alnvalue) else null end) as TERMDESC_VALUE,\r\nmax(case when s.assetattrid = 'TERMDESC' then s.measureunitid else null end) as TERMDESC_UNITID,\r\nmax(case when s.assetattrid = 'TOTMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTMASS_VALUE,\r\nmax(case when s.assetattrid = 'TOTMASS' then s.measureunitid else null end) as TOTMASS_UNITID,\r\nmax(case when s.assetattrid = 'URATED' then coalesce(s.numvalue,s.alnvalue) else null end) as URATED_VALUE,\r\nmax(case when s.assetattrid = 'URATED' then s.measureunitid else null end) as URATED_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere upper(a.description) like '%J\u00c4NNITEMUUNTAJA%'\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_jannitemuuntaja.sql", "compiled": true, "compiled_code": "select\na.ASSETNUM,\na.ITEMNUM,\nmax(case when s.assetattrid = 'CAPACITA' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACITA_VALUE,\nmax(case when s.assetattrid = 'CAPACITA' then s.measureunitid else null end) as CAPACITA_UNITID,\nmax(case when s.assetattrid = 'CLASSINS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASSINS_VALUE,\nmax(case when s.assetattrid = 'CLASSINS' then s.measureunitid else null end) as CLASSINS_UNITID,\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE,\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\nmax(case when s.assetattrid = 'GIS' then coalesce(s.numvalue,s.alnvalue) else null end) as GIS_VALUE,\nmax(case when s.assetattrid = 'GIS' then s.measureunitid else null end) as GIS_UNITID,\nmax(case when s.assetattrid = 'INNERINS' then coalesce(s.numvalue,s.alnvalue) else null end) as INNERINS_VALUE,\nmax(case when s.assetattrid = 'INNERINS' then s.measureunitid else null end) as INNERINS_UNITID,\nmax(case when s.assetattrid = 'LITESTU' then coalesce(s.numvalue,s.alnvalue) else null end) as LITESTU_VALUE,\nmax(case when s.assetattrid = 'LITESTU' then s.measureunitid else null end) as LITESTU_UNITID,\nmax(case when s.assetattrid = 'MAXSYSU' then coalesce(s.numvalue,s.alnvalue) else null end) as MAXSYSU_VALUE,\nmax(case when s.assetattrid = 'MAXSYSU' then s.measureunitid else null end) as MAXSYSU_UNITID,\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE,\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\nmax(case when s.assetattrid = 'OILMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMASS_VALUE,\nmax(case when s.assetattrid = 'OILMASS' then s.measureunitid else null end) as OILMASS_UNITID,\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE,\nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE,\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\nmax(case when s.assetattrid = 'OUTINS' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTINS_VALUE,\nmax(case when s.assetattrid = 'OUTINS' then s.measureunitid else null end) as OUTINS_UNITID,\nmax(case when s.assetattrid = 'POWERFU' then coalesce(s.numvalue,s.alnvalue) else null end) as POWERFU_VALUE,\nmax(case when s.assetattrid = 'POWERFU' then s.measureunitid else null end) as POWERFU_UNITID,\nmax(case when s.assetattrid = 'RATEDTIM' then coalesce(s.numvalue,s.alnvalue) else null end) as RATEDTIM_VALUE,\nmax(case when s.assetattrid = 'RATEDTIM' then s.measureunitid else null end) as RATEDTIM_UNITID,\nmax(case when s.assetattrid = 'RATVFACT' then coalesce(s.numvalue,s.alnvalue) else null end) as RATVFACT_VALUE,\nmax(case when s.assetattrid = 'RATVFACT' then s.measureunitid else null end) as RATVFACT_UNITID,\nmax(case when s.assetattrid = 'STANDARD' then coalesce(s.numvalue,s.alnvalue) else null end) as STANDARD_VALUE,\nmax(case when s.assetattrid = 'STANDARD' then s.measureunitid else null end) as STANDARD_UNITID,\nmax(case when s.assetattrid = 'TERMDESC' then coalesce(s.numvalue,s.alnvalue) else null end) as TERMDESC_VALUE,\nmax(case when s.assetattrid = 'TERMDESC' then s.measureunitid else null end) as TERMDESC_UNITID,\nmax(case when s.assetattrid = 'TOTMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTMASS_VALUE,\nmax(case when s.assetattrid = 'TOTMASS' then s.measureunitid else null end) as TOTMASS_UNITID,\nmax(case when s.assetattrid = 'URATED' then coalesce(s.numvalue,s.alnvalue) else null end) as URATED_VALUE,\nmax(case when s.assetattrid = 'URATED' then s.measureunitid else null end) as URATED_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere upper(a.description) like '%J\u00c4NNITEMUUNTAJA%'\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_katkaisija": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_katkaisija", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_katkaisija.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_katkaisija.sql", "unique_id": "model.Fingrid.d_sa_katkaisija", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_katkaisija"], "alias": "d_sa_katkaisija", "checksum": {"name": "sha256", "checksum": "17b248b3ccf99f661242735de8b997ae7e0c2306b577c4a3239f24221260666e"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.3429718, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_katkaisija`", "raw_code": "select\r\na.ASSETNUM,\r\na.ITEMNUM,\r\nmax(case when s.assetattrid = 'APRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as APRESS_VALUE, \r\nmax(case when s.assetattrid = 'APRESS' then s.measureunitid else null end) as APRESS_UNITID,\r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\r\nmax(case when s.assetattrid = 'ARCLP' then coalesce(s.numvalue,s.alnvalue) else null end) as ARCLP_VALUE, \r\nmax(case when s.assetattrid = 'ARCLP' then s.measureunitid else null end) as ARCLP_UNITID,\r\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \r\nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\r\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \r\nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\r\nmax(case when s.assetattrid = 'CLPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLPRESS_VALUE, \r\nmax(case when s.assetattrid = 'CLPRESS' then s.measureunitid else null end) as CLPRESS_UNITID,\r\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE, \r\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\r\nmax(case when s.assetattrid = 'DENMON' then coalesce(s.numvalue,s.alnvalue) else null end) as DENMON_VALUE, \r\nmax(case when s.assetattrid = 'DENMON' then s.measureunitid else null end) as DENMON_UNITID,\r\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \r\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\r\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \r\nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\r\nmax(case when s.assetattrid = 'FPRES' then coalesce(s.numvalue,s.alnvalue) else null end) as FPRES_VALUE, \r\nmax(case when s.assetattrid = 'FPRES' then s.measureunitid else null end) as FPRES_UNITID,\r\nmax(case when s.assetattrid = 'GMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as GMASS_VALUE, \r\nmax(case when s.assetattrid = 'GMASS' then s.measureunitid else null end) as GMASS_UNITID,\r\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \r\nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\r\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \r\nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\r\nmax(case when s.assetattrid = 'IBRK' then coalesce(s.numvalue,s.alnvalue) else null end) as IBRK_VALUE, \r\nmax(case when s.assetattrid = 'IBRK' then s.measureunitid else null end) as IBRK_UNITID,\r\nmax(case when s.assetattrid = 'IDC' then coalesce(s.numvalue,s.alnvalue) else null end) as IDC_VALUE, \r\nmax(case when s.assetattrid = 'IDC' then s.measureunitid else null end) as IDC_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'IMAKE' then coalesce(s.numvalue,s.alnvalue) else null end) as IMAKE_VALUE, \r\nmax(case when s.assetattrid = 'IMAKE' then s.measureunitid else null end) as IMAKE_UNITID,\r\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE, \r\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\r\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \r\nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE, \r\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\r\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \r\nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\r\nmax(case when s.assetattrid = 'LPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as LPRESS_VALUE, \r\nmax(case when s.assetattrid = 'LPRESS' then s.measureunitid else null end) as LPRESS_UNITID,\r\nmax(case when s.assetattrid = 'MEDIUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MEDIUM_VALUE, \r\nmax(case when s.assetattrid = 'MEDIUM' then s.measureunitid else null end) as MEDIUM_UNITID,\r\nmax(case when s.assetattrid = 'MIN_TEMP' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_TEMP_VALUE, \r\nmax(case when s.assetattrid = 'MIN_TEMP' then s.measureunitid else null end) as MIN_TEMP_UNITID,\r\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \r\nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\r\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \r\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\r\nmax(case when s.assetattrid = 'OILTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as OILTYPE_VALUE, \r\nmax(case when s.assetattrid = 'OILTYPE' then s.measureunitid else null end) as OILTYPE_UNITID,\r\nmax(case when s.assetattrid = 'OIL_AM' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AM_VALUE, \r\nmax(case when s.assetattrid = 'OIL_AM' then s.measureunitid else null end) as OIL_AM_UNITID,\r\nmax(case when s.assetattrid = 'OLPRESS1' then coalesce(s.numvalue,s.alnvalue) else null end) as OLPRESS1_VALUE, \r\nmax(case when s.assetattrid = 'OLPRESS1' then s.measureunitid else null end) as OLPRESS1_UNITID,\r\nmax(case when s.assetattrid = 'OLPRESS2' then coalesce(s.numvalue,s.alnvalue) else null end) as OLPRESS2_VALUE, \r\nmax(case when s.assetattrid = 'OLPRESS2' then s.measureunitid else null end) as OLPRESS2_UNITID,\r\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE, \r\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \r\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\r\nmax(case when s.assetattrid = 'OPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPRESS_VALUE, \r\nmax(case when s.assetattrid = 'OPRESS' then s.measureunitid else null end) as OPRESS_UNITID,\r\nmax(case when s.assetattrid = 'PRES_NOTATION' then coalesce(s.numvalue,s.alnvalue) else null end) as PRES_NOTATION_VALUE, \r\nmax(case when s.assetattrid = 'PRES_NOTATION' then s.measureunitid else null end) as PRES_NOTATION_UNITID,\r\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \r\nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\r\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \r\nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\r\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \r\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\r\nmax(case when s.assetattrid = 'SORT_U' then coalesce(s.numvalue,s.alnvalue) else null end) as SORT_U_VALUE, \r\nmax(case when s.assetattrid = 'SORT_U' then s.measureunitid else null end) as SORT_U_UNITID,\r\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \r\nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\r\nmax(case when s.assetattrid = 'SVALVE' then coalesce(s.numvalue,s.alnvalue) else null end) as SVALVE_VALUE, \r\nmax(case when s.assetattrid = 'SVALVE' then s.measureunitid else null end) as SVALVE_UNITID,\r\nmax(case when s.assetattrid = 'SW_ANGLE' then coalesce(s.numvalue,s.alnvalue) else null end) as SW_ANGLE_VALUE, \r\nmax(case when s.assetattrid = 'SW_ANGLE' then s.measureunitid else null end) as SW_ANGLE_UNITID,\r\nmax(case when s.assetattrid = 'TMPCLSS' then coalesce(s.numvalue,s.alnvalue) else null end) as TMPCLSS_VALUE, \r\nmax(case when s.assetattrid = 'TMPCLSS' then s.measureunitid else null end) as TMPCLSS_UNITID,\r\nmax(case when s.assetattrid = 'TPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as TPRESS_VALUE, \r\nmax(case when s.assetattrid = 'TPRESS' then s.measureunitid else null end) as TPRESS_UNITID,\r\nmax(case when s.assetattrid = 'UCONTROL' then coalesce(s.numvalue,s.alnvalue) else null end) as UCONTROL_VALUE, \r\nmax(case when s.assetattrid = 'UCONTROL' then s.measureunitid else null end) as UCONTROL_UNITID,\r\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE, \r\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\r\nmax(case when s.assetattrid = 'UPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as UPRESS_VALUE, \r\nmax(case when s.assetattrid = 'UPRESS' then s.measureunitid else null end) as UPRESS_UNITID,\r\nmax(case when s.assetattrid = 'VPOLE' then coalesce(s.numvalue,s.alnvalue) else null end) as VPOLE_VALUE, \r\nmax(case when s.assetattrid = 'VPOLE' then s.measureunitid else null end) as VPOLE_UNITID,\r\nmax(case when s.assetattrid = 'VTOT' then coalesce(s.numvalue,s.alnvalue) else null end) as VTOT_VALUE, \r\nmax(case when s.assetattrid = 'VTOT' then s.measureunitid else null end) as VTOT_UNITID,\r\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere upper(a.description) like '%KATKAISIJA%'\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_katkaisija.sql", "compiled": true, "compiled_code": "select\na.ASSETNUM,\na.ITEMNUM,\nmax(case when s.assetattrid = 'APRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as APRESS_VALUE, \nmax(case when s.assetattrid = 'APRESS' then s.measureunitid else null end) as APRESS_UNITID,\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\nmax(case when s.assetattrid = 'ARCLP' then coalesce(s.numvalue,s.alnvalue) else null end) as ARCLP_VALUE, \nmax(case when s.assetattrid = 'ARCLP' then s.measureunitid else null end) as ARCLP_UNITID,\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\nmax(case when s.assetattrid = 'CLPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLPRESS_VALUE, \nmax(case when s.assetattrid = 'CLPRESS' then s.measureunitid else null end) as CLPRESS_UNITID,\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE, \nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\nmax(case when s.assetattrid = 'DENMON' then coalesce(s.numvalue,s.alnvalue) else null end) as DENMON_VALUE, \nmax(case when s.assetattrid = 'DENMON' then s.measureunitid else null end) as DENMON_UNITID,\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\nmax(case when s.assetattrid = 'FPRES' then coalesce(s.numvalue,s.alnvalue) else null end) as FPRES_VALUE, \nmax(case when s.assetattrid = 'FPRES' then s.measureunitid else null end) as FPRES_UNITID,\nmax(case when s.assetattrid = 'GMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as GMASS_VALUE, \nmax(case when s.assetattrid = 'GMASS' then s.measureunitid else null end) as GMASS_UNITID,\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\nmax(case when s.assetattrid = 'IBRK' then coalesce(s.numvalue,s.alnvalue) else null end) as IBRK_VALUE, \nmax(case when s.assetattrid = 'IBRK' then s.measureunitid else null end) as IBRK_UNITID,\nmax(case when s.assetattrid = 'IDC' then coalesce(s.numvalue,s.alnvalue) else null end) as IDC_VALUE, \nmax(case when s.assetattrid = 'IDC' then s.measureunitid else null end) as IDC_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'IMAKE' then coalesce(s.numvalue,s.alnvalue) else null end) as IMAKE_VALUE, \nmax(case when s.assetattrid = 'IMAKE' then s.measureunitid else null end) as IMAKE_UNITID,\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE, \nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE, \nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\nmax(case when s.assetattrid = 'LPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as LPRESS_VALUE, \nmax(case when s.assetattrid = 'LPRESS' then s.measureunitid else null end) as LPRESS_UNITID,\nmax(case when s.assetattrid = 'MEDIUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MEDIUM_VALUE, \nmax(case when s.assetattrid = 'MEDIUM' then s.measureunitid else null end) as MEDIUM_UNITID,\nmax(case when s.assetattrid = 'MIN_TEMP' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_TEMP_VALUE, \nmax(case when s.assetattrid = 'MIN_TEMP' then s.measureunitid else null end) as MIN_TEMP_UNITID,\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\nmax(case when s.assetattrid = 'OILTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as OILTYPE_VALUE, \nmax(case when s.assetattrid = 'OILTYPE' then s.measureunitid else null end) as OILTYPE_UNITID,\nmax(case when s.assetattrid = 'OIL_AM' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AM_VALUE, \nmax(case when s.assetattrid = 'OIL_AM' then s.measureunitid else null end) as OIL_AM_UNITID,\nmax(case when s.assetattrid = 'OLPRESS1' then coalesce(s.numvalue,s.alnvalue) else null end) as OLPRESS1_VALUE, \nmax(case when s.assetattrid = 'OLPRESS1' then s.measureunitid else null end) as OLPRESS1_UNITID,\nmax(case when s.assetattrid = 'OLPRESS2' then coalesce(s.numvalue,s.alnvalue) else null end) as OLPRESS2_VALUE, \nmax(case when s.assetattrid = 'OLPRESS2' then s.measureunitid else null end) as OLPRESS2_UNITID,\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE, \nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\nmax(case when s.assetattrid = 'OPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPRESS_VALUE, \nmax(case when s.assetattrid = 'OPRESS' then s.measureunitid else null end) as OPRESS_UNITID,\nmax(case when s.assetattrid = 'PRES_NOTATION' then coalesce(s.numvalue,s.alnvalue) else null end) as PRES_NOTATION_VALUE, \nmax(case when s.assetattrid = 'PRES_NOTATION' then s.measureunitid else null end) as PRES_NOTATION_UNITID,\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\nmax(case when s.assetattrid = 'SORT_U' then coalesce(s.numvalue,s.alnvalue) else null end) as SORT_U_VALUE, \nmax(case when s.assetattrid = 'SORT_U' then s.measureunitid else null end) as SORT_U_UNITID,\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\nmax(case when s.assetattrid = 'SVALVE' then coalesce(s.numvalue,s.alnvalue) else null end) as SVALVE_VALUE, \nmax(case when s.assetattrid = 'SVALVE' then s.measureunitid else null end) as SVALVE_UNITID,\nmax(case when s.assetattrid = 'SW_ANGLE' then coalesce(s.numvalue,s.alnvalue) else null end) as SW_ANGLE_VALUE, \nmax(case when s.assetattrid = 'SW_ANGLE' then s.measureunitid else null end) as SW_ANGLE_UNITID,\nmax(case when s.assetattrid = 'TMPCLSS' then coalesce(s.numvalue,s.alnvalue) else null end) as TMPCLSS_VALUE, \nmax(case when s.assetattrid = 'TMPCLSS' then s.measureunitid else null end) as TMPCLSS_UNITID,\nmax(case when s.assetattrid = 'TPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as TPRESS_VALUE, \nmax(case when s.assetattrid = 'TPRESS' then s.measureunitid else null end) as TPRESS_UNITID,\nmax(case when s.assetattrid = 'UCONTROL' then coalesce(s.numvalue,s.alnvalue) else null end) as UCONTROL_VALUE, \nmax(case when s.assetattrid = 'UCONTROL' then s.measureunitid else null end) as UCONTROL_UNITID,\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE, \nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\nmax(case when s.assetattrid = 'UPRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as UPRESS_VALUE, \nmax(case when s.assetattrid = 'UPRESS' then s.measureunitid else null end) as UPRESS_UNITID,\nmax(case when s.assetattrid = 'VPOLE' then coalesce(s.numvalue,s.alnvalue) else null end) as VPOLE_VALUE, \nmax(case when s.assetattrid = 'VPOLE' then s.measureunitid else null end) as VPOLE_UNITID,\nmax(case when s.assetattrid = 'VTOT' then coalesce(s.numvalue,s.alnvalue) else null end) as VTOT_VALUE, \nmax(case when s.assetattrid = 'VTOT' then s.measureunitid else null end) as VTOT_UNITID,\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE, \nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere upper(a.description) like '%KATKAISIJA%'\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_kunnossapitosopimus": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_kunnossapitosopimus", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_kunnossapitosopimus.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_kunnossapitosopimus.sql", "unique_id": "model.Fingrid.d_sa_kunnossapitosopimus", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_kunnossapitosopimus"], "alias": "d_sa_kunnossapitosopimus", "checksum": {"name": "sha256", "checksum": "8dbbbdd9cdc65bc83e191ae459dc053621c84cea7159ecbef9f38f5a3424f8d1"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien kunnossapitosopimukset.", "columns": {"pluspagreementid": {"name": "pluspagreementid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agreement": {"name": "agreement", "description": "Foreign key to f_kunnossapitokustannus", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer": {"name": "customer", "description": "Foreign key to d_toimittaja", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agreementmaximum": {"name": "agreementmaximum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agreementtype": {"name": "agreementtype", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paymentterms": {"name": "paymentterms", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billcycle": {"name": "billcycle", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastbilldate": {"name": "lastbilldate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "totalbilled": {"name": "totalbilled", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pretaxtotal": {"name": "pretaxtotal", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revpretactotal": {"name": "revpretactotal", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "startdate": {"name": "startdate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusresponsible": {"name": "cusresponsible", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "siteket": {"name": "siteket", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusdate": {"name": "statusdate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusdivision": {"name": "cusdivision", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusnextbilldate": {"name": "cusnextbilldate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusframecommited": {"name": "cusframecommited", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusframewarning": {"name": "cusframewarning", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custotalcommited": {"name": "custotalcommited", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusbillingcomp": {"name": "cusbillingcomp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revisionnum": {"name": "revisionnum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revisioncomments": {"name": "revisioncomments", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.5083008, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_kunnossapitosopimus`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\n\r\nselect a.pluspagreementid\r\n     , a.agreement\r\n     , a.customer\r\n     , a.description\r\n     , a.agreementmaximum\r\n     , a.agreementtype\r\n     , a.paymentterms\r\n     , a.billcycle\r\n     , a.lastbilldate\r\n     , a.totalbilled\r\n     , a.pretaxtotal\r\n     , a.revpretaxtotal\r\n     , a.startdate\r\n     , a.cusresponsible\r\n     , a.sitekey\r\n     , a.status\r\n     , a.statusdate\r\n     , a.cusdivision\r\n     , a.cusnextbilldate\r\n     , a.cusframecommitted\r\n     , a.cusframewarning\r\n     , a.custotalcommitted\r\n     , a.cusbillingcomp\r\n     , a.revisionnum\r\n     , a.revisioncomments\r\n     , a.rowstamp\r\nfrom {{ source('maximo', 'pluspagreement') }} a\r\njoin (\r\n    select max(rowstamp) max_rowstamp\r\n         , agreement\r\n    from {{ source('maximo', 'pluspagreement') }}\r\n    group by agreement\r\n) latest_agreement\r\nwhere latest_agreement.agreement = a.agreement\r\nand latest_agreement.max_rowstamp = a.rowstamp", "language": "sql", "refs": [], "sources": [["maximo", "pluspagreement"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.pluspagreement"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_kunnossapitosopimus.sql", "compiled": true, "compiled_code": "\n\nselect a.pluspagreementid\n     , a.agreement\n     , a.customer\n     , a.description\n     , a.agreementmaximum\n     , a.agreementtype\n     , a.paymentterms\n     , a.billcycle\n     , a.lastbilldate\n     , a.totalbilled\n     , a.pretaxtotal\n     , a.revpretaxtotal\n     , a.startdate\n     , a.cusresponsible\n     , a.sitekey\n     , a.status\n     , a.statusdate\n     , a.cusdivision\n     , a.cusnextbilldate\n     , a.cusframecommitted\n     , a.cusframewarning\n     , a.custotalcommitted\n     , a.cusbillingcomp\n     , a.revisionnum\n     , a.revisioncomments\n     , a.rowstamp\nfrom `clean_test`.`maximo`.`pluspagreement` a\njoin (\n    select max(rowstamp) max_rowstamp\n         , agreement\n    from `clean_test`.`maximo`.`pluspagreement`\n    group by agreement\n) latest_agreement\nwhere latest_agreement.agreement = a.agreement\nand latest_agreement.max_rowstamp = a.rowstamp", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_kunnossapitotyoluokittelu": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_kunnossapitotyoluokittelu", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_kunnossapitotyoluokittelu.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_kunnossapitotyoluokittelu.sql", "unique_id": "model.Fingrid.d_sa_kunnossapitotyoluokittelu", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_kunnossapitotyoluokittelu"], "alias": "d_sa_kunnossapitotyoluokittelu", "checksum": {"name": "sha256", "checksum": "3e8a9b2a98341e47136173d5435a7dfcb0699c724e3bfafc84e3d5e54a232bcb"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.3479717, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_kunnossapitotyoluokittelu`", "raw_code": "WITH cls0 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_0, cls.CLASSIFICATIONID as CLASSIFICATIONID_0, cls.DESCRIPTION as DESCRIPTION_0\r\n        , NULL as CLASSSTRUCTUREID_1, NULL as CLASSIFICATIONID_1, NULL as DESCRIPTION_1\r\n        , NULL as CLASSSTRUCTUREID_2, NULL as CLASSIFICATIONID_2, NULL as DESCRIPTION_2\r\n        , NULL as CLASSSTRUCTUREID_3, NULL as CLASSIFICATIONID_3, NULL as DESCRIPTION_3\r\n        , NULL as CLASSSTRUCTUREID_4, NULL as CLASSIFICATIONID_4, NULL as DESCRIPTION_4\r\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\r\n    from {{ source('maximo','classstructure') }} cls\r\n    where cls.CLASSIFICATIONID = 'S\u00c4HK\u00d6ASEMAT'\r\n),\r\ncls1 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\r\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_1, cls.CLASSIFICATIONID as CLASSIFICATIONID_1, cls.DESCRIPTION as DESCRIPTION_1\r\n        , NULL as CLASSSTRUCTUREID_2, NULL as CLASSIFICATIONID_2, NULL as DESCRIPTION_2\r\n        , NULL as CLASSSTRUCTUREID_3, NULL as CLASSIFICATIONID_3, NULL as DESCRIPTION_3\r\n        , NULL as CLASSSTRUCTUREID_4, NULL as CLASSIFICATIONID_4, NULL as DESCRIPTION_4\r\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\r\n    from cls0 p\r\n    join {{ source('maximo','classstructure') }} cls on p.CLASSSTRUCTUREID = cls.PARENT\r\n),\r\ncls2 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\r\n        , p.CLASSSTRUCTUREID_1, p.CLASSIFICATIONID_1, p.DESCRIPTION_1        \r\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_2, cls.CLASSIFICATIONID as CLASSIFICATIONID_2, cls.DESCRIPTION as DESCRIPTION_2\r\n        , NULL as CLASSSTRUCTUREID_3, NULL as CLASSIFICATIONID_3, NULL as DESCRIPTION_3\r\n        , NULL as CLASSSTRUCTUREID_4, NULL as CLASSIFICATIONID_4, NULL as DESCRIPTION_4\r\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\r\n    from cls1 p\r\n    join {{ source('maximo','classstructure') }} cls on p.CLASSSTRUCTUREID = cls.PARENT\r\n),\r\ncls3 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\r\n        , p.CLASSSTRUCTUREID_1, p.CLASSIFICATIONID_1, p.DESCRIPTION_1        \r\n        , p.CLASSSTRUCTUREID_2, p.CLASSIFICATIONID_2, p.DESCRIPTION_2\r\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_3, cls.CLASSIFICATIONID as CLASSIFICATIONID_3, cls.DESCRIPTION as DESCRIPTION_3\r\n        , NULL as CLASSSTRUCTUREID_4, NULL as CLASSIFICATIONID_4, NULL as DESCRIPTION_4\r\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\r\n    from cls2 p\r\n    join {{ source('maximo','classstructure') }} cls on p.CLASSSTRUCTUREID = cls.PARENT\r\n),\r\ncls4 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\r\n        , p.CLASSSTRUCTUREID_1, p.CLASSIFICATIONID_1, p.DESCRIPTION_1        \r\n        , p.CLASSSTRUCTUREID_2, p.CLASSIFICATIONID_2, p.DESCRIPTION_2\r\n        , p.CLASSSTRUCTUREID_3, p.CLASSIFICATIONID_3, p.DESCRIPTION_3\r\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_4, cls.CLASSIFICATIONID as CLASSIFICATIONID_4, cls.DESCRIPTION as DESCRIPTION_4\r\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\r\n    from cls3 p\r\n    join {{ source('maximo','classstructure') }} cls on p.CLASSSTRUCTUREID = cls.PARENT\r\n),\r\ncls5 as (\r\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\r\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\r\n        , p.CLASSSTRUCTUREID_1, p.CLASSIFICATIONID_1, p.DESCRIPTION_1        \r\n        , p.CLASSSTRUCTUREID_2, p.CLASSIFICATIONID_2, p.DESCRIPTION_2\r\n        , p.CLASSSTRUCTUREID_3, p.CLASSIFICATIONID_3, p.DESCRIPTION_3\r\n        , p.CLASSSTRUCTUREID_4, p.CLASSIFICATIONID_4, p.DESCRIPTION_4\r\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_5, cls.CLASSIFICATIONID as CLASSIFICATIONID_5, cls.DESCRIPTION as DESCRIPTION_5\r\n    from cls4 p\r\n    join {{ source('maximo','classstructure') }} cls on p.CLASSSTRUCTUREID = cls.PARENT\r\n),\r\ncls_all as (\r\n    select * from cls5 where HASCHILDREN = 0\r\n    union all\r\n    select * from cls4 where HASCHILDREN = 0\r\n    union all\r\n    select * from cls3 where HASCHILDREN = 0\r\n    union all\r\n    select * from cls2 where HASCHILDREN = 0\r\n    union all\r\n    select * from cls1 where HASCHILDREN = 0\r\n    union all\r\n    select * from cls0 where HASCHILDREN = 0\r\n)\r\nselect CLASSSTRUCTUREID -- Liitett\u00e4viss\u00e4 WORKORDER.CLASSSTRUCTUREID?\r\n    , CLASSIFICATIONID\r\n    , DESCRIPTION\r\n    , CUSHIERARCHYPATH\r\n    , CLASSIFICATIONID_1 as KUNNOSSAPITOTYOLUOKKA\r\n    , DESCRIPTION_1 as KUNNOSSAPITOTYOLUOKKA_DESCRIPTION\r\n    , coalesce(CLASSIFICATIONID_2, CLASSIFICATIONID_1) as KUNNOSSAPITOTYOLUOKKA_ALIRYHMA\r\n    , coalesce(DESCRIPTION_2, DESCRIPTION_1) as KUNNOSSAPITOTYOLUOKKA_ALIRYHMA_DESCRIPTION\r\n    , coalesce(CLASSIFICATIONID_3, CLASSIFICATIONID_2, CLASSIFICATIONID_1) as KUNNOSSAPITOTYOLUOKKA_ALIRYHMA2\r\n    , coalesce(DESCRIPTION_3, DESCRIPTION_2, DESCRIPTION_1) as KUNNOSSAPITOTYOLUOKKA_ALIRYHMA2_DESCRIPTION\r\nfrom cls_all", "language": "sql", "refs": [], "sources": [["maximo", "classstructure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_kunnossapitotyoluokittelu.sql", "compiled": true, "compiled_code": "WITH cls0 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_0, cls.CLASSIFICATIONID as CLASSIFICATIONID_0, cls.DESCRIPTION as DESCRIPTION_0\n        , NULL as CLASSSTRUCTUREID_1, NULL as CLASSIFICATIONID_1, NULL as DESCRIPTION_1\n        , NULL as CLASSSTRUCTUREID_2, NULL as CLASSIFICATIONID_2, NULL as DESCRIPTION_2\n        , NULL as CLASSSTRUCTUREID_3, NULL as CLASSIFICATIONID_3, NULL as DESCRIPTION_3\n        , NULL as CLASSSTRUCTUREID_4, NULL as CLASSIFICATIONID_4, NULL as DESCRIPTION_4\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\n    from `clean_test`.`maximo`.`classstructure` cls\n    where cls.CLASSIFICATIONID = 'S\u00c4HK\u00d6ASEMAT'\n),\ncls1 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_1, cls.CLASSIFICATIONID as CLASSIFICATIONID_1, cls.DESCRIPTION as DESCRIPTION_1\n        , NULL as CLASSSTRUCTUREID_2, NULL as CLASSIFICATIONID_2, NULL as DESCRIPTION_2\n        , NULL as CLASSSTRUCTUREID_3, NULL as CLASSIFICATIONID_3, NULL as DESCRIPTION_3\n        , NULL as CLASSSTRUCTUREID_4, NULL as CLASSIFICATIONID_4, NULL as DESCRIPTION_4\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\n    from cls0 p\n    join `clean_test`.`maximo`.`classstructure` cls on p.CLASSSTRUCTUREID = cls.PARENT\n),\ncls2 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\n        , p.CLASSSTRUCTUREID_1, p.CLASSIFICATIONID_1, p.DESCRIPTION_1        \n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_2, cls.CLASSIFICATIONID as CLASSIFICATIONID_2, cls.DESCRIPTION as DESCRIPTION_2\n        , NULL as CLASSSTRUCTUREID_3, NULL as CLASSIFICATIONID_3, NULL as DESCRIPTION_3\n        , NULL as CLASSSTRUCTUREID_4, NULL as CLASSIFICATIONID_4, NULL as DESCRIPTION_4\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\n    from cls1 p\n    join `clean_test`.`maximo`.`classstructure` cls on p.CLASSSTRUCTUREID = cls.PARENT\n),\ncls3 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\n        , p.CLASSSTRUCTUREID_1, p.CLASSIFICATIONID_1, p.DESCRIPTION_1        \n        , p.CLASSSTRUCTUREID_2, p.CLASSIFICATIONID_2, p.DESCRIPTION_2\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_3, cls.CLASSIFICATIONID as CLASSIFICATIONID_3, cls.DESCRIPTION as DESCRIPTION_3\n        , NULL as CLASSSTRUCTUREID_4, NULL as CLASSIFICATIONID_4, NULL as DESCRIPTION_4\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\n    from cls2 p\n    join `clean_test`.`maximo`.`classstructure` cls on p.CLASSSTRUCTUREID = cls.PARENT\n),\ncls4 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\n        , p.CLASSSTRUCTUREID_1, p.CLASSIFICATIONID_1, p.DESCRIPTION_1        \n        , p.CLASSSTRUCTUREID_2, p.CLASSIFICATIONID_2, p.DESCRIPTION_2\n        , p.CLASSSTRUCTUREID_3, p.CLASSIFICATIONID_3, p.DESCRIPTION_3\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_4, cls.CLASSIFICATIONID as CLASSIFICATIONID_4, cls.DESCRIPTION as DESCRIPTION_4\n        , NULL as CLASSSTRUCTUREID_5, NULL as CLASSIFICATIONID_5, NULL as DESCRIPTION_5\n    from cls3 p\n    join `clean_test`.`maximo`.`classstructure` cls on p.CLASSSTRUCTUREID = cls.PARENT\n),\ncls5 as (\n    select cls.CLASSSTRUCTUREID, cls.CLASSIFICATIONID, cls.DESCRIPTION, cls.HASCHILDREN, cls.PARENT, cls.CUSHIERARCHYPATH\n        , p.CLASSSTRUCTUREID_0, p.CLASSIFICATIONID_0, p.DESCRIPTION_0\n        , p.CLASSSTRUCTUREID_1, p.CLASSIFICATIONID_1, p.DESCRIPTION_1        \n        , p.CLASSSTRUCTUREID_2, p.CLASSIFICATIONID_2, p.DESCRIPTION_2\n        , p.CLASSSTRUCTUREID_3, p.CLASSIFICATIONID_3, p.DESCRIPTION_3\n        , p.CLASSSTRUCTUREID_4, p.CLASSIFICATIONID_4, p.DESCRIPTION_4\n        , cls.CLASSSTRUCTUREID as CLASSSTRUCTUREID_5, cls.CLASSIFICATIONID as CLASSIFICATIONID_5, cls.DESCRIPTION as DESCRIPTION_5\n    from cls4 p\n    join `clean_test`.`maximo`.`classstructure` cls on p.CLASSSTRUCTUREID = cls.PARENT\n),\ncls_all as (\n    select * from cls5 where HASCHILDREN = 0\n    union all\n    select * from cls4 where HASCHILDREN = 0\n    union all\n    select * from cls3 where HASCHILDREN = 0\n    union all\n    select * from cls2 where HASCHILDREN = 0\n    union all\n    select * from cls1 where HASCHILDREN = 0\n    union all\n    select * from cls0 where HASCHILDREN = 0\n)\nselect CLASSSTRUCTUREID -- Liitett\u00e4viss\u00e4 WORKORDER.CLASSSTRUCTUREID?\n    , CLASSIFICATIONID\n    , DESCRIPTION\n    , CUSHIERARCHYPATH\n    , CLASSIFICATIONID_1 as KUNNOSSAPITOTYOLUOKKA\n    , DESCRIPTION_1 as KUNNOSSAPITOTYOLUOKKA_DESCRIPTION\n    , coalesce(CLASSIFICATIONID_2, CLASSIFICATIONID_1) as KUNNOSSAPITOTYOLUOKKA_ALIRYHMA\n    , coalesce(DESCRIPTION_2, DESCRIPTION_1) as KUNNOSSAPITOTYOLUOKKA_ALIRYHMA_DESCRIPTION\n    , coalesce(CLASSIFICATIONID_3, CLASSIFICATIONID_2, CLASSIFICATIONID_1) as KUNNOSSAPITOTYOLUOKKA_ALIRYHMA2\n    , coalesce(DESCRIPTION_3, DESCRIPTION_2, DESCRIPTION_1) as KUNNOSSAPITOTYOLUOKKA_ALIRYHMA2_DESCRIPTION\nfrom cls_all", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_laite": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_laite", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_laite.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_laite.sql", "unique_id": "model.Fingrid.d_sa_laite", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_laite"], "alias": "d_sa_laite", "checksum": {"name": "sha256", "checksum": "3b843f8e8ea339f9eaa3e3e9081bfd8a80281ba3b27e58eb19dcaf9c5a40b465"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.3509924, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_laite`", "raw_code": "select \r\na.ASSETNUM\r\n, a.LOCATION\r\n,CASE \r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'KAT' THEN 'Katkaisijat'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'ERO' AND cs.cushierarchypath != 'EROTINAS' THEN 'Erottimet'\t\t\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'MAA' THEN 'Maadoituskytkimet'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'VIR' THEN 'Virtamuuntajat'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'J\u00c4N' THEN 'J\u00e4nnitemuuntajat'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'MUU' THEN 'Muuntajat'\r\n\t\tELSE 'Muut'\r\n\t\t/*\r\n\t\tWHEN cs.cushierarchypath = 'GIS' THEN 'GIS-kytkinlaitokset'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) in ('SKO', 'SC') THEN 'Sarjakondensaattorit'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'KOC' THEN 'Kondensaattoriparistot'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'RIN' THEN 'Rinnakkaisreaktorit'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'YJS' THEN 'Ylij\u00e4nnitesuojat'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) IN ('KAA', 'KAP') THEN 'Suurj\u00e4nnitekaapelit ja -kaapelip\u00e4\u00e4tteet'\r\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'SUC' THEN 'Suojakondensaattorit'\r\n\t\t*/\r\nEND ASSET_GROUP\r\n,a.SERIALNUM\r\n, a.DESCRIPTION\r\n, a.VENDOR\r\n, a.FAILURECODE\r\n, a.MANUFACTURER\r\n, a.INSTALLDATE\r\n, a.ITEMNUM\r\n, a.STATUS\r\n, a.STATUSDATE\r\n, a.CUSOWNER\r\n, cs.classstructureid\r\n, cs.cushierarchypath\r\n, cs.description as classstructure_description\r\n, case \r\n\twhen a.cusvoltage = '0,4'\r\n\tthen coalesce(clsh.laiteryhma_luokka_0_4, clsh.laiteryhma_luokka, 'Muut')\r\n    else coalesce(clsh.laiteryhma_luokka, 'Muut') \r\n\tend as laiteryhma_luokka\r\n, clsh.classificationid_0 as laiteryhma_0\r\n, clsh.description_0 as laiteryhma_0_description\r\n, clsh.classstructureid_0 as laiteryhma_0_classstructureid\r\n, clsh.classificationid_1 as laiteryhma_1\r\n, clsh.description_1 as laiteryhma_1_description\r\n, clsh.classstructureid_1 as laiteryhma_1_classstructureid\r\n, clsh.classificationid_2 as laiteryhma_2\r\n, clsh.description_2 as laiteryhma_2_description\r\n, clsh.classstructureid_2 as laiteryhma_2_classstructureid\r\n, clsh.classificationid_3 as laiteryhma_3\r\n, clsh.description_3 as laiteryhma_3_description\r\n, clsh.classstructureid_3 as laiteryhma_3_classstructureid\r\n, clsh.classificationid_4 as laiteryhma_4\r\n, clsh.description_4 as laiteryhma_4_description\r\n, clsh.classstructureid_4 as laiteryhma_4_classstructureid\r\n, loc.cusdivision\r\n, CAST(YEAR(loc.cusactcomdate) AS STRING) AS Kayttoonottovuosi\r\n, loc.custoplocation as substation_cusbusinessid\r\n, toploc.location AS substation_location\r\nfrom {{ source('maximo', 'asset') }} a\r\njoin {{ source('maximo', 'classstructure') }} cs\r\non a.CLASSSTRUCTUREID = cs.CLASSSTRUCTUREID\r\nleft join {{ ref('sa_laiteluokittelu') }} clsh \r\non a.classstructureid = clsh.classstructureid\r\nleft join {{ source('maximo', 'locations') }} loc\r\non a.LOCATION = loc.LOCATION\r\nleft join {{ source('maximo', 'locations') }} toploc\r\non loc.CUSTOPLOCATION = toploc.cusbusinessid\r\nwhere toploc.classstructureid IN ('3696','3708') /* asema ja varavoimalaitos */\r\nand toploc.status IN('OPERATING')\r\nand a.status IN('OPERATING')", "language": "sql", "refs": [["sa_laiteluokittelu"]], "sources": [["maximo", "locations"], ["maximo", "classstructure"], ["maximo", "asset"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.locations", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.asset", "model.Fingrid.sa_laiteluokittelu"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_laite.sql", "compiled": true, "compiled_code": "select \na.ASSETNUM\n, a.LOCATION\n,CASE \n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'KAT' THEN 'Katkaisijat'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'ERO' AND cs.cushierarchypath != 'EROTINAS' THEN 'Erottimet'\t\t\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'MAA' THEN 'Maadoituskytkimet'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'VIR' THEN 'Virtamuuntajat'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'J\u00c4N' THEN 'J\u00e4nnitemuuntajat'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'MUU' THEN 'Muuntajat'\n\t\tELSE 'Muut'\n\t\t/*\n\t\tWHEN cs.cushierarchypath = 'GIS' THEN 'GIS-kytkinlaitokset'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) in ('SKO', 'SC') THEN 'Sarjakondensaattorit'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'KOC' THEN 'Kondensaattoriparistot'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'RIN' THEN 'Rinnakkaisreaktorit'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'YJS' THEN 'Ylij\u00e4nnitesuojat'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) IN ('KAA', 'KAP') THEN 'Suurj\u00e4nnitekaapelit ja -kaapelip\u00e4\u00e4tteet'\n\t\tWHEN SUBSTRING(cs.cushierarchypath, 0, 4) = 'SUC' THEN 'Suojakondensaattorit'\n\t\t*/\nEND ASSET_GROUP\n,a.SERIALNUM\n, a.DESCRIPTION\n, a.VENDOR\n, a.FAILURECODE\n, a.MANUFACTURER\n, a.INSTALLDATE\n, a.ITEMNUM\n, a.STATUS\n, a.STATUSDATE\n, a.CUSOWNER\n, cs.classstructureid\n, cs.cushierarchypath\n, cs.description as classstructure_description\n, case \n\twhen a.cusvoltage = '0,4'\n\tthen coalesce(clsh.laiteryhma_luokka_0_4, clsh.laiteryhma_luokka, 'Muut')\n    else coalesce(clsh.laiteryhma_luokka, 'Muut') \n\tend as laiteryhma_luokka\n, clsh.classificationid_0 as laiteryhma_0\n, clsh.description_0 as laiteryhma_0_description\n, clsh.classstructureid_0 as laiteryhma_0_classstructureid\n, clsh.classificationid_1 as laiteryhma_1\n, clsh.description_1 as laiteryhma_1_description\n, clsh.classstructureid_1 as laiteryhma_1_classstructureid\n, clsh.classificationid_2 as laiteryhma_2\n, clsh.description_2 as laiteryhma_2_description\n, clsh.classstructureid_2 as laiteryhma_2_classstructureid\n, clsh.classificationid_3 as laiteryhma_3\n, clsh.description_3 as laiteryhma_3_description\n, clsh.classstructureid_3 as laiteryhma_3_classstructureid\n, clsh.classificationid_4 as laiteryhma_4\n, clsh.description_4 as laiteryhma_4_description\n, clsh.classstructureid_4 as laiteryhma_4_classstructureid\n, loc.cusdivision\n, CAST(YEAR(loc.cusactcomdate) AS STRING) AS Kayttoonottovuosi\n, loc.custoplocation as substation_cusbusinessid\n, toploc.location AS substation_location\nfrom `clean_test`.`maximo`.`asset` a\njoin `clean_test`.`maximo`.`classstructure` cs\non a.CLASSSTRUCTUREID = cs.CLASSSTRUCTUREID\nleft join `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`sa_laiteluokittelu` clsh \non a.classstructureid = clsh.classstructureid\nleft join `clean_test`.`maximo`.`locations` loc\non a.LOCATION = loc.LOCATION\nleft join `clean_test`.`maximo`.`locations` toploc\non loc.CUSTOPLOCATION = toploc.cusbusinessid\nwhere toploc.classstructureid IN ('3696','3708') /* asema ja varavoimalaitos */\nand toploc.status IN('OPERATING')\nand a.status IN('OPERATING')", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_laitepaikka": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_laitepaikka", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_laitepaikka.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_laitepaikka.sql", "unique_id": "model.Fingrid.d_sa_laitepaikka", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_laitepaikka"], "alias": "d_sa_laitepaikka", "checksum": {"name": "sha256", "checksum": "bc3077638a69dd5d6bd7f46290056048ce0c37a612d4dab86fafab9b48c866a6"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Laitepaikka. Haetaan laitehierarkiassa alimman tason laitteet s\u00e4hk\u00f6asemille.", "columns": {"location": {"name": "location", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "glaccount": {"name": "glaccount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea": {"name": "cusworkarea", "description": "Foreign key to d_tyoalueet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusvoltage": {"name": "cusvoltage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusbusinessid": {"name": "cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custoplocation": {"name": "custoplocation", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusowner": {"name": "cusowner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructureid": {"name": "classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cushierarchypath": {"name": "cushierarchypath", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructure_description": {"name": "classstructure_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_luokka": {"name": "laitepaikkaryhma_luokka", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma": {"name": "laitepaikkaryhma", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_description": {"name": "laitepaikkaryhma_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikkaryhma_classstructureid": {"name": "laitepaikkaryhma_classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma": {"name": "laitepaikka_aliryhma", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma_description": {"name": "laitepaikka_aliryhma_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laitepaikka_aliryhma_classstructureid": {"name": "laitepaikka_aliryhma_classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_location": {"name": "level1_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_cusbusinessid": {"name": "level1_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level1_name": {"name": "level1_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_location": {"name": "level2_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_cusbusinessid": {"name": "level2_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level2_name": {"name": "level2_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_location": {"name": "level3_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_cusbusinessid": {"name": "level3_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level3_name": {"name": "level3_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_location": {"name": "level4_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_cusbusinessid": {"name": "level4_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level4_name": {"name": "level4_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_location": {"name": "level5_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_cusbusinessid": {"name": "level5_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level5_name": {"name": "level5_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_location": {"name": "level6_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_cusbusinessid": {"name": "level6_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level6_name": {"name": "level6_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_location": {"name": "level7_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_cusbusinessid": {"name": "level7_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level7_name": {"name": "level7_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_location": {"name": "level8_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_cusbusinessid": {"name": "level8_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level8_name": {"name": "level8_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_location": {"name": "level9_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_cusbusinessid": {"name": "level9_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level9_name": {"name": "level9_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_location": {"name": "level10_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_cusbusinessid": {"name": "level10_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level10_name": {"name": "level10_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_location": {"name": "level11_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_cusbusinessid": {"name": "level11_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level11_name": {"name": "level11_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_location": {"name": "level12_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_cusbusinessid": {"name": "level12_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level12_name": {"name": "level12_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_location": {"name": "level13_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_cusbusinessid": {"name": "level13_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level13_name": {"name": "level13_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_location": {"name": "level14_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_cusbusinessid": {"name": "level14_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level14_name": {"name": "level14_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_location": {"name": "level15_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_cusbusinessid": {"name": "level15_cusbusinessid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "level15_name": {"name": "level15_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.5233042, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_laitepaikka`", "raw_code": "with hierarchy as (     /* Puretaan hierarkia ylh\u00e4\u00e4lt\u00e4 alasp\u00e4in eli s\u00e4hk\u00f6asemasta alasp\u00e4in */\r\n    select h1.location as h1_location   -- s\u00e4hk\u00f6asema\r\n         , h2.location as h2_location\r\n         , h3.location as h3_location\r\n         , h4.location as h4_location\r\n         , h5.location as h5_location\r\n         , h6.location as h6_location\r\n         , h7.location as h7_location\r\n         , h8.location as h8_location\r\n         , h9.location as h9_location\r\n         , h10.location as h10_location\r\n         , h11.location as h11_location\r\n         , h12.location as h12_location\r\n         , h13.location as h13_location\r\n         , h14.location as h14_location\r\n         , h15.location as h15_location -- alin mahdollinen laitepaikka, varauduttu 15:een tasoon\r\n    from {{ source('maximo', 'lochierarchy') }} h1\r\n    join {{ source('maximo', 'locations') }} l on l.location = h1.location\r\n    join {{ source('maximo', 'classstructure') }} c on c.CLASSSTRUCTUREID = l.CLASSSTRUCTUREID\r\n    left join {{ source('maximo', 'lochierarchy') }} h2 on h2.parent = h1.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h3 on h3.parent = h2.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h4 on h4.parent = h3.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h5 on h5.parent = h4.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h6 on h6.parent = h5.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h7 on h7.parent = h6.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h8 on h8.parent = h7.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h9 on h9.parent = h8.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h10 on h10.parent = h9.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h11 on h11.parent = h10.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h12 on h12.parent = h11.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h13 on h13.parent = h12.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h14 on h14.parent = h13.location\r\n    left join {{ source('maximo', 'lochierarchy') }} h15 on h15.parent = h14.location\r\n    --where c.cushierarchypath = 'ASEMA'\r\n    where h1.systemid = 'SA'\r\n)\r\n--select * from hierarchy\r\n,\r\nlocations as (\r\n\tselect coalesce(h15_location, h14_location, h13_location, h12_location, h11_location, h10_location, h9_location, h8_location, h7_location, h6_location, h5_location, h4_location, h3_location, h2_location, h1_location) as location\r\n  , h1_location as substation\r\n  , case\r\n        when h15_location is not null\r\n            then 15\r\n\t    when h14_location is not null\r\n\t\t    then 14\r\n        when h13_location is not null\r\n            then 13\r\n        when h12_location is not null\r\n            then 12\r\n        when h11_location is not null\r\n            then 11\r\n        when h10_location is not null\r\n            then 10\r\n        when h9_location is not null\r\n            then 9\r\n        when h8_location is not null\r\n            then 8\r\n        when h7_location is not null\r\n            then 7\r\n        when h6_location is not null\r\n            then 6\r\n        when h5_location is not null\r\n            then 5\r\n        when h4_location is not null\r\n            then 4 \r\n        when h3_location is not null\r\n            then 3 \r\n        when h2_location is not null\r\n            then 2 \r\n        when h1_location is not null\r\n            then 1\r\n    end as hierarchy_level\r\n\tfrom hierarchy\r\n)\r\n--select * from locations\r\n,\r\nattributes as (\r\nselect l.substation\r\n     , s.cusbusinessid as substation_cusbusinessid\r\n     , s.description as substation_name\r\n     , l.location\r\n     , l.hierarchy_level\r\n     , a.description\r\n     , a.type\r\n     , a.glaccount\r\n     , a.status\r\n     , a.cusworkarea\r\n     , a.cusvoltage\r\n     , a.cusbusinessid\r\n     , a.custoplocation\r\n     , a.cusowner\r\n     , a.rowstamp\r\n     , cls.classstructureid\r\n     , cls.cushierarchypath\r\n     , cls.description as classstructure_description\r\n     , case \r\n        when a.cusvoltage = '0,4' then coalesce(clsh.laiteryhma_luokka_0_4, clsh.laiteryhma_luokka, 'Muut')\r\n        else coalesce(clsh.laiteryhma_luokka, 'Muut') end as laitepaikkaryhma_luokka\r\n    , clsh.classificationid_0 as laitepaikkaryhma\r\n    , clsh.description_0 as laitepaikkaryhma_description\r\n    , clsh.classstructureid_0 as laitepaikkaryhma_classstructureid\r\n    , clsh.classificationid_1 as laitepaikka_aliryhma\r\n    , clsh.description_1 as laitepaikka_aliryhma_description\r\n    , clsh.classstructureid_1 as laitepaikka_aliryhma_classstructureid\r\nfrom locations l\r\njoin {{ source('maximo', 'locations') }} a on a.location = l.location\r\njoin {{ source('maximo', 'locations') }} s on s.location = l.substation\r\nleft join {{ source('maximo', 'classstructure') }} cls on a.classstructureid = cls.classstructureid\r\nleft join {{ ref( 'sa_laitepaikkaluokittelu') }} clsh on a.classstructureid = clsh.classstructureid\r\n)\r\nselect * from attributes    /* k\u00e4\u00e4nnet\u00e4\u00e4n hierarkiatasot sarakkeille */\r\npivot (\r\n    max(substation) as location\r\n  , max(substation_cusbusinessid) as cusbusinessid\r\n  , max(substation_name) as name\r\n    for hierarchy_level in (2 as level1, 3 as level2, 4 as level3, 5 as level4, 6 as level5, 7 as level6, 8 as level7, 9 as level8, /* 1. taso on location, joten tasosta 2 tulee varsinainen ensimm\u00e4inen hierarkiataso */\r\n        10 as level9, 11 as level10, 12 as level11, 13 as level12, 14 as level13, 15 as level14, 16 as level15)\r\n)", "language": "sql", "refs": [["sa_laitepaikkaluokittelu"]], "sources": [["maximo", "locations"], ["maximo", "classstructure"], ["maximo", "lochierarchy"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.locations", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.lochierarchy", "model.Fingrid.sa_laitepaikkaluokittelu"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_laitepaikka.sql", "compiled": true, "compiled_code": "with hierarchy as (     /* Puretaan hierarkia ylh\u00e4\u00e4lt\u00e4 alasp\u00e4in eli s\u00e4hk\u00f6asemasta alasp\u00e4in */\n    select h1.location as h1_location   -- s\u00e4hk\u00f6asema\n         , h2.location as h2_location\n         , h3.location as h3_location\n         , h4.location as h4_location\n         , h5.location as h5_location\n         , h6.location as h6_location\n         , h7.location as h7_location\n         , h8.location as h8_location\n         , h9.location as h9_location\n         , h10.location as h10_location\n         , h11.location as h11_location\n         , h12.location as h12_location\n         , h13.location as h13_location\n         , h14.location as h14_location\n         , h15.location as h15_location -- alin mahdollinen laitepaikka, varauduttu 15:een tasoon\n    from `clean_test`.`maximo`.`lochierarchy` h1\n    join `clean_test`.`maximo`.`locations` l on l.location = h1.location\n    join `clean_test`.`maximo`.`classstructure` c on c.CLASSSTRUCTUREID = l.CLASSSTRUCTUREID\n    left join `clean_test`.`maximo`.`lochierarchy` h2 on h2.parent = h1.location\n    left join `clean_test`.`maximo`.`lochierarchy` h3 on h3.parent = h2.location\n    left join `clean_test`.`maximo`.`lochierarchy` h4 on h4.parent = h3.location\n    left join `clean_test`.`maximo`.`lochierarchy` h5 on h5.parent = h4.location\n    left join `clean_test`.`maximo`.`lochierarchy` h6 on h6.parent = h5.location\n    left join `clean_test`.`maximo`.`lochierarchy` h7 on h7.parent = h6.location\n    left join `clean_test`.`maximo`.`lochierarchy` h8 on h8.parent = h7.location\n    left join `clean_test`.`maximo`.`lochierarchy` h9 on h9.parent = h8.location\n    left join `clean_test`.`maximo`.`lochierarchy` h10 on h10.parent = h9.location\n    left join `clean_test`.`maximo`.`lochierarchy` h11 on h11.parent = h10.location\n    left join `clean_test`.`maximo`.`lochierarchy` h12 on h12.parent = h11.location\n    left join `clean_test`.`maximo`.`lochierarchy` h13 on h13.parent = h12.location\n    left join `clean_test`.`maximo`.`lochierarchy` h14 on h14.parent = h13.location\n    left join `clean_test`.`maximo`.`lochierarchy` h15 on h15.parent = h14.location\n    --where c.cushierarchypath = 'ASEMA'\n    where h1.systemid = 'SA'\n)\n--select * from hierarchy\n,\nlocations as (\n\tselect coalesce(h15_location, h14_location, h13_location, h12_location, h11_location, h10_location, h9_location, h8_location, h7_location, h6_location, h5_location, h4_location, h3_location, h2_location, h1_location) as location\n  , h1_location as substation\n  , case\n        when h15_location is not null\n            then 15\n\t    when h14_location is not null\n\t\t    then 14\n        when h13_location is not null\n            then 13\n        when h12_location is not null\n            then 12\n        when h11_location is not null\n            then 11\n        when h10_location is not null\n            then 10\n        when h9_location is not null\n            then 9\n        when h8_location is not null\n            then 8\n        when h7_location is not null\n            then 7\n        when h6_location is not null\n            then 6\n        when h5_location is not null\n            then 5\n        when h4_location is not null\n            then 4 \n        when h3_location is not null\n            then 3 \n        when h2_location is not null\n            then 2 \n        when h1_location is not null\n            then 1\n    end as hierarchy_level\n\tfrom hierarchy\n)\n--select * from locations\n,\nattributes as (\nselect l.substation\n     , s.cusbusinessid as substation_cusbusinessid\n     , s.description as substation_name\n     , l.location\n     , l.hierarchy_level\n     , a.description\n     , a.type\n     , a.glaccount\n     , a.status\n     , a.cusworkarea\n     , a.cusvoltage\n     , a.cusbusinessid\n     , a.custoplocation\n     , a.cusowner\n     , a.rowstamp\n     , cls.classstructureid\n     , cls.cushierarchypath\n     , cls.description as classstructure_description\n     , case \n        when a.cusvoltage = '0,4' then coalesce(clsh.laiteryhma_luokka_0_4, clsh.laiteryhma_luokka, 'Muut')\n        else coalesce(clsh.laiteryhma_luokka, 'Muut') end as laitepaikkaryhma_luokka\n    , clsh.classificationid_0 as laitepaikkaryhma\n    , clsh.description_0 as laitepaikkaryhma_description\n    , clsh.classstructureid_0 as laitepaikkaryhma_classstructureid\n    , clsh.classificationid_1 as laitepaikka_aliryhma\n    , clsh.description_1 as laitepaikka_aliryhma_description\n    , clsh.classstructureid_1 as laitepaikka_aliryhma_classstructureid\nfrom locations l\njoin `clean_test`.`maximo`.`locations` a on a.location = l.location\njoin `clean_test`.`maximo`.`locations` s on s.location = l.substation\nleft join `clean_test`.`maximo`.`classstructure` cls on a.classstructureid = cls.classstructureid\nleft join `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`sa_laitepaikkaluokittelu` clsh on a.classstructureid = clsh.classstructureid\n)\nselect * from attributes    /* k\u00e4\u00e4nnet\u00e4\u00e4n hierarkiatasot sarakkeille */\npivot (\n    max(substation) as location\n  , max(substation_cusbusinessid) as cusbusinessid\n  , max(substation_name) as name\n    for hierarchy_level in (2 as level1, 3 as level2, 4 as level3, 5 as level4, 6 as level5, 7 as level6, 8 as level7, 9 as level8, /* 1. taso on location, joten tasosta 2 tulee varsinainen ensimm\u00e4inen hierarkiataso */\n        10 as level9, 11 as level10, 12 as level11, 13 as level12, 14 as level13, 15 as level14, 16 as level15)\n)", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_maadoituskytkin": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_maadoituskytkin", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_maadoituskytkin.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_maadoituskytkin.sql", "unique_id": "model.Fingrid.d_sa_maadoituskytkin", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_maadoituskytkin"], "alias": "d_sa_maadoituskytkin", "checksum": {"name": "sha256", "checksum": "55678b962424a87a04b38fb5465d792669c2784ddcd6783c79fca1dc5dd92c20"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.355971, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_maadoituskytkin`", "raw_code": "select\r\nA.ASSETNUM,\r\nA.ITEMNUM,\r\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE,\r\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\r\nmax(case when s.assetattrid = 'DCOND' then coalesce(s.numvalue,s.alnvalue) else null end) as DCOND_VALUE,\r\nmax(case when s.assetattrid = 'DCOND' then s.measureunitid else null end) as DCOND_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE,\r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE,\r\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE,\r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE,\r\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\r\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE,\r\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\r\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE,\r\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\r\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE,\r\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere upper(a.description) like '%MAADOITUSKYTKIN%'\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_maadoituskytkin.sql", "compiled": true, "compiled_code": "select\nA.ASSETNUM,\nA.ITEMNUM,\nmax(case when s.assetattrid = 'CNNCTR' then coalesce(s.numvalue,s.alnvalue) else null end) as CNNCTR_VALUE,\nmax(case when s.assetattrid = 'CNNCTR' then s.measureunitid else null end) as CNNCTR_UNITID,\nmax(case when s.assetattrid = 'DCOND' then coalesce(s.numvalue,s.alnvalue) else null end) as DCOND_VALUE,\nmax(case when s.assetattrid = 'DCOND' then s.measureunitid else null end) as DCOND_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE,\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE,\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE,\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE,\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\nmax(case when s.assetattrid = 'OPDEVS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPDEVS_VALUE,\nmax(case when s.assetattrid = 'OPDEVS' then s.measureunitid else null end) as OPDEVS_UNITID,\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE,\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE,\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere upper(a.description) like '%MAADOITUSKYTKIN%'\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_muuntaja": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_muuntaja", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_muuntaja.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_muuntaja.sql", "unique_id": "model.Fingrid.d_sa_muuntaja", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_muuntaja"], "alias": "d_sa_muuntaja", "checksum": {"name": "sha256", "checksum": "ba16f370583b9591f1836ca304456139c85d9425339cbfaafe3942d9641f9570"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.3589733, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_muuntaja`", "raw_code": "select\r\nA.ASSETNUM,\r\nA.ITEMNUM,\r\nmax(case when s.assetattrid = 'ACWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as ACWEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'ACWEIGHT' then s.measureunitid else null end) as ACWEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'ALARM' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_VALUE, \r\nmax(case when s.assetattrid = 'ALARM' then s.measureunitid else null end) as ALARM_UNITID,\r\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMMANUFACTOR_VALUE, \r\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then s.measureunitid else null end) as ALARMMANUFACTOR_UNITID,\r\nmax(case when s.assetattrid = 'ALARMTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMTYPE_VALUE, \r\nmax(case when s.assetattrid = 'ALARMTYPE' then s.measureunitid else null end) as ALARMTYPE_UNITID,\r\nmax(case when s.assetattrid = 'ALARM_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_PR_VALUE, \r\nmax(case when s.assetattrid = 'ALARM_PR' then s.measureunitid else null end) as ALARM_PR_UNITID,\r\nmax(case when s.assetattrid = 'AMOFOIL' then coalesce(s.numvalue,s.alnvalue) else null end) as AMOFOIL_VALUE, \r\nmax(case when s.assetattrid = 'AMOFOIL' then s.measureunitid else null end) as AMOFOIL_UNITID,\r\nmax(case when s.assetattrid = 'ANADIGI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANADIGI_VALUE, \r\nmax(case when s.assetattrid = 'ANADIGI' then s.measureunitid else null end) as ANADIGI_UNITID,\r\nmax(case when s.assetattrid = 'ANTURI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANTURI_VALUE, \r\nmax(case when s.assetattrid = 'ANTURI' then s.measureunitid else null end) as ANTURI_UNITID,\r\nmax(case when s.assetattrid = 'APPSTD' then coalesce(s.numvalue,s.alnvalue) else null end) as APPSTD_VALUE, \r\nmax(case when s.assetattrid = 'APPSTD' then s.measureunitid else null end) as APPSTD_UNITID,\r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\r\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \r\nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\r\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \r\nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\r\nmax(case when s.assetattrid = 'CAPACI' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACI_VALUE, \r\nmax(case when s.assetattrid = 'CAPACI' then s.measureunitid else null end) as CAPACI_UNITID,\r\nmax(case when s.assetattrid = 'CASINGC' then coalesce(s.numvalue,s.alnvalue) else null end) as CASINGC_VALUE, \r\nmax(case when s.assetattrid = 'CASINGC' then s.measureunitid else null end) as CASINGC_UNITID,\r\nmax(case when s.assetattrid = 'COOLING' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLING_VALUE, \r\nmax(case when s.assetattrid = 'COOLING' then s.measureunitid else null end) as COOLING_UNITID,\r\nmax(case when s.assetattrid = 'COOLW1' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLW1_VALUE, \r\nmax(case when s.assetattrid = 'COOLW1' then s.measureunitid else null end) as COOLW1_UNITID,\r\nmax(case when s.assetattrid = 'COOLW2' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLW2_VALUE, \r\nmax(case when s.assetattrid = 'COOLW2' then s.measureunitid else null end) as COOLW2_UNITID,\r\nmax(case when s.assetattrid = 'CURDEN' then coalesce(s.numvalue,s.alnvalue) else null end) as CURDEN_VALUE, \r\nmax(case when s.assetattrid = 'CURDEN' then s.measureunitid else null end) as CURDEN_UNITID,\r\nmax(case when s.assetattrid = 'CWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as CWEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'CWEIGHT' then s.measureunitid else null end) as CWEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'DBDS' then coalesce(s.numvalue,s.alnvalue) else null end) as DBDS_VALUE, \r\nmax(case when s.assetattrid = 'DBDS' then s.measureunitid else null end) as DBDS_UNITID,\r\nmax(case when s.assetattrid = 'DESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as DESCR_VALUE, \r\nmax(case when s.assetattrid = 'DESCR' then s.measureunitid else null end) as DESCR_UNITID,\r\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \r\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\r\nmax(case when s.assetattrid = 'DGENM' then coalesce(s.numvalue,s.alnvalue) else null end) as DGENM_VALUE, \r\nmax(case when s.assetattrid = 'DGENM' then s.measureunitid else null end) as DGENM_UNITID,\r\nmax(case when s.assetattrid = 'DGENP' then coalesce(s.numvalue,s.alnvalue) else null end) as DGENP_VALUE, \r\nmax(case when s.assetattrid = 'DGENP' then s.measureunitid else null end) as DGENP_UNITID,\r\nmax(case when s.assetattrid = 'DIAM_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as DIAM_NOM_VALUE, \r\nmax(case when s.assetattrid = 'DIAM_NOM' then s.measureunitid else null end) as DIAM_NOM_UNITID,\r\nmax(case when s.assetattrid = 'EX TILASSA' then coalesce(s.numvalue,s.alnvalue) else null end) as EX_TILASSA_VALUE, \r\nmax(case when s.assetattrid = 'EX TILASSA' then s.measureunitid else null end) as EX_TILASSA_UNITID,\r\nmax(case when s.assetattrid = 'FAULTTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as FAULTTYPE_VALUE, \r\nmax(case when s.assetattrid = 'FAULTTYPE' then s.measureunitid else null end) as FAULTTYPE_UNITID,\r\nmax(case when s.assetattrid = 'FILT_CAP' then coalesce(s.numvalue,s.alnvalue) else null end) as FILT_CAP_VALUE, \r\nmax(case when s.assetattrid = 'FILT_CAP' then s.measureunitid else null end) as FILT_CAP_UNITID,\r\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \r\nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\r\nmax(case when s.assetattrid = 'FLTBLMAT' then coalesce(s.numvalue,s.alnvalue) else null end) as FLTBLMAT_VALUE, \r\nmax(case when s.assetattrid = 'FLTBLMAT' then s.measureunitid else null end) as FLTBLMAT_UNITID,\r\nmax(case when s.assetattrid = 'FWVERSION' then coalesce(s.numvalue,s.alnvalue) else null end) as FWVERSION_VALUE, \r\nmax(case when s.assetattrid = 'FWVERSION' then s.measureunitid else null end) as FWVERSION_UNITID,\r\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \r\nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\r\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \r\nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\r\nmax(case when s.assetattrid = 'HKERROIN' then coalesce(s.numvalue,s.alnvalue) else null end) as HKERROIN_VALUE, \r\nmax(case when s.assetattrid = 'HKERROIN' then s.measureunitid else null end) as HKERROIN_UNITID,\r\nmax(case when s.assetattrid = 'HVLVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as HVLVSNOM_VALUE, \r\nmax(case when s.assetattrid = 'HVLVSNOM' then s.measureunitid else null end) as HVLVSNOM_UNITID,\r\nmax(case when s.assetattrid = 'HVMVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as HVMVSNOM_VALUE, \r\nmax(case when s.assetattrid = 'HVMVSNOM' then s.measureunitid else null end) as HVMVSNOM_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'IM_AGENT' then coalesce(s.numvalue,s.alnvalue) else null end) as IM_AGENT_VALUE, \r\nmax(case when s.assetattrid = 'IM_AGENT' then s.measureunitid else null end) as IM_AGENT_UNITID,\r\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE, \r\nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\r\nmax(case when s.assetattrid = 'INSLEVEL' then coalesce(s.numvalue,s.alnvalue) else null end) as INSLEVEL_VALUE, \r\nmax(case when s.assetattrid = 'INSLEVEL' then s.measureunitid else null end) as INSLEVEL_UNITID,\r\nmax(case when s.assetattrid = 'INTERM' then coalesce(s.numvalue,s.alnvalue) else null end) as INTERM_VALUE, \r\nmax(case when s.assetattrid = 'INTERM' then s.measureunitid else null end) as INTERM_UNITID,\r\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \r\nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'JOINT' then coalesce(s.numvalue,s.alnvalue) else null end) as JOINT_VALUE, \r\nmax(case when s.assetattrid = 'JOINT' then s.measureunitid else null end) as JOINT_UNITID,\r\nmax(case when s.assetattrid = 'K11' then coalesce(s.numvalue,s.alnvalue) else null end) as K11_VALUE, \r\nmax(case when s.assetattrid = 'K11' then s.measureunitid else null end) as K11_UNITID,\r\nmax(case when s.assetattrid = 'K21' then coalesce(s.numvalue,s.alnvalue) else null end) as K21_VALUE, \r\nmax(case when s.assetattrid = 'K21' then s.measureunitid else null end) as K21_UNITID,\r\nmax(case when s.assetattrid = 'K22' then coalesce(s.numvalue,s.alnvalue) else null end) as K22_VALUE, \r\nmax(case when s.assetattrid = 'K22' then s.measureunitid else null end) as K22_UNITID,\r\nmax(case when s.assetattrid = 'KOALISAATTORI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOALISAATTORI_VALUE, \r\nmax(case when s.assetattrid = 'KOALISAATTORI' then s.measureunitid else null end) as KOALISAATTORI_UNITID,\r\nmax(case when s.assetattrid = 'KOMMENTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOMMENTTI_VALUE, \r\nmax(case when s.assetattrid = 'KOMMENTTI' then s.measureunitid else null end) as KOMMENTTI_UNITID,\r\nmax(case when s.assetattrid = 'LENGTH' then coalesce(s.numvalue,s.alnvalue) else null end) as LENGTH_VALUE, \r\nmax(case when s.assetattrid = 'LENGTH' then s.measureunitid else null end) as LENGTH_UNITID,\r\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \r\nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\r\nmax(case when s.assetattrid = 'MAALIITIN' then coalesce(s.numvalue,s.alnvalue) else null end) as MAALIITIN_VALUE, \r\nmax(case when s.assetattrid = 'MAALIITIN' then s.measureunitid else null end) as MAALIITIN_UNITID,\r\nmax(case when s.assetattrid = 'MACADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as MACADDR_VALUE, \r\nmax(case when s.assetattrid = 'MACADDR' then s.measureunitid else null end) as MACADDR_UNITID,\r\nmax(case when s.assetattrid = 'MATER' then coalesce(s.numvalue,s.alnvalue) else null end) as MATER_VALUE, \r\nmax(case when s.assetattrid = 'MATER' then s.measureunitid else null end) as MATER_UNITID,\r\nmax(case when s.assetattrid = 'MATERIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as MATERIAL_VALUE, \r\nmax(case when s.assetattrid = 'MATERIAL' then s.measureunitid else null end) as MATERIAL_UNITID,\r\nmax(case when s.assetattrid = 'MAXFLOW' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxFLOW_VALUE, \r\nmax(case when s.assetattrid = 'MAXFLOW' then s.measureunitid else null end) asmaxFLOW_UNITID,\r\nmax(case when s.assetattrid = 'MAXOPPR' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxOPPR_VALUE, \r\nmax(case when s.assetattrid = 'MAXOPPR' then s.measureunitid else null end) asmaxOPPR_UNITID,\r\nmax(case when s.assetattrid = 'MAX_PR' then coalesce(s.numvalue,s.alnvalue) else null end) asmax_PR_VALUE, \r\nmax(case when s.assetattrid = 'MAX_PR' then s.measureunitid else null end) asmax_PR_UNITID,\r\nmax(case when s.assetattrid = 'MEDDESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as MEDDESCR_VALUE, \r\nmax(case when s.assetattrid = 'MEDDESCR' then s.measureunitid else null end) as MEDDESCR_UNITID,\r\nmax(case when s.assetattrid = 'MEKKUORM' then coalesce(s.numvalue,s.alnvalue) else null end) as MEKKUORM_VALUE, \r\nmax(case when s.assetattrid = 'MEKKUORM' then s.measureunitid else null end) as MEKKUORM_UNITID,\r\nmax(case when s.assetattrid = 'MIN_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_PR_VALUE, \r\nmax(case when s.assetattrid = 'MIN_PR' then s.measureunitid else null end) as MIN_PR_UNITID,\r\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \r\nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\r\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \r\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\r\nmax(case when s.assetattrid = 'MVLVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as MVLVSNOM_VALUE, \r\nmax(case when s.assetattrid = 'MVLVSNOM' then s.measureunitid else null end) as MVLVSNOM_UNITID,\r\nmax(case when s.assetattrid = 'NBOFCORELIMBS' then coalesce(s.numvalue,s.alnvalue) else null end) as NBOFCORELIMBS_VALUE, \r\nmax(case when s.assetattrid = 'NBOFCORELIMBS' then s.measureunitid else null end) as NBOFCORELIMBS_UNITID,\r\nmax(case when s.assetattrid = 'OILDESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as OILDESCR_VALUE, \r\nmax(case when s.assetattrid = 'OILDESCR' then s.measureunitid else null end) as OILDESCR_UNITID,\r\nmax(case when s.assetattrid = 'OILMAX' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMAX_VALUE, \r\nmax(case when s.assetattrid = 'OILMAX' then s.measureunitid else null end) as OILMAX_UNITID,\r\nmax(case when s.assetattrid = 'OIL_AM' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AM_VALUE, \r\nmax(case when s.assetattrid = 'OIL_AM' then s.measureunitid else null end) as OIL_AM_UNITID,\r\nmax(case when s.assetattrid = 'OIL_AVE' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AVE_VALUE, \r\nmax(case when s.assetattrid = 'OIL_AVE' then s.measureunitid else null end) as OIL_AVE_UNITID,\r\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE, \r\nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\r\nmax(case when s.assetattrid = 'OPEN_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as OPEN_PR_VALUE, \r\nmax(case when s.assetattrid = 'OPEN_PR' then s.measureunitid else null end) as OPEN_PR_UNITID,\r\nmax(case when s.assetattrid = 'OPER' then coalesce(s.numvalue,s.alnvalue) else null end) as OPER_VALUE, \r\nmax(case when s.assetattrid = 'OPER' then s.measureunitid else null end) as OPER_UNITID,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \r\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\r\nmax(case when s.assetattrid = 'OUTPUT' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTPUT_VALUE, \r\nmax(case when s.assetattrid = 'OUTPUT' then s.measureunitid else null end) as OUTPUT_UNITID,\r\nmax(case when s.assetattrid = 'P0' then coalesce(s.numvalue,s.alnvalue) else null end) as P0_VALUE, \r\nmax(case when s.assetattrid = 'P0' then s.measureunitid else null end) as P0_UNITID,\r\nmax(case when s.assetattrid = 'PIPE' then coalesce(s.numvalue,s.alnvalue) else null end) as PIPE_VALUE, \r\nmax(case when s.assetattrid = 'PIPE' then s.measureunitid else null end) as PIPE_UNITID,\r\nmax(case when s.assetattrid = 'PJ' then coalesce(s.numvalue,s.alnvalue) else null end) as PJ_VALUE, \r\nmax(case when s.assetattrid = 'PJ' then s.measureunitid else null end) as PJ_UNITID,\r\nmax(case when s.assetattrid = 'PK' then coalesce(s.numvalue,s.alnvalue) else null end) as PK_VALUE, \r\nmax(case when s.assetattrid = 'PK' then s.measureunitid else null end) as PK_UNITID,\r\nmax(case when s.assetattrid = 'POS1' then coalesce(s.numvalue,s.alnvalue) else null end) as POS1_VALUE, \r\nmax(case when s.assetattrid = 'POS1' then s.measureunitid else null end) as POS1_UNITID,\r\nmax(case when s.assetattrid = 'POS2' then coalesce(s.numvalue,s.alnvalue) else null end) as POS2_VALUE, \r\nmax(case when s.assetattrid = 'POS2' then s.measureunitid else null end) as POS2_UNITID,\r\nmax(case when s.assetattrid = 'POS3' then coalesce(s.numvalue,s.alnvalue) else null end) as POS3_VALUE, \r\nmax(case when s.assetattrid = 'POS3' then s.measureunitid else null end) as POS3_UNITID,\r\nmax(case when s.assetattrid = 'PRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as PRESS_VALUE, \r\nmax(case when s.assetattrid = 'PRESS' then s.measureunitid else null end) as PRESS_UNITID,\r\nmax(case when s.assetattrid = 'PRNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as PRNOM_VALUE, \r\nmax(case when s.assetattrid = 'PRNOM' then s.measureunitid else null end) as PRNOM_UNITID,\r\nmax(case when s.assetattrid = 'PROSCSUBS' then coalesce(s.numvalue,s.alnvalue) else null end) as PROSCSUBS_VALUE, \r\nmax(case when s.assetattrid = 'PROSCSUBS' then s.measureunitid else null end) as PROSCSUBS_UNITID,\r\nmax(case when s.assetattrid = 'PR_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as PR_NOM_VALUE, \r\nmax(case when s.assetattrid = 'PR_NOM' then s.measureunitid else null end) as PR_NOM_UNITID,\r\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \r\nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\r\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \r\nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\r\nmax(case when s.assetattrid = 'RK' then coalesce(s.numvalue,s.alnvalue) else null end) as RK_VALUE, \r\nmax(case when s.assetattrid = 'RK' then s.measureunitid else null end) as RK_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV1_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_LV1' then s.measureunitid else null end) as RKHV_LV1_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV2_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_LV2' then s.measureunitid else null end) as RKHV_LV2_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV3_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_LV3' then s.measureunitid else null end) as RKHV_LV3_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_MV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV1_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_MV1' then s.measureunitid else null end) as RKHV_MV1_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_MV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV2_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_MV2' then s.measureunitid else null end) as RKHV_MV2_UNITID,\r\nmax(case when s.assetattrid = 'RKHV_MV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV3_VALUE, \r\nmax(case when s.assetattrid = 'RKHV_MV3' then s.measureunitid else null end) as RKHV_MV3_UNITID,\r\nmax(case when s.assetattrid = 'RKMV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV1_VALUE, \r\nmax(case when s.assetattrid = 'RKMV_LV1' then s.measureunitid else null end) as RKMV_LV1_UNITID,\r\nmax(case when s.assetattrid = 'RKMV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV2_VALUE, \r\nmax(case when s.assetattrid = 'RKMV_LV2' then s.measureunitid else null end) as RKMV_LV2_UNITID,\r\nmax(case when s.assetattrid = 'RKMV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV3_VALUE, \r\nmax(case when s.assetattrid = 'RKMV_LV3' then s.measureunitid else null end) as RKMV_LV3_UNITID,\r\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \r\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\r\nmax(case when s.assetattrid = 'S0' then coalesce(s.numvalue,s.alnvalue) else null end) as S0_VALUE, \r\nmax(case when s.assetattrid = 'S0' then s.measureunitid else null end) as S0_UNITID,\r\nmax(case when s.assetattrid = 'SCALING' then coalesce(s.numvalue,s.alnvalue) else null end) as SCALING_VALUE, \r\nmax(case when s.assetattrid = 'SCALING' then s.measureunitid else null end) as SCALING_UNITID,\r\nmax(case when s.assetattrid = 'SF6INFPR' then coalesce(s.numvalue,s.alnvalue) else null end) as SF6INFPR_VALUE, \r\nmax(case when s.assetattrid = 'SF6INFPR' then s.measureunitid else null end) as SF6INFPR_UNITID,\r\nmax(case when s.assetattrid = 'SNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as SNOM_VALUE, \r\nmax(case when s.assetattrid = 'SNOM' then s.measureunitid else null end) as SNOM_UNITID,\r\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \r\nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\r\nmax(case when s.assetattrid = 'SULKIJA' then coalesce(s.numvalue,s.alnvalue) else null end) as SULKIJA_VALUE, \r\nmax(case when s.assetattrid = 'SULKIJA' then s.measureunitid else null end) as SULKIJA_UNITID,\r\nmax(case when s.assetattrid = 'SUOJAUSLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as SUOJAUSLUOKKA_VALUE, \r\nmax(case when s.assetattrid = 'SUOJAUSLUOKKA' then s.measureunitid else null end) as SUOJAUSLUOKKA_UNITID,\r\nmax(case when s.assetattrid = 'TEHOLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TEHOLUOKKA_VALUE, \r\nmax(case when s.assetattrid = 'TEHOLUOKKA' then s.measureunitid else null end) as TEHOLUOKKA_UNITID,\r\nmax(case when s.assetattrid = 'TEMP_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as TEMP_NOM_VALUE, \r\nmax(case when s.assetattrid = 'TEMP_NOM' then s.measureunitid else null end) as TEMP_NOM_UNITID,\r\nmax(case when s.assetattrid = 'TERMDESC' then coalesce(s.numvalue,s.alnvalue) else null end) as TERMDESC_VALUE, \r\nmax(case when s.assetattrid = 'TERMDESC' then s.measureunitid else null end) as TERMDESC_UNITID,\r\nmax(case when s.assetattrid = 'TILALUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TILALUOKKA_VALUE, \r\nmax(case when s.assetattrid = 'TILALUOKKA' then s.measureunitid else null end) as TILALUOKKA_UNITID,\r\nmax(case when s.assetattrid = 'TODISTUKSET' then coalesce(s.numvalue,s.alnvalue) else null end) as TODISTUKSET_VALUE, \r\nmax(case when s.assetattrid = 'TODISTUKSET' then s.measureunitid else null end) as TODISTUKSET_UNITID,\r\nmax(case when s.assetattrid = 'TRWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as TRWEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'TRWEIGHT' then s.measureunitid else null end) as TRWEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'TYPEREF' then coalesce(s.numvalue,s.alnvalue) else null end) as TYPEREF_VALUE, \r\nmax(case when s.assetattrid = 'TYPEREF' then s.measureunitid else null end) as TYPEREF_UNITID,\r\nmax(case when s.assetattrid = 'TYPETEST' then coalesce(s.numvalue,s.alnvalue) else null end) as TYPETEST_VALUE, \r\nmax(case when s.assetattrid = 'TYPETEST' then s.measureunitid else null end) as TYPETEST_UNITID,\r\nmax(case when s.assetattrid = 'T_OIL_R' then coalesce(s.numvalue,s.alnvalue) else null end) as T_OIL_R_VALUE, \r\nmax(case when s.assetattrid = 'T_OIL_R' then s.measureunitid else null end) as T_OIL_R_UNITID,\r\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE, \r\nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\r\nmax(case when s.assetattrid = 'UNOMHV' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOMHV_VALUE, \r\nmax(case when s.assetattrid = 'UNOMHV' then s.measureunitid else null end) as UNOMHV_UNITID,\r\nmax(case when s.assetattrid = 'UNOMMV' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOMMV_VALUE, \r\nmax(case when s.assetattrid = 'UNOMMV' then s.measureunitid else null end) as UNOMMV_UNITID,\r\nmax(case when s.assetattrid = 'VAIHELIITIN' then coalesce(s.numvalue,s.alnvalue) else null end) as VAIHELIITIN_VALUE, \r\nmax(case when s.assetattrid = 'VAIHELIITIN' then s.measureunitid else null end) as VAIHELIITIN_UNITID,\r\nmax(case when s.assetattrid = 'VECTORG' then coalesce(s.numvalue,s.alnvalue) else null end) as VECTORG_VALUE, \r\nmax(case when s.assetattrid = 'VECTORG' then s.measureunitid else null end) as VECTORG_UNITID,\r\nmax(case when s.assetattrid = 'VOL' then coalesce(s.numvalue,s.alnvalue) else null end) as VOL_VALUE, \r\nmax(case when s.assetattrid = 'VOL' then s.measureunitid else null end) as VOL_UNITID,\r\nmax(case when s.assetattrid = 'VOLT_OUT' then coalesce(s.numvalue,s.alnvalue) else null end) as VOLT_OUT_VALUE, \r\nmax(case when s.assetattrid = 'VOLT_OUT' then s.measureunitid else null end) as VOLT_OUT_UNITID,\r\nmax(case when s.assetattrid = 'VTOTGAS' then coalesce(s.numvalue,s.alnvalue) else null end) as VTOTGAS_VALUE, \r\nmax(case when s.assetattrid = 'VTOTGAS' then s.measureunitid else null end) as VTOTGAS_UNITID,\r\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'W-O_AVE' then coalesce(s.numvalue,s.alnvalue) else null end) as W_O_AVE_VALUE, \r\nmax(case when s.assetattrid = 'W-O_AVE' then s.measureunitid else null end) as W_O_AVE_UNITID,\r\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE, \r\nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID,\r\nmax(case when s.assetattrid = 'X_EXP' then coalesce(s.numvalue,s.alnvalue) else null end) as X_EXP_VALUE, \r\nmax(case when s.assetattrid = 'X_EXP' then s.measureunitid else null end) as X_EXP_UNITID,\r\nmax(case when s.assetattrid = 'Y_EXP' then coalesce(s.numvalue,s.alnvalue) else null end) as Y_EXP_VALUE, \r\nmax(case when s.assetattrid = 'Y_EXP' then s.measureunitid else null end) as Y_EXP_UNITID,\r\nmax(case when s.assetattrid = 'ZK' then coalesce(s.numvalue,s.alnvalue) else null end) as ZK_VALUE, \r\nmax(case when s.assetattrid = 'ZK' then s.measureunitid else null end) as ZK_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV1_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_LV1' then s.measureunitid else null end) as ZKHV_LV1_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV2_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_LV2' then s.measureunitid else null end) as ZKHV_LV2_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV3_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_LV3' then s.measureunitid else null end) as ZKHV_LV3_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_MV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV1_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_MV1' then s.measureunitid else null end) as ZKHV_MV1_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_MV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV2_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_MV2' then s.measureunitid else null end) as ZKHV_MV2_UNITID,\r\nmax(case when s.assetattrid = 'ZKHV_MV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV3_VALUE, \r\nmax(case when s.assetattrid = 'ZKHV_MV3' then s.measureunitid else null end) as ZKHV_MV3_UNITID,\r\nmax(case when s.assetattrid = 'ZKMV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV1_VALUE, \r\nmax(case when s.assetattrid = 'ZKMV_LV1' then s.measureunitid else null end) as ZKMV_LV1_UNITID,\r\nmax(case when s.assetattrid = 'ZKMV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV2_VALUE, \r\nmax(case when s.assetattrid = 'ZKMV_LV2' then s.measureunitid else null end) as ZKMV_LV2_UNITID,\r\nmax(case when s.assetattrid = 'ZKMV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV3_VALUE, \r\nmax(case when s.assetattrid = 'ZKMV_LV3' then s.measureunitid else null end) as ZKMV_LV3_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere upper(a.description) like '%MUUNTAJA%' \r\n\t\t\tand upper(description) not like '%VIRTAMUUNTAJA%' \r\n\t\t\tand upper(description) not like '%J\u00c4NNITEMUUNTAJA%'\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_muuntaja.sql", "compiled": true, "compiled_code": "select\nA.ASSETNUM,\nA.ITEMNUM,\nmax(case when s.assetattrid = 'ACWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as ACWEIGHT_VALUE, \nmax(case when s.assetattrid = 'ACWEIGHT' then s.measureunitid else null end) as ACWEIGHT_UNITID,\nmax(case when s.assetattrid = 'ALARM' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_VALUE, \nmax(case when s.assetattrid = 'ALARM' then s.measureunitid else null end) as ALARM_UNITID,\nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMMANUFACTOR_VALUE, \nmax(case when s.assetattrid = 'ALARMMANUFACTOR' then s.measureunitid else null end) as ALARMMANUFACTOR_UNITID,\nmax(case when s.assetattrid = 'ALARMTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARMTYPE_VALUE, \nmax(case when s.assetattrid = 'ALARMTYPE' then s.measureunitid else null end) as ALARMTYPE_UNITID,\nmax(case when s.assetattrid = 'ALARM_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as ALARM_PR_VALUE, \nmax(case when s.assetattrid = 'ALARM_PR' then s.measureunitid else null end) as ALARM_PR_UNITID,\nmax(case when s.assetattrid = 'AMOFOIL' then coalesce(s.numvalue,s.alnvalue) else null end) as AMOFOIL_VALUE, \nmax(case when s.assetattrid = 'AMOFOIL' then s.measureunitid else null end) as AMOFOIL_UNITID,\nmax(case when s.assetattrid = 'ANADIGI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANADIGI_VALUE, \nmax(case when s.assetattrid = 'ANADIGI' then s.measureunitid else null end) as ANADIGI_UNITID,\nmax(case when s.assetattrid = 'ANTURI' then coalesce(s.numvalue,s.alnvalue) else null end) as ANTURI_VALUE, \nmax(case when s.assetattrid = 'ANTURI' then s.measureunitid else null end) as ANTURI_UNITID,\nmax(case when s.assetattrid = 'APPSTD' then coalesce(s.numvalue,s.alnvalue) else null end) as APPSTD_VALUE, \nmax(case when s.assetattrid = 'APPSTD' then s.measureunitid else null end) as APPSTD_UNITID,\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\nmax(case when s.assetattrid = 'CAPACI' then coalesce(s.numvalue,s.alnvalue) else null end) as CAPACI_VALUE, \nmax(case when s.assetattrid = 'CAPACI' then s.measureunitid else null end) as CAPACI_UNITID,\nmax(case when s.assetattrid = 'CASINGC' then coalesce(s.numvalue,s.alnvalue) else null end) as CASINGC_VALUE, \nmax(case when s.assetattrid = 'CASINGC' then s.measureunitid else null end) as CASINGC_UNITID,\nmax(case when s.assetattrid = 'COOLING' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLING_VALUE, \nmax(case when s.assetattrid = 'COOLING' then s.measureunitid else null end) as COOLING_UNITID,\nmax(case when s.assetattrid = 'COOLW1' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLW1_VALUE, \nmax(case when s.assetattrid = 'COOLW1' then s.measureunitid else null end) as COOLW1_UNITID,\nmax(case when s.assetattrid = 'COOLW2' then coalesce(s.numvalue,s.alnvalue) else null end) as COOLW2_VALUE, \nmax(case when s.assetattrid = 'COOLW2' then s.measureunitid else null end) as COOLW2_UNITID,\nmax(case when s.assetattrid = 'CURDEN' then coalesce(s.numvalue,s.alnvalue) else null end) as CURDEN_VALUE, \nmax(case when s.assetattrid = 'CURDEN' then s.measureunitid else null end) as CURDEN_UNITID,\nmax(case when s.assetattrid = 'CWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as CWEIGHT_VALUE, \nmax(case when s.assetattrid = 'CWEIGHT' then s.measureunitid else null end) as CWEIGHT_UNITID,\nmax(case when s.assetattrid = 'DBDS' then coalesce(s.numvalue,s.alnvalue) else null end) as DBDS_VALUE, \nmax(case when s.assetattrid = 'DBDS' then s.measureunitid else null end) as DBDS_UNITID,\nmax(case when s.assetattrid = 'DESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as DESCR_VALUE, \nmax(case when s.assetattrid = 'DESCR' then s.measureunitid else null end) as DESCR_UNITID,\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\nmax(case when s.assetattrid = 'DGENM' then coalesce(s.numvalue,s.alnvalue) else null end) as DGENM_VALUE, \nmax(case when s.assetattrid = 'DGENM' then s.measureunitid else null end) as DGENM_UNITID,\nmax(case when s.assetattrid = 'DGENP' then coalesce(s.numvalue,s.alnvalue) else null end) as DGENP_VALUE, \nmax(case when s.assetattrid = 'DGENP' then s.measureunitid else null end) as DGENP_UNITID,\nmax(case when s.assetattrid = 'DIAM_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as DIAM_NOM_VALUE, \nmax(case when s.assetattrid = 'DIAM_NOM' then s.measureunitid else null end) as DIAM_NOM_UNITID,\nmax(case when s.assetattrid = 'EX TILASSA' then coalesce(s.numvalue,s.alnvalue) else null end) as EX_TILASSA_VALUE, \nmax(case when s.assetattrid = 'EX TILASSA' then s.measureunitid else null end) as EX_TILASSA_UNITID,\nmax(case when s.assetattrid = 'FAULTTYPE' then coalesce(s.numvalue,s.alnvalue) else null end) as FAULTTYPE_VALUE, \nmax(case when s.assetattrid = 'FAULTTYPE' then s.measureunitid else null end) as FAULTTYPE_UNITID,\nmax(case when s.assetattrid = 'FILT_CAP' then coalesce(s.numvalue,s.alnvalue) else null end) as FILT_CAP_VALUE, \nmax(case when s.assetattrid = 'FILT_CAP' then s.measureunitid else null end) as FILT_CAP_UNITID,\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\nmax(case when s.assetattrid = 'FLTBLMAT' then coalesce(s.numvalue,s.alnvalue) else null end) as FLTBLMAT_VALUE, \nmax(case when s.assetattrid = 'FLTBLMAT' then s.measureunitid else null end) as FLTBLMAT_UNITID,\nmax(case when s.assetattrid = 'FWVERSION' then coalesce(s.numvalue,s.alnvalue) else null end) as FWVERSION_VALUE, \nmax(case when s.assetattrid = 'FWVERSION' then s.measureunitid else null end) as FWVERSION_UNITID,\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\nmax(case when s.assetattrid = 'HKERROIN' then coalesce(s.numvalue,s.alnvalue) else null end) as HKERROIN_VALUE, \nmax(case when s.assetattrid = 'HKERROIN' then s.measureunitid else null end) as HKERROIN_UNITID,\nmax(case when s.assetattrid = 'HVLVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as HVLVSNOM_VALUE, \nmax(case when s.assetattrid = 'HVLVSNOM' then s.measureunitid else null end) as HVLVSNOM_UNITID,\nmax(case when s.assetattrid = 'HVMVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as HVMVSNOM_VALUE, \nmax(case when s.assetattrid = 'HVMVSNOM' then s.measureunitid else null end) as HVMVSNOM_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'IM_AGENT' then coalesce(s.numvalue,s.alnvalue) else null end) as IM_AGENT_VALUE, \nmax(case when s.assetattrid = 'IM_AGENT' then s.measureunitid else null end) as IM_AGENT_UNITID,\nmax(case when s.assetattrid = 'INOM' then coalesce(s.numvalue,s.alnvalue) else null end) as INOM_VALUE, \nmax(case when s.assetattrid = 'INOM' then s.measureunitid else null end) as INOM_UNITID,\nmax(case when s.assetattrid = 'INSLEVEL' then coalesce(s.numvalue,s.alnvalue) else null end) as INSLEVEL_VALUE, \nmax(case when s.assetattrid = 'INSLEVEL' then s.measureunitid else null end) as INSLEVEL_UNITID,\nmax(case when s.assetattrid = 'INTERM' then coalesce(s.numvalue,s.alnvalue) else null end) as INTERM_VALUE, \nmax(case when s.assetattrid = 'INTERM' then s.measureunitid else null end) as INTERM_UNITID,\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'JOINT' then coalesce(s.numvalue,s.alnvalue) else null end) as JOINT_VALUE, \nmax(case when s.assetattrid = 'JOINT' then s.measureunitid else null end) as JOINT_UNITID,\nmax(case when s.assetattrid = 'K11' then coalesce(s.numvalue,s.alnvalue) else null end) as K11_VALUE, \nmax(case when s.assetattrid = 'K11' then s.measureunitid else null end) as K11_UNITID,\nmax(case when s.assetattrid = 'K21' then coalesce(s.numvalue,s.alnvalue) else null end) as K21_VALUE, \nmax(case when s.assetattrid = 'K21' then s.measureunitid else null end) as K21_UNITID,\nmax(case when s.assetattrid = 'K22' then coalesce(s.numvalue,s.alnvalue) else null end) as K22_VALUE, \nmax(case when s.assetattrid = 'K22' then s.measureunitid else null end) as K22_UNITID,\nmax(case when s.assetattrid = 'KOALISAATTORI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOALISAATTORI_VALUE, \nmax(case when s.assetattrid = 'KOALISAATTORI' then s.measureunitid else null end) as KOALISAATTORI_UNITID,\nmax(case when s.assetattrid = 'KOMMENTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as KOMMENTTI_VALUE, \nmax(case when s.assetattrid = 'KOMMENTTI' then s.measureunitid else null end) as KOMMENTTI_UNITID,\nmax(case when s.assetattrid = 'LENGTH' then coalesce(s.numvalue,s.alnvalue) else null end) as LENGTH_VALUE, \nmax(case when s.assetattrid = 'LENGTH' then s.measureunitid else null end) as LENGTH_UNITID,\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\nmax(case when s.assetattrid = 'MAALIITIN' then coalesce(s.numvalue,s.alnvalue) else null end) as MAALIITIN_VALUE, \nmax(case when s.assetattrid = 'MAALIITIN' then s.measureunitid else null end) as MAALIITIN_UNITID,\nmax(case when s.assetattrid = 'MACADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as MACADDR_VALUE, \nmax(case when s.assetattrid = 'MACADDR' then s.measureunitid else null end) as MACADDR_UNITID,\nmax(case when s.assetattrid = 'MATER' then coalesce(s.numvalue,s.alnvalue) else null end) as MATER_VALUE, \nmax(case when s.assetattrid = 'MATER' then s.measureunitid else null end) as MATER_UNITID,\nmax(case when s.assetattrid = 'MATERIAL' then coalesce(s.numvalue,s.alnvalue) else null end) as MATERIAL_VALUE, \nmax(case when s.assetattrid = 'MATERIAL' then s.measureunitid else null end) as MATERIAL_UNITID,\nmax(case when s.assetattrid = 'MAXFLOW' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxFLOW_VALUE, \nmax(case when s.assetattrid = 'MAXFLOW' then s.measureunitid else null end) asmaxFLOW_UNITID,\nmax(case when s.assetattrid = 'MAXOPPR' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxOPPR_VALUE, \nmax(case when s.assetattrid = 'MAXOPPR' then s.measureunitid else null end) asmaxOPPR_UNITID,\nmax(case when s.assetattrid = 'MAX_PR' then coalesce(s.numvalue,s.alnvalue) else null end) asmax_PR_VALUE, \nmax(case when s.assetattrid = 'MAX_PR' then s.measureunitid else null end) asmax_PR_UNITID,\nmax(case when s.assetattrid = 'MEDDESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as MEDDESCR_VALUE, \nmax(case when s.assetattrid = 'MEDDESCR' then s.measureunitid else null end) as MEDDESCR_UNITID,\nmax(case when s.assetattrid = 'MEKKUORM' then coalesce(s.numvalue,s.alnvalue) else null end) as MEKKUORM_VALUE, \nmax(case when s.assetattrid = 'MEKKUORM' then s.measureunitid else null end) as MEKKUORM_UNITID,\nmax(case when s.assetattrid = 'MIN_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as MIN_PR_VALUE, \nmax(case when s.assetattrid = 'MIN_PR' then s.measureunitid else null end) as MIN_PR_UNITID,\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\nmax(case when s.assetattrid = 'MVLVSNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as MVLVSNOM_VALUE, \nmax(case when s.assetattrid = 'MVLVSNOM' then s.measureunitid else null end) as MVLVSNOM_UNITID,\nmax(case when s.assetattrid = 'NBOFCORELIMBS' then coalesce(s.numvalue,s.alnvalue) else null end) as NBOFCORELIMBS_VALUE, \nmax(case when s.assetattrid = 'NBOFCORELIMBS' then s.measureunitid else null end) as NBOFCORELIMBS_UNITID,\nmax(case when s.assetattrid = 'OILDESCR' then coalesce(s.numvalue,s.alnvalue) else null end) as OILDESCR_VALUE, \nmax(case when s.assetattrid = 'OILDESCR' then s.measureunitid else null end) as OILDESCR_UNITID,\nmax(case when s.assetattrid = 'OILMAX' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMAX_VALUE, \nmax(case when s.assetattrid = 'OILMAX' then s.measureunitid else null end) as OILMAX_UNITID,\nmax(case when s.assetattrid = 'OIL_AM' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AM_VALUE, \nmax(case when s.assetattrid = 'OIL_AM' then s.measureunitid else null end) as OIL_AM_UNITID,\nmax(case when s.assetattrid = 'OIL_AVE' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_AVE_VALUE, \nmax(case when s.assetattrid = 'OIL_AVE' then s.measureunitid else null end) as OIL_AVE_UNITID,\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE, \nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\nmax(case when s.assetattrid = 'OPEN_PR' then coalesce(s.numvalue,s.alnvalue) else null end) as OPEN_PR_VALUE, \nmax(case when s.assetattrid = 'OPEN_PR' then s.measureunitid else null end) as OPEN_PR_UNITID,\nmax(case when s.assetattrid = 'OPER' then coalesce(s.numvalue,s.alnvalue) else null end) as OPER_VALUE, \nmax(case when s.assetattrid = 'OPER' then s.measureunitid else null end) as OPER_UNITID,\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\nmax(case when s.assetattrid = 'OUTPUT' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTPUT_VALUE, \nmax(case when s.assetattrid = 'OUTPUT' then s.measureunitid else null end) as OUTPUT_UNITID,\nmax(case when s.assetattrid = 'P0' then coalesce(s.numvalue,s.alnvalue) else null end) as P0_VALUE, \nmax(case when s.assetattrid = 'P0' then s.measureunitid else null end) as P0_UNITID,\nmax(case when s.assetattrid = 'PIPE' then coalesce(s.numvalue,s.alnvalue) else null end) as PIPE_VALUE, \nmax(case when s.assetattrid = 'PIPE' then s.measureunitid else null end) as PIPE_UNITID,\nmax(case when s.assetattrid = 'PJ' then coalesce(s.numvalue,s.alnvalue) else null end) as PJ_VALUE, \nmax(case when s.assetattrid = 'PJ' then s.measureunitid else null end) as PJ_UNITID,\nmax(case when s.assetattrid = 'PK' then coalesce(s.numvalue,s.alnvalue) else null end) as PK_VALUE, \nmax(case when s.assetattrid = 'PK' then s.measureunitid else null end) as PK_UNITID,\nmax(case when s.assetattrid = 'POS1' then coalesce(s.numvalue,s.alnvalue) else null end) as POS1_VALUE, \nmax(case when s.assetattrid = 'POS1' then s.measureunitid else null end) as POS1_UNITID,\nmax(case when s.assetattrid = 'POS2' then coalesce(s.numvalue,s.alnvalue) else null end) as POS2_VALUE, \nmax(case when s.assetattrid = 'POS2' then s.measureunitid else null end) as POS2_UNITID,\nmax(case when s.assetattrid = 'POS3' then coalesce(s.numvalue,s.alnvalue) else null end) as POS3_VALUE, \nmax(case when s.assetattrid = 'POS3' then s.measureunitid else null end) as POS3_UNITID,\nmax(case when s.assetattrid = 'PRESS' then coalesce(s.numvalue,s.alnvalue) else null end) as PRESS_VALUE, \nmax(case when s.assetattrid = 'PRESS' then s.measureunitid else null end) as PRESS_UNITID,\nmax(case when s.assetattrid = 'PRNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as PRNOM_VALUE, \nmax(case when s.assetattrid = 'PRNOM' then s.measureunitid else null end) as PRNOM_UNITID,\nmax(case when s.assetattrid = 'PROSCSUBS' then coalesce(s.numvalue,s.alnvalue) else null end) as PROSCSUBS_VALUE, \nmax(case when s.assetattrid = 'PROSCSUBS' then s.measureunitid else null end) as PROSCSUBS_UNITID,\nmax(case when s.assetattrid = 'PR_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as PR_NOM_VALUE, \nmax(case when s.assetattrid = 'PR_NOM' then s.measureunitid else null end) as PR_NOM_UNITID,\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\nmax(case when s.assetattrid = 'RK' then coalesce(s.numvalue,s.alnvalue) else null end) as RK_VALUE, \nmax(case when s.assetattrid = 'RK' then s.measureunitid else null end) as RK_UNITID,\nmax(case when s.assetattrid = 'RKHV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV1_VALUE, \nmax(case when s.assetattrid = 'RKHV_LV1' then s.measureunitid else null end) as RKHV_LV1_UNITID,\nmax(case when s.assetattrid = 'RKHV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV2_VALUE, \nmax(case when s.assetattrid = 'RKHV_LV2' then s.measureunitid else null end) as RKHV_LV2_UNITID,\nmax(case when s.assetattrid = 'RKHV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_LV3_VALUE, \nmax(case when s.assetattrid = 'RKHV_LV3' then s.measureunitid else null end) as RKHV_LV3_UNITID,\nmax(case when s.assetattrid = 'RKHV_MV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV1_VALUE, \nmax(case when s.assetattrid = 'RKHV_MV1' then s.measureunitid else null end) as RKHV_MV1_UNITID,\nmax(case when s.assetattrid = 'RKHV_MV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV2_VALUE, \nmax(case when s.assetattrid = 'RKHV_MV2' then s.measureunitid else null end) as RKHV_MV2_UNITID,\nmax(case when s.assetattrid = 'RKHV_MV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKHV_MV3_VALUE, \nmax(case when s.assetattrid = 'RKHV_MV3' then s.measureunitid else null end) as RKHV_MV3_UNITID,\nmax(case when s.assetattrid = 'RKMV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV1_VALUE, \nmax(case when s.assetattrid = 'RKMV_LV1' then s.measureunitid else null end) as RKMV_LV1_UNITID,\nmax(case when s.assetattrid = 'RKMV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV2_VALUE, \nmax(case when s.assetattrid = 'RKMV_LV2' then s.measureunitid else null end) as RKMV_LV2_UNITID,\nmax(case when s.assetattrid = 'RKMV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as RKMV_LV3_VALUE, \nmax(case when s.assetattrid = 'RKMV_LV3' then s.measureunitid else null end) as RKMV_LV3_UNITID,\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\nmax(case when s.assetattrid = 'S0' then coalesce(s.numvalue,s.alnvalue) else null end) as S0_VALUE, \nmax(case when s.assetattrid = 'S0' then s.measureunitid else null end) as S0_UNITID,\nmax(case when s.assetattrid = 'SCALING' then coalesce(s.numvalue,s.alnvalue) else null end) as SCALING_VALUE, \nmax(case when s.assetattrid = 'SCALING' then s.measureunitid else null end) as SCALING_UNITID,\nmax(case when s.assetattrid = 'SF6INFPR' then coalesce(s.numvalue,s.alnvalue) else null end) as SF6INFPR_VALUE, \nmax(case when s.assetattrid = 'SF6INFPR' then s.measureunitid else null end) as SF6INFPR_UNITID,\nmax(case when s.assetattrid = 'SNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as SNOM_VALUE, \nmax(case when s.assetattrid = 'SNOM' then s.measureunitid else null end) as SNOM_UNITID,\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\nmax(case when s.assetattrid = 'SULKIJA' then coalesce(s.numvalue,s.alnvalue) else null end) as SULKIJA_VALUE, \nmax(case when s.assetattrid = 'SULKIJA' then s.measureunitid else null end) as SULKIJA_UNITID,\nmax(case when s.assetattrid = 'SUOJAUSLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as SUOJAUSLUOKKA_VALUE, \nmax(case when s.assetattrid = 'SUOJAUSLUOKKA' then s.measureunitid else null end) as SUOJAUSLUOKKA_UNITID,\nmax(case when s.assetattrid = 'TEHOLUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TEHOLUOKKA_VALUE, \nmax(case when s.assetattrid = 'TEHOLUOKKA' then s.measureunitid else null end) as TEHOLUOKKA_UNITID,\nmax(case when s.assetattrid = 'TEMP_NOM' then coalesce(s.numvalue,s.alnvalue) else null end) as TEMP_NOM_VALUE, \nmax(case when s.assetattrid = 'TEMP_NOM' then s.measureunitid else null end) as TEMP_NOM_UNITID,\nmax(case when s.assetattrid = 'TERMDESC' then coalesce(s.numvalue,s.alnvalue) else null end) as TERMDESC_VALUE, \nmax(case when s.assetattrid = 'TERMDESC' then s.measureunitid else null end) as TERMDESC_UNITID,\nmax(case when s.assetattrid = 'TILALUOKKA' then coalesce(s.numvalue,s.alnvalue) else null end) as TILALUOKKA_VALUE, \nmax(case when s.assetattrid = 'TILALUOKKA' then s.measureunitid else null end) as TILALUOKKA_UNITID,\nmax(case when s.assetattrid = 'TODISTUKSET' then coalesce(s.numvalue,s.alnvalue) else null end) as TODISTUKSET_VALUE, \nmax(case when s.assetattrid = 'TODISTUKSET' then s.measureunitid else null end) as TODISTUKSET_UNITID,\nmax(case when s.assetattrid = 'TRWEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as TRWEIGHT_VALUE, \nmax(case when s.assetattrid = 'TRWEIGHT' then s.measureunitid else null end) as TRWEIGHT_UNITID,\nmax(case when s.assetattrid = 'TYPEREF' then coalesce(s.numvalue,s.alnvalue) else null end) as TYPEREF_VALUE, \nmax(case when s.assetattrid = 'TYPEREF' then s.measureunitid else null end) as TYPEREF_UNITID,\nmax(case when s.assetattrid = 'TYPETEST' then coalesce(s.numvalue,s.alnvalue) else null end) as TYPETEST_VALUE, \nmax(case when s.assetattrid = 'TYPETEST' then s.measureunitid else null end) as TYPETEST_UNITID,\nmax(case when s.assetattrid = 'T_OIL_R' then coalesce(s.numvalue,s.alnvalue) else null end) as T_OIL_R_VALUE, \nmax(case when s.assetattrid = 'T_OIL_R' then s.measureunitid else null end) as T_OIL_R_UNITID,\nmax(case when s.assetattrid = 'UNOM' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOM_VALUE, \nmax(case when s.assetattrid = 'UNOM' then s.measureunitid else null end) as UNOM_UNITID,\nmax(case when s.assetattrid = 'UNOMHV' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOMHV_VALUE, \nmax(case when s.assetattrid = 'UNOMHV' then s.measureunitid else null end) as UNOMHV_UNITID,\nmax(case when s.assetattrid = 'UNOMMV' then coalesce(s.numvalue,s.alnvalue) else null end) as UNOMMV_VALUE, \nmax(case when s.assetattrid = 'UNOMMV' then s.measureunitid else null end) as UNOMMV_UNITID,\nmax(case when s.assetattrid = 'VAIHELIITIN' then coalesce(s.numvalue,s.alnvalue) else null end) as VAIHELIITIN_VALUE, \nmax(case when s.assetattrid = 'VAIHELIITIN' then s.measureunitid else null end) as VAIHELIITIN_UNITID,\nmax(case when s.assetattrid = 'VECTORG' then coalesce(s.numvalue,s.alnvalue) else null end) as VECTORG_VALUE, \nmax(case when s.assetattrid = 'VECTORG' then s.measureunitid else null end) as VECTORG_UNITID,\nmax(case when s.assetattrid = 'VOL' then coalesce(s.numvalue,s.alnvalue) else null end) as VOL_VALUE, \nmax(case when s.assetattrid = 'VOL' then s.measureunitid else null end) as VOL_UNITID,\nmax(case when s.assetattrid = 'VOLT_OUT' then coalesce(s.numvalue,s.alnvalue) else null end) as VOLT_OUT_VALUE, \nmax(case when s.assetattrid = 'VOLT_OUT' then s.measureunitid else null end) as VOLT_OUT_UNITID,\nmax(case when s.assetattrid = 'VTOTGAS' then coalesce(s.numvalue,s.alnvalue) else null end) as VTOTGAS_VALUE, \nmax(case when s.assetattrid = 'VTOTGAS' then s.measureunitid else null end) as VTOTGAS_UNITID,\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'W-O_AVE' then coalesce(s.numvalue,s.alnvalue) else null end) as W_O_AVE_VALUE, \nmax(case when s.assetattrid = 'W-O_AVE' then s.measureunitid else null end) as W_O_AVE_UNITID,\nmax(case when s.assetattrid = 'WEIGHT' then coalesce(s.numvalue,s.alnvalue) else null end) as WEIGHT_VALUE, \nmax(case when s.assetattrid = 'WEIGHT' then s.measureunitid else null end) as WEIGHT_UNITID,\nmax(case when s.assetattrid = 'X_EXP' then coalesce(s.numvalue,s.alnvalue) else null end) as X_EXP_VALUE, \nmax(case when s.assetattrid = 'X_EXP' then s.measureunitid else null end) as X_EXP_UNITID,\nmax(case when s.assetattrid = 'Y_EXP' then coalesce(s.numvalue,s.alnvalue) else null end) as Y_EXP_VALUE, \nmax(case when s.assetattrid = 'Y_EXP' then s.measureunitid else null end) as Y_EXP_UNITID,\nmax(case when s.assetattrid = 'ZK' then coalesce(s.numvalue,s.alnvalue) else null end) as ZK_VALUE, \nmax(case when s.assetattrid = 'ZK' then s.measureunitid else null end) as ZK_UNITID,\nmax(case when s.assetattrid = 'ZKHV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV1_VALUE, \nmax(case when s.assetattrid = 'ZKHV_LV1' then s.measureunitid else null end) as ZKHV_LV1_UNITID,\nmax(case when s.assetattrid = 'ZKHV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV2_VALUE, \nmax(case when s.assetattrid = 'ZKHV_LV2' then s.measureunitid else null end) as ZKHV_LV2_UNITID,\nmax(case when s.assetattrid = 'ZKHV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_LV3_VALUE, \nmax(case when s.assetattrid = 'ZKHV_LV3' then s.measureunitid else null end) as ZKHV_LV3_UNITID,\nmax(case when s.assetattrid = 'ZKHV_MV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV1_VALUE, \nmax(case when s.assetattrid = 'ZKHV_MV1' then s.measureunitid else null end) as ZKHV_MV1_UNITID,\nmax(case when s.assetattrid = 'ZKHV_MV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV2_VALUE, \nmax(case when s.assetattrid = 'ZKHV_MV2' then s.measureunitid else null end) as ZKHV_MV2_UNITID,\nmax(case when s.assetattrid = 'ZKHV_MV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKHV_MV3_VALUE, \nmax(case when s.assetattrid = 'ZKHV_MV3' then s.measureunitid else null end) as ZKHV_MV3_UNITID,\nmax(case when s.assetattrid = 'ZKMV_LV1' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV1_VALUE, \nmax(case when s.assetattrid = 'ZKMV_LV1' then s.measureunitid else null end) as ZKMV_LV1_UNITID,\nmax(case when s.assetattrid = 'ZKMV_LV2' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV2_VALUE, \nmax(case when s.assetattrid = 'ZKMV_LV2' then s.measureunitid else null end) as ZKMV_LV2_UNITID,\nmax(case when s.assetattrid = 'ZKMV_LV3' then coalesce(s.numvalue,s.alnvalue) else null end) as ZKMV_LV3_VALUE, \nmax(case when s.assetattrid = 'ZKMV_LV3' then s.measureunitid else null end) as ZKMV_LV3_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere upper(a.description) like '%MUUNTAJA%' \n\t\t\tand upper(description) not like '%VIRTAMUUNTAJA%' \n\t\t\tand upper(description) not like '%J\u00c4NNITEMUUNTAJA%'\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_sa_virtamuuntaja": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_sa_virtamuuntaja", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_sa_virtamuuntaja.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_sa_virtamuuntaja.sql", "unique_id": "model.Fingrid.d_sa_virtamuuntaja", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_sa_virtamuuntaja"], "alias": "d_sa_virtamuuntaja", "checksum": {"name": "sha256", "checksum": "925c8f23645f3a3fd79b8c0ab2dd8ca62e1ee7f597c3a5558688ddeee048f562"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.361974, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_virtamuuntaja`", "raw_code": "select\r\na.ASSETNUM,\r\na.ITEMNUM,\r\nmax(case when s.assetattrid = 'ACTIVESTEP' then coalesce(s.numvalue,s.alnvalue) else null end) as ACTIVESTEP_VALUE, \r\nmax(case when s.assetattrid = 'ACTIVESTEP' then s.measureunitid else null end) as ACTIVESTEP_UNITID,\r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\r\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \r\nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\r\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \r\nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\r\nmax(case when s.assetattrid = 'BURDEN' then coalesce(s.numvalue,s.alnvalue) else null end) as BURDEN_VALUE, \r\nmax(case when s.assetattrid = 'BURDEN' then s.measureunitid else null end) as BURDEN_UNITID,\r\nmax(case when s.assetattrid = 'CLASS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASS_VALUE, \r\nmax(case when s.assetattrid = 'CLASS' then s.measureunitid else null end) as CLASS_UNITID,\r\nmax(case when s.assetattrid = 'CLASSINS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASSINS_VALUE, \r\nmax(case when s.assetattrid = 'CLASSINS' then s.measureunitid else null end) as CLASSINS_UNITID,\r\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \r\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\r\nmax(case when s.assetattrid = 'EXT' then coalesce(s.numvalue,s.alnvalue) else null end) as EXT_VALUE, \r\nmax(case when s.assetattrid = 'EXT' then s.measureunitid else null end) as EXT_UNITID,\r\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \r\nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\r\nmax(case when s.assetattrid = 'GIS' then coalesce(s.numvalue,s.alnvalue) else null end) as GIS_VALUE, \r\nmax(case when s.assetattrid = 'GIS' then s.measureunitid else null end) as GIS_UNITID,\r\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \r\nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\r\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \r\nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\r\nmax(case when s.assetattrid = 'ICTH' then coalesce(s.numvalue,s.alnvalue) else null end) as ICTH_VALUE, \r\nmax(case when s.assetattrid = 'ICTH' then s.measureunitid else null end) as ICTH_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'INNERINS' then coalesce(s.numvalue,s.alnvalue) else null end) as INNERINS_VALUE, \r\nmax(case when s.assetattrid = 'INNERINS' then s.measureunitid else null end) as INNERINS_UNITID,\r\nmax(case when s.assetattrid = 'INSLEVEL' then coalesce(s.numvalue,s.alnvalue) else null end) as INSLEVEL_VALUE, \r\nmax(case when s.assetattrid = 'INSLEVEL' then s.measureunitid else null end) as INSLEVEL_UNITID,\r\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \r\nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\r\nmax(case when s.assetattrid = 'ISTEP1' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP1_VALUE, \r\nmax(case when s.assetattrid = 'ISTEP1' then s.measureunitid else null end) as ISTEP1_UNITID,\r\nmax(case when s.assetattrid = 'ISTEP1MEA' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP1MEA_VALUE, \r\nmax(case when s.assetattrid = 'ISTEP1MEA' then s.measureunitid else null end) as ISTEP1MEA_UNITID,\r\nmax(case when s.assetattrid = 'ISTEP2' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP2_VALUE, \r\nmax(case when s.assetattrid = 'ISTEP2' then s.measureunitid else null end) as ISTEP2_UNITID,\r\nmax(case when s.assetattrid = 'ISTEP3' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP3_VALUE, \r\nmax(case when s.assetattrid = 'ISTEP3' then s.measureunitid else null end) as ISTEP3_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE, \r\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\r\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'LITESTU' then coalesce(s.numvalue,s.alnvalue) else null end) as LITESTU_VALUE, \r\nmax(case when s.assetattrid = 'LITESTU' then s.measureunitid else null end) as LITESTU_UNITID,\r\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \r\nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\r\nmax(case when s.assetattrid = 'MAXSYSU' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxSYSU_VALUE, \r\nmax(case when s.assetattrid = 'MAXSYSU' then s.measureunitid else null end) asmaxSYSU_UNITID,\r\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \r\nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\r\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \r\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\r\nmax(case when s.assetattrid = 'OILMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMASS_VALUE, \r\nmax(case when s.assetattrid = 'OILMASS' then s.measureunitid else null end) as OILMASS_UNITID,\r\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE, \r\nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \r\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\r\nmax(case when s.assetattrid = 'OUTINS' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTINS_VALUE, \r\nmax(case when s.assetattrid = 'OUTINS' then s.measureunitid else null end) as OUTINS_UNITID,\r\nmax(case when s.assetattrid = 'POWERFU' then coalesce(s.numvalue,s.alnvalue) else null end) as POWERFU_VALUE, \r\nmax(case when s.assetattrid = 'POWERFU' then s.measureunitid else null end) as POWERFU_UNITID,\r\nmax(case when s.assetattrid = 'PRESENTCONNRATIO' then coalesce(s.numvalue,s.alnvalue) else null end) as PRESENTCONNRATIO_VALUE, \r\nmax(case when s.assetattrid = 'PRESENTCONNRATIO' then s.measureunitid else null end) as PRESENTCONNRATIO_UNITID,\r\nmax(case when s.assetattrid = 'PRIMCONN' then coalesce(s.numvalue,s.alnvalue) else null end) as PRIMCONN_VALUE, \r\nmax(case when s.assetattrid = 'PRIMCONN' then s.measureunitid else null end) as PRIMCONN_UNITID,\r\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \r\nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\r\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \r\nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\r\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \r\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\r\nmax(case when s.assetattrid = 'STANDARD' then coalesce(s.numvalue,s.alnvalue) else null end) as STANDARD_VALUE, \r\nmax(case when s.assetattrid = 'STANDARD' then s.measureunitid else null end) as STANDARD_UNITID,\r\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \r\nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\r\nmax(case when s.assetattrid = 'TMPCLSS' then coalesce(s.numvalue,s.alnvalue) else null end) as TMPCLSS_VALUE, \r\nmax(case when s.assetattrid = 'TMPCLSS' then s.measureunitid else null end) as TMPCLSS_UNITID,\r\nmax(case when s.assetattrid = 'TOBUSBAR' then coalesce(s.numvalue,s.alnvalue) else null end) as TOBUSBAR_VALUE, \r\nmax(case when s.assetattrid = 'TOBUSBAR' then s.measureunitid else null end) as TOBUSBAR_UNITID,\r\nmax(case when s.assetattrid = 'TOTALSTEPS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTALSTEPS_VALUE, \r\nmax(case when s.assetattrid = 'TOTALSTEPS' then s.measureunitid else null end) as TOTALSTEPS_UNITID,\r\nmax(case when s.assetattrid = 'TOTMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTMASS_VALUE, \r\nmax(case when s.assetattrid = 'TOTMASS' then s.measureunitid else null end) as TOTMASS_UNITID,\r\nmax(case when s.assetattrid = 'URATED' then coalesce(s.numvalue,s.alnvalue) else null end) as URATED_VALUE, \r\nmax(case when s.assetattrid = 'URATED' then s.measureunitid else null end) as URATED_UNITID,\r\nmax(case when s.assetattrid = 'VLTG_OUT' then coalesce(s.numvalue,s.alnvalue) else null end) as VLTG_OUT_VALUE, \r\nmax(case when s.assetattrid = 'VLTG_OUT' then s.measureunitid else null end) as VLTG_OUT_UNITID,\r\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere upper(a.description) like '%VIRTAMUUNTAJA%'\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_sa_virtamuuntaja.sql", "compiled": true, "compiled_code": "select\na.ASSETNUM,\na.ITEMNUM,\nmax(case when s.assetattrid = 'ACTIVESTEP' then coalesce(s.numvalue,s.alnvalue) else null end) as ACTIVESTEP_VALUE, \nmax(case when s.assetattrid = 'ACTIVESTEP' then s.measureunitid else null end) as ACTIVESTEP_UNITID,\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\nmax(case when s.assetattrid = 'BURDEN' then coalesce(s.numvalue,s.alnvalue) else null end) as BURDEN_VALUE, \nmax(case when s.assetattrid = 'BURDEN' then s.measureunitid else null end) as BURDEN_UNITID,\nmax(case when s.assetattrid = 'CLASS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASS_VALUE, \nmax(case when s.assetattrid = 'CLASS' then s.measureunitid else null end) as CLASS_UNITID,\nmax(case when s.assetattrid = 'CLASSINS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASSINS_VALUE, \nmax(case when s.assetattrid = 'CLASSINS' then s.measureunitid else null end) as CLASSINS_UNITID,\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\nmax(case when s.assetattrid = 'EXT' then coalesce(s.numvalue,s.alnvalue) else null end) as EXT_VALUE, \nmax(case when s.assetattrid = 'EXT' then s.measureunitid else null end) as EXT_UNITID,\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\nmax(case when s.assetattrid = 'GIS' then coalesce(s.numvalue,s.alnvalue) else null end) as GIS_VALUE, \nmax(case when s.assetattrid = 'GIS' then s.measureunitid else null end) as GIS_UNITID,\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\nmax(case when s.assetattrid = 'ICTH' then coalesce(s.numvalue,s.alnvalue) else null end) as ICTH_VALUE, \nmax(case when s.assetattrid = 'ICTH' then s.measureunitid else null end) as ICTH_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'INNERINS' then coalesce(s.numvalue,s.alnvalue) else null end) as INNERINS_VALUE, \nmax(case when s.assetattrid = 'INNERINS' then s.measureunitid else null end) as INNERINS_UNITID,\nmax(case when s.assetattrid = 'INSLEVEL' then coalesce(s.numvalue,s.alnvalue) else null end) as INSLEVEL_VALUE, \nmax(case when s.assetattrid = 'INSLEVEL' then s.measureunitid else null end) as INSLEVEL_UNITID,\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\nmax(case when s.assetattrid = 'ISTEP1' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP1_VALUE, \nmax(case when s.assetattrid = 'ISTEP1' then s.measureunitid else null end) as ISTEP1_UNITID,\nmax(case when s.assetattrid = 'ISTEP1MEA' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP1MEA_VALUE, \nmax(case when s.assetattrid = 'ISTEP1MEA' then s.measureunitid else null end) as ISTEP1MEA_UNITID,\nmax(case when s.assetattrid = 'ISTEP2' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP2_VALUE, \nmax(case when s.assetattrid = 'ISTEP2' then s.measureunitid else null end) as ISTEP2_UNITID,\nmax(case when s.assetattrid = 'ISTEP3' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP3_VALUE, \nmax(case when s.assetattrid = 'ISTEP3' then s.measureunitid else null end) as ISTEP3_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE, \nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'LITESTU' then coalesce(s.numvalue,s.alnvalue) else null end) as LITESTU_VALUE, \nmax(case when s.assetattrid = 'LITESTU' then s.measureunitid else null end) as LITESTU_UNITID,\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\nmax(case when s.assetattrid = 'MAXSYSU' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxSYSU_VALUE, \nmax(case when s.assetattrid = 'MAXSYSU' then s.measureunitid else null end) asmaxSYSU_UNITID,\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\nmax(case when s.assetattrid = 'OILMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMASS_VALUE, \nmax(case when s.assetattrid = 'OILMASS' then s.measureunitid else null end) as OILMASS_UNITID,\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE, \nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\nmax(case when s.assetattrid = 'OUTINS' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTINS_VALUE, \nmax(case when s.assetattrid = 'OUTINS' then s.measureunitid else null end) as OUTINS_UNITID,\nmax(case when s.assetattrid = 'POWERFU' then coalesce(s.numvalue,s.alnvalue) else null end) as POWERFU_VALUE, \nmax(case when s.assetattrid = 'POWERFU' then s.measureunitid else null end) as POWERFU_UNITID,\nmax(case when s.assetattrid = 'PRESENTCONNRATIO' then coalesce(s.numvalue,s.alnvalue) else null end) as PRESENTCONNRATIO_VALUE, \nmax(case when s.assetattrid = 'PRESENTCONNRATIO' then s.measureunitid else null end) as PRESENTCONNRATIO_UNITID,\nmax(case when s.assetattrid = 'PRIMCONN' then coalesce(s.numvalue,s.alnvalue) else null end) as PRIMCONN_VALUE, \nmax(case when s.assetattrid = 'PRIMCONN' then s.measureunitid else null end) as PRIMCONN_UNITID,\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\nmax(case when s.assetattrid = 'STANDARD' then coalesce(s.numvalue,s.alnvalue) else null end) as STANDARD_VALUE, \nmax(case when s.assetattrid = 'STANDARD' then s.measureunitid else null end) as STANDARD_UNITID,\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\nmax(case when s.assetattrid = 'TMPCLSS' then coalesce(s.numvalue,s.alnvalue) else null end) as TMPCLSS_VALUE, \nmax(case when s.assetattrid = 'TMPCLSS' then s.measureunitid else null end) as TMPCLSS_UNITID,\nmax(case when s.assetattrid = 'TOBUSBAR' then coalesce(s.numvalue,s.alnvalue) else null end) as TOBUSBAR_VALUE, \nmax(case when s.assetattrid = 'TOBUSBAR' then s.measureunitid else null end) as TOBUSBAR_UNITID,\nmax(case when s.assetattrid = 'TOTALSTEPS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTALSTEPS_VALUE, \nmax(case when s.assetattrid = 'TOTALSTEPS' then s.measureunitid else null end) as TOTALSTEPS_UNITID,\nmax(case when s.assetattrid = 'TOTMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTMASS_VALUE, \nmax(case when s.assetattrid = 'TOTMASS' then s.measureunitid else null end) as TOTMASS_UNITID,\nmax(case when s.assetattrid = 'URATED' then coalesce(s.numvalue,s.alnvalue) else null end) as URATED_VALUE, \nmax(case when s.assetattrid = 'URATED' then s.measureunitid else null end) as URATED_UNITID,\nmax(case when s.assetattrid = 'VLTG_OUT' then coalesce(s.numvalue,s.alnvalue) else null end) as VLTG_OUT_VALUE, \nmax(case when s.assetattrid = 'VLTG_OUT' then s.measureunitid else null end) as VLTG_OUT_UNITID,\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere upper(a.description) like '%VIRTAMUUNTAJA%'\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_toimittaja": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_toimittaja", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_toimittaja.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_toimittaja.sql", "unique_id": "model.Fingrid.d_toimittaja", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_toimittaja"], "alias": "d_toimittaja", "checksum": {"name": "sha256", "checksum": "530bd74d111d0e0713bda2a85c5aaa49ca17ab6b11fd6e10806236b7a45d2cbe"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien kunnossapidon toimittajat.", "columns": {"pluspcustomerid": {"name": "pluspcustomerid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer": {"name": "customer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "streetaddress": {"name": "streetaddress", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusvatcode": {"name": "cusvatcode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "knowntocustas": {"name": "knowntocustas", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cuscrmvendorid": {"name": "cuscrmvendorid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cuscrmstatus": {"name": "cuscrmstatus", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cuscrmparent": {"name": "cuscrmparent", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.4953043, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_toimittaja`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\n\r\nselect pluspcustomerid\r\n     , customer\r\n     , city\r\n     , name\r\n     , streetaddress\r\n     , cusvatcode\r\n     , knowntocustas\r\n     , cuscrmvendorid\r\n     , cuscrmstatus\r\n     , cuscrmparent\r\n     , status\r\n     , rowstamp\r\nfrom {{ source('maximo', 'pluspcustomer') }}", "language": "sql", "refs": [], "sources": [["maximo", "pluspcustomer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.pluspcustomer"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_toimittaja.sql", "compiled": true, "compiled_code": "\n\nselect pluspcustomerid\n     , customer\n     , city\n     , name\n     , streetaddress\n     , cusvatcode\n     , knowntocustas\n     , cuscrmvendorid\n     , cuscrmstatus\n     , cuscrmparent\n     , status\n     , rowstamp\nfrom `clean_test`.`maximo`.`pluspcustomer`", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_tyoalueet": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_tyoalueet", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_tyoalueet.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_tyoalueet.sql", "unique_id": "model.Fingrid.d_tyoalueet", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_tyoalueet"], "alias": "d_tyoalueet", "checksum": {"name": "sha256", "checksum": "9d279342fab7480ee033eacf99daafee98c47d168a881b4679c3e1395ff1e345"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Kunnonhallinnan ty\u00f6alueet.", "columns": {"cusbusinessid": {"name": "cusbusinessid", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cushierarchypath": {"name": "cushierarchypath", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_description": {"name": "class_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.500305, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_tyoalueet`", "raw_code": "select l.cusbusinessid\r\n     , l.description\r\n     , l.status\r\n     , c.cushierarchypath\r\n     , nvl(cfi.description,c.description) class_description \r\nfrom {{ source('maximo', 'locations') }} l \r\nleft join {{ source('maximo', 'classstructure') }} c on c.classstructureid = l.classstructureid \r\nleft join {{ source('maximo', 'l_classstructure') }} cfi on cfi.ownerid=c.classstructureuid and cfi.langcode='FI' \r\nwhere l.type='WORKAREA'", "language": "sql", "refs": [], "sources": [["maximo", "locations"], ["maximo", "classstructure"], ["maximo", "l_classstructure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.locations", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.l_classstructure"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_tyoalueet.sql", "compiled": true, "compiled_code": "select l.cusbusinessid\n     , l.description\n     , l.status\n     , c.cushierarchypath\n     , nvl(cfi.description,c.description) class_description \nfrom `clean_test`.`maximo`.`locations` l \nleft join `clean_test`.`maximo`.`classstructure` c on c.classstructureid = l.classstructureid \nleft join `clean_test`.`maximo`.`l_classstructure` cfi on cfi.ownerid=c.classstructureuid and cfi.langcode='FI' \nwhere l.type='WORKAREA'", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_virtamuuntaja": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_virtamuuntaja", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_virtamuuntaja.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_virtamuuntaja.sql", "unique_id": "model.Fingrid.d_virtamuuntaja", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_virtamuuntaja"], "alias": "d_virtamuuntaja", "checksum": {"name": "sha256", "checksum": "78ea7223b1af950c2300721b1b1b5ffe67b52b83eaac1aaa43fc08f0726d8c90"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien laitteet - Virtamuuntajat.", "columns": {"ASSETNUM": {"name": "ASSETNUM", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEMNUM": {"name": "ITEMNUM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.5793037, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_virtamuuntaja`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\n\r\nselect\r\na.ASSETNUM,\r\na.ITEMNUM,\r\nmax(case when s.assetattrid = 'ACTIVESTEP' then coalesce(s.numvalue,s.alnvalue) else null end) as ACTIVESTEP_VALUE, \r\nmax(case when s.assetattrid = 'ACTIVESTEP' then s.measureunitid else null end) as ACTIVESTEP_UNITID,\r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \r\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\r\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \r\nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\r\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \r\nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\r\nmax(case when s.assetattrid = 'BURDEN' then coalesce(s.numvalue,s.alnvalue) else null end) as BURDEN_VALUE, \r\nmax(case when s.assetattrid = 'BURDEN' then s.measureunitid else null end) as BURDEN_UNITID,\r\nmax(case when s.assetattrid = 'CLASS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASS_VALUE, \r\nmax(case when s.assetattrid = 'CLASS' then s.measureunitid else null end) as CLASS_UNITID,\r\nmax(case when s.assetattrid = 'CLASSINS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASSINS_VALUE, \r\nmax(case when s.assetattrid = 'CLASSINS' then s.measureunitid else null end) as CLASSINS_UNITID,\r\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \r\nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\r\nmax(case when s.assetattrid = 'EXT' then coalesce(s.numvalue,s.alnvalue) else null end) as EXT_VALUE, \r\nmax(case when s.assetattrid = 'EXT' then s.measureunitid else null end) as EXT_UNITID,\r\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \r\nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\r\nmax(case when s.assetattrid = 'GIS' then coalesce(s.numvalue,s.alnvalue) else null end) as GIS_VALUE, \r\nmax(case when s.assetattrid = 'GIS' then s.measureunitid else null end) as GIS_UNITID,\r\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \r\nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\r\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \r\nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\r\nmax(case when s.assetattrid = 'ICTH' then coalesce(s.numvalue,s.alnvalue) else null end) as ICTH_VALUE, \r\nmax(case when s.assetattrid = 'ICTH' then s.measureunitid else null end) as ICTH_UNITID,\r\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \r\nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\r\nmax(case when s.assetattrid = 'INNERINS' then coalesce(s.numvalue,s.alnvalue) else null end) as INNERINS_VALUE, \r\nmax(case when s.assetattrid = 'INNERINS' then s.measureunitid else null end) as INNERINS_UNITID,\r\nmax(case when s.assetattrid = 'INSLEVEL' then coalesce(s.numvalue,s.alnvalue) else null end) as INSLEVEL_VALUE, \r\nmax(case when s.assetattrid = 'INSLEVEL' then s.measureunitid else null end) as INSLEVEL_UNITID,\r\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \r\nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\r\nmax(case when s.assetattrid = 'ISTEP1' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP1_VALUE, \r\nmax(case when s.assetattrid = 'ISTEP1' then s.measureunitid else null end) as ISTEP1_UNITID,\r\nmax(case when s.assetattrid = 'ISTEP1MEA' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP1MEA_VALUE, \r\nmax(case when s.assetattrid = 'ISTEP1MEA' then s.measureunitid else null end) as ISTEP1MEA_UNITID,\r\nmax(case when s.assetattrid = 'ISTEP2' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP2_VALUE, \r\nmax(case when s.assetattrid = 'ISTEP2' then s.measureunitid else null end) as ISTEP2_UNITID,\r\nmax(case when s.assetattrid = 'ISTEP3' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP3_VALUE, \r\nmax(case when s.assetattrid = 'ISTEP3' then s.measureunitid else null end) as ISTEP3_UNITID,\r\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \r\nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\r\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE, \r\nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\r\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\r\nmax(case when s.assetattrid = 'LITESTU' then coalesce(s.numvalue,s.alnvalue) else null end) as LITESTU_VALUE, \r\nmax(case when s.assetattrid = 'LITESTU' then s.measureunitid else null end) as LITESTU_UNITID,\r\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \r\nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\r\nmax(case when s.assetattrid = 'MAXSYSU' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxSYSU_VALUE, \r\nmax(case when s.assetattrid = 'MAXSYSU' then s.measureunitid else null end) asmaxSYSU_UNITID,\r\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \r\nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\r\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \r\nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\r\nmax(case when s.assetattrid = 'OILMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMASS_VALUE, \r\nmax(case when s.assetattrid = 'OILMASS' then s.measureunitid else null end) as OILMASS_UNITID,\r\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE, \r\nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\r\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \r\nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\r\nmax(case when s.assetattrid = 'OUTINS' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTINS_VALUE, \r\nmax(case when s.assetattrid = 'OUTINS' then s.measureunitid else null end) as OUTINS_UNITID,\r\nmax(case when s.assetattrid = 'POWERFU' then coalesce(s.numvalue,s.alnvalue) else null end) as POWERFU_VALUE, \r\nmax(case when s.assetattrid = 'POWERFU' then s.measureunitid else null end) as POWERFU_UNITID,\r\nmax(case when s.assetattrid = 'PRESENTCONNRATIO' then coalesce(s.numvalue,s.alnvalue) else null end) as PRESENTCONNRATIO_VALUE, \r\nmax(case when s.assetattrid = 'PRESENTCONNRATIO' then s.measureunitid else null end) as PRESENTCONNRATIO_UNITID,\r\nmax(case when s.assetattrid = 'PRIMCONN' then coalesce(s.numvalue,s.alnvalue) else null end) as PRIMCONN_VALUE, \r\nmax(case when s.assetattrid = 'PRIMCONN' then s.measureunitid else null end) as PRIMCONN_UNITID,\r\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \r\nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\r\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \r\nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\r\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \r\nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\r\nmax(case when s.assetattrid = 'STANDARD' then coalesce(s.numvalue,s.alnvalue) else null end) as STANDARD_VALUE, \r\nmax(case when s.assetattrid = 'STANDARD' then s.measureunitid else null end) as STANDARD_UNITID,\r\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \r\nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\r\nmax(case when s.assetattrid = 'TMPCLSS' then coalesce(s.numvalue,s.alnvalue) else null end) as TMPCLSS_VALUE, \r\nmax(case when s.assetattrid = 'TMPCLSS' then s.measureunitid else null end) as TMPCLSS_UNITID,\r\nmax(case when s.assetattrid = 'TOBUSBAR' then coalesce(s.numvalue,s.alnvalue) else null end) as TOBUSBAR_VALUE, \r\nmax(case when s.assetattrid = 'TOBUSBAR' then s.measureunitid else null end) as TOBUSBAR_UNITID,\r\nmax(case when s.assetattrid = 'TOTALSTEPS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTALSTEPS_VALUE, \r\nmax(case when s.assetattrid = 'TOTALSTEPS' then s.measureunitid else null end) as TOTALSTEPS_UNITID,\r\nmax(case when s.assetattrid = 'TOTMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTMASS_VALUE, \r\nmax(case when s.assetattrid = 'TOTMASS' then s.measureunitid else null end) as TOTMASS_UNITID,\r\nmax(case when s.assetattrid = 'URATED' then coalesce(s.numvalue,s.alnvalue) else null end) as URATED_VALUE, \r\nmax(case when s.assetattrid = 'URATED' then s.measureunitid else null end) as URATED_UNITID,\r\nmax(case when s.assetattrid = 'VLTG_OUT' then coalesce(s.numvalue,s.alnvalue) else null end) as VLTG_OUT_VALUE, \r\nmax(case when s.assetattrid = 'VLTG_OUT' then s.measureunitid else null end) as VLTG_OUT_UNITID,\r\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \r\nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID\r\nfrom {{ source('maximo', 'asset') }} a left join {{ source('maximo', 'assetspec') }} s on a.assetnum = s.assetnum\r\nwhere exists (select 1 from {{ source('maximo', 'classstructure') }} cs \r\n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\r\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'VIR' /*'Virtamuuntajat'*/ )\r\ngroup by a.assetnum,a.itemnum", "language": "sql", "refs": [], "sources": [["maximo", "classstructure"], ["maximo", "asset"], ["maximo", "assetspec"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_virtamuuntaja.sql", "compiled": true, "compiled_code": "\n\nselect\na.ASSETNUM,\na.ITEMNUM,\nmax(case when s.assetattrid = 'ACTIVESTEP' then coalesce(s.numvalue,s.alnvalue) else null end) as ACTIVESTEP_VALUE, \nmax(case when s.assetattrid = 'ACTIVESTEP' then s.measureunitid else null end) as ACTIVESTEP_UNITID,\nmax(case when s.assetattrid = 'APUJ\u00c4NN' then coalesce(s.numvalue,s.alnvalue) else null end) as APUJANN_VALUE, \nmax(case when s.assetattrid = 'APUJ\u00c4NN' then s.measureunitid else null end) as APUJANN_UNITID,\nmax(case when s.assetattrid = 'ASETOHJ' then coalesce(s.numvalue,s.alnvalue) else null end) as ASETOHJ_VALUE, \nmax(case when s.assetattrid = 'ASETOHJ' then s.measureunitid else null end) as ASETOHJ_UNITID,\nmax(case when s.assetattrid = 'AUTORECLOS' then coalesce(s.numvalue,s.alnvalue) else null end) as AUTORECLOS_VALUE, \nmax(case when s.assetattrid = 'AUTORECLOS' then s.measureunitid else null end) as AUTORECLOS_UNITID,\nmax(case when s.assetattrid = 'BURDEN' then coalesce(s.numvalue,s.alnvalue) else null end) as BURDEN_VALUE, \nmax(case when s.assetattrid = 'BURDEN' then s.measureunitid else null end) as BURDEN_UNITID,\nmax(case when s.assetattrid = 'CLASS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASS_VALUE, \nmax(case when s.assetattrid = 'CLASS' then s.measureunitid else null end) as CLASS_UNITID,\nmax(case when s.assetattrid = 'CLASSINS' then coalesce(s.numvalue,s.alnvalue) else null end) as CLASSINS_VALUE, \nmax(case when s.assetattrid = 'CLASSINS' then s.measureunitid else null end) as CLASSINS_UNITID,\nmax(case when s.assetattrid = 'DEVICEID' then coalesce(s.numvalue,s.alnvalue) else null end) as DEVICEID_VALUE, \nmax(case when s.assetattrid = 'DEVICEID' then s.measureunitid else null end) as DEVICEID_UNITID,\nmax(case when s.assetattrid = 'EXT' then coalesce(s.numvalue,s.alnvalue) else null end) as EXT_VALUE, \nmax(case when s.assetattrid = 'EXT' then s.measureunitid else null end) as EXT_UNITID,\nmax(case when s.assetattrid = 'FIRMWARE' then coalesce(s.numvalue,s.alnvalue) else null end) as FIRMWARE_VALUE, \nmax(case when s.assetattrid = 'FIRMWARE' then s.measureunitid else null end) as FIRMWARE_UNITID,\nmax(case when s.assetattrid = 'GIS' then coalesce(s.numvalue,s.alnvalue) else null end) as GIS_VALUE, \nmax(case when s.assetattrid = 'GIS' then s.measureunitid else null end) as GIS_UNITID,\nmax(case when s.assetattrid = 'GWIP' then coalesce(s.numvalue,s.alnvalue) else null end) as GWIP_VALUE, \nmax(case when s.assetattrid = 'GWIP' then s.measureunitid else null end) as GWIP_UNITID,\nmax(case when s.assetattrid = 'HANTTI' then coalesce(s.numvalue,s.alnvalue) else null end) as HANTTI_VALUE, \nmax(case when s.assetattrid = 'HANTTI' then s.measureunitid else null end) as HANTTI_UNITID,\nmax(case when s.assetattrid = 'ICTH' then coalesce(s.numvalue,s.alnvalue) else null end) as ICTH_VALUE, \nmax(case when s.assetattrid = 'ICTH' then s.measureunitid else null end) as ICTH_UNITID,\nmax(case when s.assetattrid = 'IDYN' then coalesce(s.numvalue,s.alnvalue) else null end) as IDYN_VALUE, \nmax(case when s.assetattrid = 'IDYN' then s.measureunitid else null end) as IDYN_UNITID,\nmax(case when s.assetattrid = 'INNERINS' then coalesce(s.numvalue,s.alnvalue) else null end) as INNERINS_VALUE, \nmax(case when s.assetattrid = 'INNERINS' then s.measureunitid else null end) as INNERINS_UNITID,\nmax(case when s.assetattrid = 'INSLEVEL' then coalesce(s.numvalue,s.alnvalue) else null end) as INSLEVEL_VALUE, \nmax(case when s.assetattrid = 'INSLEVEL' then s.measureunitid else null end) as INSLEVEL_UNITID,\nmax(case when s.assetattrid = 'IPADDR' then coalesce(s.numvalue,s.alnvalue) else null end) as IPADDR_VALUE, \nmax(case when s.assetattrid = 'IPADDR' then s.measureunitid else null end) as IPADDR_UNITID,\nmax(case when s.assetattrid = 'ISTEP1' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP1_VALUE, \nmax(case when s.assetattrid = 'ISTEP1' then s.measureunitid else null end) as ISTEP1_UNITID,\nmax(case when s.assetattrid = 'ISTEP1MEA' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP1MEA_VALUE, \nmax(case when s.assetattrid = 'ISTEP1MEA' then s.measureunitid else null end) as ISTEP1MEA_UNITID,\nmax(case when s.assetattrid = 'ISTEP2' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP2_VALUE, \nmax(case when s.assetattrid = 'ISTEP2' then s.measureunitid else null end) as ISTEP2_UNITID,\nmax(case when s.assetattrid = 'ISTEP3' then coalesce(s.numvalue,s.alnvalue) else null end) as ISTEP3_VALUE, \nmax(case when s.assetattrid = 'ISTEP3' then s.measureunitid else null end) as ISTEP3_UNITID,\nmax(case when s.assetattrid = 'ITH' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_VALUE, \nmax(case when s.assetattrid = 'ITH' then s.measureunitid else null end) as ITH_UNITID,\nmax(case when s.assetattrid = 'ITH_TIME' then coalesce(s.numvalue,s.alnvalue) else null end) as ITH_TIME_VALUE, \nmax(case when s.assetattrid = 'ITH_TIME' then s.measureunitid else null end) as ITH_TIME_UNITID,\nmax(case when s.assetattrid = 'I_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as I_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'I_NOMINAL' then s.measureunitid else null end) as I_NOMINAL_UNITID,\nmax(case when s.assetattrid = 'LITESTU' then coalesce(s.numvalue,s.alnvalue) else null end) as LITESTU_VALUE, \nmax(case when s.assetattrid = 'LITESTU' then s.measureunitid else null end) as LITESTU_UNITID,\nmax(case when s.assetattrid = 'LOADABILIT' then coalesce(s.numvalue,s.alnvalue) else null end) as LOADABILIT_VALUE, \nmax(case when s.assetattrid = 'LOADABILIT' then s.measureunitid else null end) as LOADABILIT_UNITID,\nmax(case when s.assetattrid = 'MAXSYSU' then coalesce(s.numvalue,s.alnvalue) else null end) asmaxSYSU_VALUE, \nmax(case when s.assetattrid = 'MAXSYSU' then s.measureunitid else null end) asmaxSYSU_UNITID,\nmax(case when s.assetattrid = 'MODEL1' then coalesce(s.numvalue,s.alnvalue) else null end) as MODEL1_VALUE, \nmax(case when s.assetattrid = 'MODEL1' then s.measureunitid else null end) as MODEL1_UNITID,\nmax(case when s.assetattrid = 'MODELNUM' then coalesce(s.numvalue,s.alnvalue) else null end) as MODELNUM_VALUE, \nmax(case when s.assetattrid = 'MODELNUM' then s.measureunitid else null end) as MODELNUM_UNITID,\nmax(case when s.assetattrid = 'OILMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as OILMASS_VALUE, \nmax(case when s.assetattrid = 'OILMASS' then s.measureunitid else null end) as OILMASS_UNITID,\nmax(case when s.assetattrid = 'OIL_SORT' then coalesce(s.numvalue,s.alnvalue) else null end) as OIL_SORT_VALUE, \nmax(case when s.assetattrid = 'OIL_SORT' then s.measureunitid else null end) as OIL_SORT_UNITID,\nmax(case when s.assetattrid = 'OPERSTATUS' then coalesce(s.numvalue,s.alnvalue) else null end) as OPERSTATUS_VALUE, \nmax(case when s.assetattrid = 'OPERSTATUS' then s.measureunitid else null end) as OPERSTATUS_UNITID,\nmax(case when s.assetattrid = 'OUTINS' then coalesce(s.numvalue,s.alnvalue) else null end) as OUTINS_VALUE, \nmax(case when s.assetattrid = 'OUTINS' then s.measureunitid else null end) as OUTINS_UNITID,\nmax(case when s.assetattrid = 'POWERFU' then coalesce(s.numvalue,s.alnvalue) else null end) as POWERFU_VALUE, \nmax(case when s.assetattrid = 'POWERFU' then s.measureunitid else null end) as POWERFU_UNITID,\nmax(case when s.assetattrid = 'PRESENTCONNRATIO' then coalesce(s.numvalue,s.alnvalue) else null end) as PRESENTCONNRATIO_VALUE, \nmax(case when s.assetattrid = 'PRESENTCONNRATIO' then s.measureunitid else null end) as PRESENTCONNRATIO_UNITID,\nmax(case when s.assetattrid = 'PRIMCONN' then coalesce(s.numvalue,s.alnvalue) else null end) as PRIMCONN_VALUE, \nmax(case when s.assetattrid = 'PRIMCONN' then s.measureunitid else null end) as PRIMCONN_UNITID,\nmax(case when s.assetattrid = 'RELAYCLASSES' then coalesce(s.numvalue,s.alnvalue) else null end) as RELAYCLASSES_VALUE, \nmax(case when s.assetattrid = 'RELAYCLASSES' then s.measureunitid else null end) as RELAYCLASSES_UNITID,\nmax(case when s.assetattrid = 'RELLISOPT' then coalesce(s.numvalue,s.alnvalue) else null end) as RELLISOPT_VALUE, \nmax(case when s.assetattrid = 'RELLISOPT' then s.measureunitid else null end) as RELLISOPT_UNITID,\nmax(case when s.assetattrid = 'RPNAME' then coalesce(s.numvalue,s.alnvalue) else null end) as RPNAME_VALUE, \nmax(case when s.assetattrid = 'RPNAME' then s.measureunitid else null end) as RPNAME_UNITID,\nmax(case when s.assetattrid = 'STANDARD' then coalesce(s.numvalue,s.alnvalue) else null end) as STANDARD_VALUE, \nmax(case when s.assetattrid = 'STANDARD' then s.measureunitid else null end) as STANDARD_UNITID,\nmax(case when s.assetattrid = 'SUBNET' then coalesce(s.numvalue,s.alnvalue) else null end) as SUBNET_VALUE, \nmax(case when s.assetattrid = 'SUBNET' then s.measureunitid else null end) as SUBNET_UNITID,\nmax(case when s.assetattrid = 'TMPCLSS' then coalesce(s.numvalue,s.alnvalue) else null end) as TMPCLSS_VALUE, \nmax(case when s.assetattrid = 'TMPCLSS' then s.measureunitid else null end) as TMPCLSS_UNITID,\nmax(case when s.assetattrid = 'TOBUSBAR' then coalesce(s.numvalue,s.alnvalue) else null end) as TOBUSBAR_VALUE, \nmax(case when s.assetattrid = 'TOBUSBAR' then s.measureunitid else null end) as TOBUSBAR_UNITID,\nmax(case when s.assetattrid = 'TOTALSTEPS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTALSTEPS_VALUE, \nmax(case when s.assetattrid = 'TOTALSTEPS' then s.measureunitid else null end) as TOTALSTEPS_UNITID,\nmax(case when s.assetattrid = 'TOTMASS' then coalesce(s.numvalue,s.alnvalue) else null end) as TOTMASS_VALUE, \nmax(case when s.assetattrid = 'TOTMASS' then s.measureunitid else null end) as TOTMASS_UNITID,\nmax(case when s.assetattrid = 'URATED' then coalesce(s.numvalue,s.alnvalue) else null end) as URATED_VALUE, \nmax(case when s.assetattrid = 'URATED' then s.measureunitid else null end) as URATED_UNITID,\nmax(case when s.assetattrid = 'VLTG_OUT' then coalesce(s.numvalue,s.alnvalue) else null end) as VLTG_OUT_VALUE, \nmax(case when s.assetattrid = 'VLTG_OUT' then s.measureunitid else null end) as VLTG_OUT_UNITID,\nmax(case when s.assetattrid = 'V_NOMINAL' then coalesce(s.numvalue,s.alnvalue) else null end) as V_NOMINAL_VALUE, \nmax(case when s.assetattrid = 'V_NOMINAL' then s.measureunitid else null end) as V_NOMINAL_UNITID\nfrom `clean_test`.`maximo`.`asset` a left join `clean_test`.`maximo`.`assetspec` s on a.assetnum = s.assetnum\nwhere exists (select 1 from `clean_test`.`maximo`.`classstructure` cs \n                where cs.CLASSSTRUCTUREID = a.CLASSSTRUCTUREID\t\t\n                and SUBSTRING(cs.cushierarchypath, 0, 4) = 'VIR' /*'Virtamuuntajat'*/ )\ngroup by a.assetnum,a.itemnum", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.d_yritys": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "d_yritys", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\d_yritys.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\d_yritys.sql", "unique_id": "model.Fingrid.d_yritys", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "d_yritys"], "alias": "d_yritys", "checksum": {"name": "sha256", "checksum": "d7e870d71507ef3799fba2ba3881ae9dfb575a89d757dc17dc05780de75e801c"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Yritystiedot", "columns": {"COMPANY": {"name": "COMPANY", "description": "Primary key - yritystunnus", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "Yrityksen nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Katuosoite": {"name": "Katuosoite", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PTP": {"name": "PTP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Postinro": {"name": "Postinro", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Maa": {"name": "Maa", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YRITYSTUNNUS": {"name": "YRITYSTUNNUS", "description": "Yritystunnus sis\u00e4lt\u00e4en maakoodin (CUSVATCODE). Mik\u00e4li sit\u00e4 ei l\u00f6ydy k\u00e4ytet\u00e4\u00e4n CUSBUSINESSID yritystunnusta ilman maakoodia. Muussa tapauksessa k\u00e4ytet\u00e4\u00e4n REGISTRATION1 kent\u00e4n yritystunnusta.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANIESID": {"name": "COMPANIESID", "description": "Yrityksen ID (numeerinen)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSCRMCUSTOMERID": {"name": "CUSCRMCUSTOMERID", "description": "Yrityksen ID CRM:ss\u00e4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSCRMSTATUS": {"name": "CUSCRMSTATUS", "description": "Yrityksen status CRM:ss\u00e4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSCRMPARENT": {"name": "CUSCRMPARENT", "description": "Yrityksen emoyhti\u00f6n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.5893042, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_yritys`", "raw_code": "select \r\nCOMPANY\r\n, NAME\r\n, ADDRESS1 AS Katuosoite\r\n, ADDRESS2 AS PTP\r\n, ADDRESS4 AS Postinro\r\n, ADDRESS5 AS Maa\r\n, COALESCE(CUSVATCODE,CUSBUSINESSID, REGISTRATION1) AS YRITYSTUNNUS\r\n, COMPANIESID\r\n, CUSCRMCUSTOMERID\r\n, CUSCRMSTATUS\r\n, CUSVATCODE\r\n, CUSBUSINESSID\r\n, CUSCRMPARENT\r\nfrom {{ source('maximo', 'companies') }} c\r\nWHERE EXISTS (\r\n    SELECT 1 FROM {{ source('maximo', 'asset') }} AS a WHERE a.cusowner = c.COMPANY and a.status IN('OPERATING')) /* haetaan parentit vain scopessa oleville objekteille */", "language": "sql", "refs": [], "sources": [["maximo", "companies"], ["maximo", "asset"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.companies", "source.Fingrid.maximo.asset"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\d_yritys.sql", "compiled": true, "compiled_code": "select \nCOMPANY\n, NAME\n, ADDRESS1 AS Katuosoite\n, ADDRESS2 AS PTP\n, ADDRESS4 AS Postinro\n, ADDRESS5 AS Maa\n, COALESCE(CUSVATCODE,CUSBUSINESSID, REGISTRATION1) AS YRITYSTUNNUS\n, COMPANIESID\n, CUSCRMCUSTOMERID\n, CUSCRMSTATUS\n, CUSVATCODE\n, CUSBUSINESSID\n, CUSCRMPARENT\nfrom `clean_test`.`maximo`.`companies` c\nWHERE EXISTS (\n    SELECT 1 FROM `clean_test`.`maximo`.`asset` AS a WHERE a.cusowner = c.COMPANY and a.status IN('OPERATING')) /* haetaan parentit vain scopessa oleville objekteille */", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.f_sa_kunnossapitokustannus": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "f_sa_kunnossapitokustannus", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\f_sa_kunnossapitokustannus.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\f_sa_kunnossapitokustannus.sql", "unique_id": "model.Fingrid.f_sa_kunnossapitokustannus", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "f_sa_kunnossapitokustannus"], "alias": "f_sa_kunnossapitokustannus", "checksum": {"name": "sha256", "checksum": "81f36315215770e5f9ab982d241fc510d52904940ad0814787068970635c82dd"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Kunnossapitokustannukset. Yhdistetty pluspgbtrans- ja labtrans-taulujen tiedot. Cost_type erottaa kustannustyypin: tyyppi on palvelukustannus pluspgbtrans-taulun tiedoille ja ty\u00f6voimakustannus labtrans-taulun tiedoille. Koska kaikkia tietoja ei l\u00f6ydy molemmista tauluista, osalla kentist\u00e4 on arvona null - ks. tarkemmin kenttien kuvauksista.", "columns": {"cost_type": {"name": "cost_type", "description": "Palvelukustannus pluspgbtrans-taulun tiedoille ja ty\u00f6voimakustannus labtrans-taulun tiedoille.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pluspgbtransid": {"name": "pluspgbtransid", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "labtransid": {"name": "labtransid", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer": {"name": "customer", "description": "pluspgbtrans.customer ja labtrans.pluspcustomer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agreement": {"name": "agreement", "description": "pluspgbtrans.agreement ja labtrans.pluspagreement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transdate": {"name": "transdate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedate": {"name": "updatedate", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enterdate": {"name": "enterdate", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "startdate": {"name": "startdate", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paymenttransdate": {"name": "paymenttransdate", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "wonum": {"name": "wonum", "description": "pluspgbtrans.wonum ja labtrans.refwo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billprice": {"name": "billprice", "description": "pluspgbtrans.billprice ja labtrans.pluspbillprice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lineprice": {"name": "lineprice", "description": "pluspgbtrans.lineprice ja labtrans.plusplineprice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quotedprice": {"name": "quotedprice", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "linecost": {"name": "linecost", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plusppricesched": {"name": "plusppricesched", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origquotedate": {"name": "origquotedate", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origquoteprice": {"name": "origquoteprice", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusname": {"name": "cusname", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusquantity": {"name": "cusquantity", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusunit": {"name": "cusunit", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusunitprice": {"name": "cusunitprice", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pricesched": {"name": "pricesched", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesordernum": {"name": "salesordernum", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assetnum": {"name": "assetnum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusservice": {"name": "cusservice", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "laborcode": {"name": "laborcode", "description": "Foreign key to d_henkilo. Arvo null palvelukustannuksissa.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "craft": {"name": "craft", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payrate": {"name": "payrate", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "regularhrs": {"name": "regularhrs", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transtype": {"name": "transtype", "description": "arvo null palvelukustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "arvo null ty\u00f6voimakustannuksissa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revnum": {"name": "revnum", "description": "pluspgbtrans.revnum ja labtrans.plusprevnum", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.5653021, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitokustannus`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\n\r\nselect 'palvelukustannus' as cost_type\r\n     , pluspgbtransid\r\n     , null as labtransid\r\n     , customer\r\n     , agreement\r\n     , transdate\r\n     , updatedate\r\n     , null as enterdate\r\n     , null as startdate\r\n     , null as paymenttransdate\r\n     , wonum\r\n     , billprice\r\n     , lineprice\r\n     , quotedprice\r\n     , null as linecost\r\n     , null as plusppricesched\r\n     , origquotedate\r\n     , origquotedprice\r\n     , cusname\r\n     , cusquantity\r\n     , cusunit\r\n     , cusunitprice\r\n     , pricesched\r\n     , salesordernum\r\n     , assetnum\r\n     , null as location\r\n     , type\r\n     , cusservice\r\n     , null as laborcode\r\n     , null as craft\r\n     , null as payrate\r\n     , null as regularhrs\r\n     , null as transtype\r\n     , description\r\n     , revnum\r\n     , rowstamp \r\nfrom {{ source('maximo', 'pluspgbtrans') }}\r\nunion all\r\nselect 'ty\u00f6voimakustannus' as cost_type\r\n      , null as pluspgbtransid\r\n      , labtransid\r\n      , pluspcustomer as customer\r\n      , pluspagreement as agreement\r\n      , transdate\r\n      , null as updatedate\r\n      , enterdate\r\n      , startdate\r\n      , paymenttransdate\r\n      , refwo as wonum\r\n      , pluspbillprice as billprice\r\n      , plusplineprice as lineprice\r\n      , null as quotedprice\r\n      , linecost\r\n      , plusppricesched\r\n      , null as origquotedate\r\n      , null as origquoteprice\r\n      , null as cusname\r\n      , null as cusquantity\r\n      , null as cusunit\r\n      , null as cusunitprice\r\n      , null as pricesched\r\n      , null as salesordernum\r\n      , assetnum\r\n      , location\r\n      , null as type\r\n      , null as cusservice\r\n      , laborcode\r\n      , craft\r\n      , payrate\r\n      , regularhrs\r\n      , transtype\r\n      , null as description\r\n      , plusprevnum as revnum\r\n      , rowstamp \r\nfrom {{ source('maximo', 'labtrans') }}", "language": "sql", "refs": [], "sources": [["maximo", "pluspgbtrans"], ["maximo", "labtrans"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.pluspgbtrans", "source.Fingrid.maximo.labtrans"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\f_sa_kunnossapitokustannus.sql", "compiled": true, "compiled_code": "\n\nselect 'palvelukustannus' as cost_type\n     , pluspgbtransid\n     , null as labtransid\n     , customer\n     , agreement\n     , transdate\n     , updatedate\n     , null as enterdate\n     , null as startdate\n     , null as paymenttransdate\n     , wonum\n     , billprice\n     , lineprice\n     , quotedprice\n     , null as linecost\n     , null as plusppricesched\n     , origquotedate\n     , origquotedprice\n     , cusname\n     , cusquantity\n     , cusunit\n     , cusunitprice\n     , pricesched\n     , salesordernum\n     , assetnum\n     , null as location\n     , type\n     , cusservice\n     , null as laborcode\n     , null as craft\n     , null as payrate\n     , null as regularhrs\n     , null as transtype\n     , description\n     , revnum\n     , rowstamp \nfrom `clean_test`.`maximo`.`pluspgbtrans`\nunion all\nselect 'ty\u00f6voimakustannus' as cost_type\n      , null as pluspgbtransid\n      , labtransid\n      , pluspcustomer as customer\n      , pluspagreement as agreement\n      , transdate\n      , null as updatedate\n      , enterdate\n      , startdate\n      , paymenttransdate\n      , refwo as wonum\n      , pluspbillprice as billprice\n      , plusplineprice as lineprice\n      , null as quotedprice\n      , linecost\n      , plusppricesched\n      , null as origquotedate\n      , null as origquoteprice\n      , null as cusname\n      , null as cusquantity\n      , null as cusunit\n      , null as cusunitprice\n      , null as pricesched\n      , null as salesordernum\n      , assetnum\n      , location\n      , null as type\n      , null as cusservice\n      , laborcode\n      , craft\n      , payrate\n      , regularhrs\n      , transtype\n      , null as description\n      , plusprevnum as revnum\n      , rowstamp \nfrom `clean_test`.`maximo`.`labtrans`", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.f_sa_kunnossapitotyot": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "f_sa_kunnossapitotyot", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\f_sa_kunnossapitotyot.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\f_sa_kunnossapitotyot.sql", "unique_id": "model.Fingrid.f_sa_kunnossapitotyot", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "f_sa_kunnossapitotyot"], "alias": "f_sa_kunnossapitotyot", "checksum": {"name": "sha256", "checksum": "532ed1aefa2011f04aa74505ad2ec314c424d92f969b1e307bfb8d87e09951cb"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {"owner": "XXX"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Kunnossapitot\u00f6iden tiedot.", "columns": {"wonum": {"name": "wonum", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "glaccount": {"name": "glaccount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "istask": {"name": "istask", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worktype": {"name": "worktype", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assetnum": {"name": "assetnum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actstart": {"name": "actstart", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedstart": {"name": "schedstart", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea": {"name": "cusworkarea", "description": "Foreign key to d_tyoalueet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusoutage": {"name": "cusoutage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusout": {"name": "cusout", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusprimtl": {"name": "cusprimtl", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusprimbr": {"name": "cusprimbr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pluspcustomer": {"name": "pluspcustomer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "targstartdate": {"name": "targstartdate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "targcompdate": {"name": "targcompdate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedfinish": {"name": "schedfinish", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actfinish": {"name": "actfinish", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusbillnumber": {"name": "cusbillnumber", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "jpnum": {"name": "jpnum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pluscjprevnum": {"name": "pluscjprevnum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pmnum": {"name": "pmnum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classstructureid": {"name": "classstructureid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pluspagreement": {"name": "pluspagreement", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plusppricesched": {"name": "plusppricesched", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reportdate": {"name": "reportdate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failurecode": {"name": "failurecode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "problemcode": {"name": "problemcode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "wopriority": {"name": "wopriority", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusreportedpriority": {"name": "cusreportedpriority", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusrpwonum": {"name": "cusrpwonum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusprojectcode": {"name": "cusprojectcode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusdate": {"name": "statusdate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusspestimate": {"name": "cusspestimate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cuschargetype": {"name": "cuschargetype", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "XXX"}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi", "meta": {"owner": "XXX"}}, "created_at": 1683555523.5743048, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitotyot`", "raw_code": "{{ config(meta = {\r\n    'owner': 'XXX'\r\n    }\r\n) \r\n}}\r\n\r\nselect wonum\r\n     , glaccount\r\n     , istask\r\n     , worktype\r\n     , assetnum\r\n     , location\r\n     , actstart\r\n     , schedstart\r\n     , description\r\n     , cusworkarea\r\n     , status\r\n     , cusoutage\r\n     , cusout\r\n     , cusprimtl\r\n     , cusprimbr\r\n     , pluspcustomer\r\n     , targstartdate\r\n     , targcompdate\r\n     , schedfinish\r\n     , actfinish\r\n     , cusbillnumber\r\n     , jpnum\r\n     , pluscjprevnum\r\n     , pmnum\r\n     , classstructureid\r\n     , pluspagreement\r\n     , plusppricesched\r\n     , reportdate\r\n     , parent\r\n     , failurecode\r\n     , problemcode\r\n     , wopriority\r\n     , cusreportedpriority\r\n     , cusrpwonum\r\n     , cusprojectcode\r\n     , statusdate\r\n     , cusspestimate\r\n     , cuschargetype\r\n     , rowstamp\r\nfrom {{ source('maximo', 'workorder') }}", "language": "sql", "refs": [], "sources": [["maximo", "workorder"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.workorder"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\f_sa_kunnossapitotyot.sql", "compiled": true, "compiled_code": "\n\nselect wonum\n     , glaccount\n     , istask\n     , worktype\n     , assetnum\n     , location\n     , actstart\n     , schedstart\n     , description\n     , cusworkarea\n     , status\n     , cusoutage\n     , cusout\n     , cusprimtl\n     , cusprimbr\n     , pluspcustomer\n     , targstartdate\n     , targcompdate\n     , schedfinish\n     , actfinish\n     , cusbillnumber\n     , jpnum\n     , pluscjprevnum\n     , pmnum\n     , classstructureid\n     , pluspagreement\n     , plusppricesched\n     , reportdate\n     , parent\n     , failurecode\n     , problemcode\n     , wopriority\n     , cusreportedpriority\n     , cusrpwonum\n     , cusprojectcode\n     , statusdate\n     , cusspestimate\n     , cuschargetype\n     , rowstamp\nfrom `clean_test`.`maximo`.`workorder`", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.f_sa_laitemaarat": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_raportointi", "name": "f_sa_laitemaarat", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\raportointi\\f_sa_laitemaarat.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\f_sa_laitemaarat.sql", "unique_id": "model.Fingrid.f_sa_laitemaarat", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "f_sa_laitemaarat"], "alias": "f_sa_laitemaarat", "checksum": {"name": "sha256", "checksum": "39154a6134ca39f0cf36141eefa5f1434ac8fce54a481e86fd5929763412be6c"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_raportointi", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Laitem\u00e4\u00e4r\u00e4t s\u00e4hk\u00f6asemilla - kpl ja k\u00e4ytt\u00f6\u00f6nottovuosi - laite-, sijainti-, ty\u00f6alue- ja k\u00e4ytt\u00f6\u00f6nottovuositasoisesti.", "columns": {"ASSETNUM": {"name": "ASSETNUM", "description": "Laitteen tunnus, laitedimension viiteavain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCATION": {"name": "LOCATION", "description": "Laitesijainnin tunnus, laitepaikkadimension viiteavain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substation_location": {"name": "substation_location", "description": "Laitteeseen liittyv\u00e4n s\u00e4hk\u00f6aseman sijaintitunnus, s\u00e4hk\u00f6asemadimension viiteavain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusworkarea": {"name": "cusworkarea", "description": "Laitteen sijaintiin liittyv\u00e4 ty\u00f6alue, ty\u00f6aluedimension viiteavain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "glaccount": {"name": "glaccount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rowstamp": {"name": "rowstamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_raportointi"}, "created_at": 1683555523.5913043, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_laitemaarat`", "raw_code": "select \r\n--Dimension keys\r\na.ASSETNUM\r\n, a.LOCATION\r\n, toploc.location AS substation_location\r\n, loc.cusworkarea\r\n, a.CUSOWNER\r\n\r\n-- Measures\r\n, CAST(YEAR(loc.cusactcomdate) AS INT) AS Kayttoonottovuosi\r\n, CAST(1 AS INT) as Laite_kpl\r\n\r\nfrom {{ source('maximo', 'asset') }} a\r\njoin {{ source('maximo', 'classstructure') }} cs\r\non a.CLASSSTRUCTUREID = cs.CLASSSTRUCTUREID\r\nleft join {{ ref('sa_laiteluokittelu') }} clsh \r\non a.classstructureid = clsh.classstructureid\r\nleft join {{ source('maximo', 'locations') }} loc\r\non a.LOCATION = loc.LOCATION\r\nleft join {{ source('maximo', 'locations') }} toploc\r\non loc.CUSTOPLOCATION = toploc.cusbusinessid\r\nwhere toploc.classstructureid IN ('3696','3708') /* asema ja varavoimalaitos */\r\nand toploc.status IN('OPERATING')\r\nand a.status IN('OPERATING')", "language": "sql", "refs": [["sa_laiteluokittelu"]], "sources": [["maximo", "locations"], ["maximo", "classstructure"], ["maximo", "asset"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.Fingrid.maximo.locations", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.asset", "model.Fingrid.sa_laiteluokittelu"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\f_sa_laitemaarat.sql", "compiled": true, "compiled_code": "select \n--Dimension keys\na.ASSETNUM\n, a.LOCATION\n, toploc.location AS substation_location\n, loc.cusworkarea\n, a.CUSOWNER\n\n-- Measures\n, CAST(YEAR(loc.cusactcomdate) AS INT) AS Kayttoonottovuosi\n, CAST(1 AS INT) as Laite_kpl\n\nfrom `clean_test`.`maximo`.`asset` a\njoin `clean_test`.`maximo`.`classstructure` cs\non a.CLASSSTRUCTUREID = cs.CLASSSTRUCTUREID\nleft join `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`sa_laiteluokittelu` clsh \non a.classstructureid = clsh.classstructureid\nleft join `clean_test`.`maximo`.`locations` loc\non a.LOCATION = loc.LOCATION\nleft join `clean_test`.`maximo`.`locations` toploc\non loc.CUSTOPLOCATION = toploc.cusbusinessid\nwhere toploc.classstructureid IN ('3696','3708') /* asema ja varavoimalaitos */\nand toploc.status IN('OPERATING')\nand a.status IN('OPERATING')", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.substation_api": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta", "name": "substation_api", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\sa_kunnonhallinta\\substation_api.sql", "original_file_path": "models\\sa_kunnonhallinta\\sa_kunnonhallinta\\substation_api.sql", "unique_id": "model.Fingrid.substation_api", "fqn": ["Fingrid", "sa_kunnonhallinta", "sa_kunnonhallinta", "substation_api"], "alias": "substation_api", "checksum": {"name": "sha256", "checksum": "6dfa50e1cfad12dff5ec50e2c7a61ec450f4fe4c0a4e3c392a6f88d05d152f5d"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien tiedot api -n\u00e4kym\u00e4", "columns": {"abbreviation": {"name": "abbreviation", "description": "Substation abbreviation - s\u00e4hk\u00f6aseman lyhytnimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "substation_name - Aseman nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "location - Aseman sijainti", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "substation type - tukiaseman tyyppi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voltage": {"name": "voltage", "description": "voltage  - J\u00e4nnite", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workArea": {"name": "workArea", "description": "cusworkarea_desc  - s\u00e4hk\u00f6asemat tilaajan ty\u00f6alue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationalArea": {"name": "organizationalArea", "description": "region_description - s\u00e4hk\u00f6asemat_tilaajan_alue_nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cusowner": {"name": "cusowner", "description": "cusowner - Omistaja", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\sa_kunnonhallinta\\sa_kunnonhallinta.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta"}, "created_at": 1683555523.672385, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta`.`substation_api`", "raw_code": "SELECT substation_cusbusinessid AS abbreviation\r\n  , substation_name AS name\r\n  , substation_location as id\r\n  , tyyppi as type\r\n  , cusvoltage as voltage\r\n  , cusworkarea_desc as workArea\r\n  , region_description as organizationalArea\r\n  , status\r\n  , cusowner as owner\r\n  , postalcode\r\n  , city\r\n  , streetaddress\r\n  , directions\r\nFROM {{ ref('b_substations') }}\r\nWHERE status IN('OPERATING', 'PLANNED')", "language": "sql", "refs": [["b_substations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.Fingrid.b_substations"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\sa_kunnonhallinta\\substation_api.sql", "compiled": true, "compiled_code": "SELECT substation_cusbusinessid AS abbreviation\n  , substation_name AS name\n  , substation_location as id\n  , tyyppi as type\n  , cusvoltage as voltage\n  , cusworkarea_desc as workArea\n  , region_description as organizationalArea\n  , status\n  , cusowner as owner\n  , postalcode\n  , city\n  , streetaddress\n  , directions\nFROM `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`b_substations`\nWHERE status IN('OPERATING', 'PLANNED')", "extra_ctes_injected": true, "extra_ctes": []}, "model.Fingrid.substation_api_table": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta", "name": "substation_api_table", "resource_type": "model", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\sa_kunnonhallinta\\substation_api_table.sql", "original_file_path": "models\\sa_kunnonhallinta\\sa_kunnonhallinta\\substation_api_table.sql", "unique_id": "model.Fingrid.substation_api_table", "fqn": ["Fingrid", "sa_kunnonhallinta", "sa_kunnonhallinta", "substation_api_table"], "alias": "substation_api_table", "checksum": {"name": "sha256", "checksum": "69d8fe67c1fc2611a3790a2e8f12e0277579ce15d8122c2cedd6de85e6734e66"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "S\u00e4hk\u00f6asemien tiedot api - materialisoitu tauluksi", "columns": {"abbreviation": {"name": "abbreviation", "description": "Substation abbreviation - s\u00e4hk\u00f6aseman lyhytnimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "substation_name - Aseman nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "location - Aseman sijainti", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "substation type - tukiaseman tyyppi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voltage": {"name": "voltage", "description": "voltage  - J\u00e4nnite", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workArea": {"name": "workArea", "description": "cusworkarea_desc  - s\u00e4hk\u00f6asemat tilaajan ty\u00f6alue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationalArea": {"name": "organizationalArea", "description": "region_description - s\u00e4hk\u00f6asemat_tilaajan_alue_nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "substation status", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "owner - Omistaja", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "Fingrid://models\\sa_kunnonhallinta\\sa_kunnonhallinta\\sa_kunnonhallinta.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta"}, "created_at": 1683555523.6753464, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta`.`substation_api_table`", "raw_code": "{{ config(materialized='table') }}\r\n\r\n  SELECT substation_cusbusinessid AS abbreviation\r\n  , substation_name AS name\r\n  , substation_location as id\r\n  , tyyppi as type\r\n  , cusvoltage as voltage\r\n  , cusworkarea_desc as workArea\r\n  , region_description as organizationalArea\r\n  , status\r\n  , cusowner as owner\r\n  , postalcode\r\n  , city\r\n  , streetaddress\r\n  , directions\r\nFROM {{ ref('b_substations') }}\r\nWHERE status IN('OPERATING', 'PLANNED')", "language": "sql", "refs": [["b_substations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.Fingrid.b_substations"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\sa_kunnonhallinta\\substation_api_table.sql", "compiled": true, "compiled_code": "\n\n  SELECT substation_cusbusinessid AS abbreviation\n  , substation_name AS name\n  , substation_location as id\n  , tyyppi as type\n  , cusvoltage as voltage\n  , cusworkarea_desc as workArea\n  , region_description as organizationalArea\n  , status\n  , cusowner as owner\n  , postalcode\n  , city\n  , streetaddress\n  , directions\nFROM `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`b_substations`\nWHERE status IN('OPERATING', 'PLANNED')", "extra_ctes_injected": true, "extra_ctes": []}, "seed.Fingrid.r_sa_laitepaikkaryhmaluokittelu": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_enriched", "name": "r_sa_laitepaikkaryhmaluokittelu", "resource_type": "seed", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\r_sa_laitepaikkaryhmaluokittelu.csv", "original_file_path": "seeds\\sa_kunnonhallinta\\r_sa_laitepaikkaryhmaluokittelu.csv", "unique_id": "seed.Fingrid.r_sa_laitepaikkaryhmaluokittelu", "fqn": ["Fingrid", "sa_kunnonhallinta", "r_sa_laitepaikkaryhmaluokittelu"], "alias": "r_sa_laitepaikkaryhmaluokittelu", "checksum": {"name": "sha256", "checksum": "b754767ecc6ee2c195cbfe813b6081ff50a701745b8430c9da6bec83910cc374"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_enriched", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_enriched"}, "created_at": 1683555523.3973062, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`r_sa_laitepaikkaryhmaluokittelu`", "raw_code": "", "root_path": "C:\\repos\\FG\\Tietoallas-Varastoprojekti\\dbt-datamart"}, "seed.Fingrid.r_sa_laiteryhmaluokittelu": {"database": "verkon_kehitys_ja_kunnonhallinta_test", "schema": "sa_kunnonhallinta_enriched", "name": "r_sa_laiteryhmaluokittelu", "resource_type": "seed", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\r_sa_laiteryhmaluokittelu.csv", "original_file_path": "seeds\\sa_kunnonhallinta\\r_sa_laiteryhmaluokittelu.csv", "unique_id": "seed.Fingrid.r_sa_laiteryhmaluokittelu", "fqn": ["Fingrid", "sa_kunnonhallinta", "r_sa_laiteryhmaluokittelu"], "alias": "r_sa_laiteryhmaluokittelu", "checksum": {"name": "sha256", "checksum": "74a8ed89e45d9f7c9c8716d7b30a425639d0dbe99f325b5826783ab3f4fe420b"}, "config": {"enabled": true, "alias": null, "schema": "sa_kunnonhallinta_enriched", "database": "verkon_kehitys_ja_kunnonhallinta", "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "verkon_kehitys_ja_kunnonhallinta", "schema": "sa_kunnonhallinta_enriched"}, "created_at": 1683555523.3993003, "relation_name": "`verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`r_sa_laiteryhmaluokittelu`", "raw_code": "", "root_path": "C:\\repos\\FG\\Tietoallas-Varastoprojekti\\dbt-datamart"}, "test.Fingrid.not_null_b_substations_substation_cusbusinessid.7c0a7988b8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "substation_cusbusinessid", "model": "{{ get_where_subquery(ref('b_substations')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_b_substations_substation_cusbusinessid", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_b_substations_substation_cusbusinessid.sql", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched.yml", "unique_id": "test.Fingrid.not_null_b_substations_substation_cusbusinessid.7c0a7988b8", "fqn": ["Fingrid", "sa_kunnonhallinta", "enriched", "not_null_b_substations_substation_cusbusinessid"], "alias": "not_null_b_substations_substation_cusbusinessid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.490301, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["b_substations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.b_substations"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched.yml\\not_null_b_substations_substation_cusbusinessid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect substation_cusbusinessid\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`b_substations`\nwhere substation_cusbusinessid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "substation_cusbusinessid", "file_key_name": "models.b_substations"}, "test.Fingrid.not_null_b_substations_substation_location.df31376b0e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "substation_location", "model": "{{ get_where_subquery(ref('b_substations')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_b_substations_substation_location", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_b_substations_substation_location.sql", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched.yml", "unique_id": "test.Fingrid.not_null_b_substations_substation_location.df31376b0e", "fqn": ["Fingrid", "sa_kunnonhallinta", "enriched", "not_null_b_substations_substation_location"], "alias": "not_null_b_substations_substation_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.4913034, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["b_substations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.b_substations"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched.yml\\not_null_b_substations_substation_location.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect substation_location\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_enriched`.`b_substations`\nwhere substation_location is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "substation_location", "file_key_name": "models.b_substations"}, "test.Fingrid.not_null_d_toimittaja_pluspcustomerid.050e5bad7c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pluspcustomerid", "model": "{{ get_where_subquery(ref('d_toimittaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_toimittaja_pluspcustomerid", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_toimittaja_pluspcustomerid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_toimittaja_pluspcustomerid.050e5bad7c", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_toimittaja_pluspcustomerid"], "alias": "not_null_d_toimittaja_pluspcustomerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.5923047, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_toimittaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_toimittaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_toimittaja_pluspcustomerid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pluspcustomerid\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_toimittaja`\nwhere pluspcustomerid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pluspcustomerid", "file_key_name": "models.d_toimittaja"}, "test.Fingrid.unique_d_toimittaja_pluspcustomerid.3d9c171a5c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "pluspcustomerid", "model": "{{ get_where_subquery(ref('d_toimittaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_toimittaja_pluspcustomerid", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_toimittaja_pluspcustomerid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_toimittaja_pluspcustomerid.3d9c171a5c", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_toimittaja_pluspcustomerid"], "alias": "unique_d_toimittaja_pluspcustomerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.593304, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_toimittaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_toimittaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_toimittaja_pluspcustomerid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pluspcustomerid as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_toimittaja`\nwhere pluspcustomerid is not null\ngroup by pluspcustomerid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pluspcustomerid", "file_key_name": "models.d_toimittaja"}, "test.Fingrid.unique_d_toimittaja_customer.c7d356242d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer", "model": "{{ get_where_subquery(ref('d_toimittaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_toimittaja_customer", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_toimittaja_customer.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_toimittaja_customer.c7d356242d", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_toimittaja_customer"], "alias": "unique_d_toimittaja_customer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.5953038, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_toimittaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_toimittaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_toimittaja_customer.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_toimittaja`\nwhere customer is not null\ngroup by customer\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "customer", "file_key_name": "models.d_toimittaja"}, "test.Fingrid.not_null_d_henkilo_personid.1fd414bddd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "personid", "model": "{{ get_where_subquery(ref('d_henkilo')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_henkilo_personid", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_henkilo_personid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_henkilo_personid.1fd414bddd", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_henkilo_personid"], "alias": "not_null_d_henkilo_personid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.5963037, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_henkilo"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_henkilo"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_henkilo_personid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect personid\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`\nwhere personid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "personid", "file_key_name": "models.d_henkilo"}, "test.Fingrid.unique_d_henkilo_personid.8bb5149808": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "personid", "model": "{{ get_where_subquery(ref('d_henkilo')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_henkilo_personid", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_henkilo_personid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_henkilo_personid.8bb5149808", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_henkilo_personid"], "alias": "unique_d_henkilo_personid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.5973034, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_henkilo"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_henkilo"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_henkilo_personid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    personid as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`\nwhere personid is not null\ngroup by personid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "personid", "file_key_name": "models.d_henkilo"}, "test.Fingrid.relationships_d_henkilo_pluspcustomer__customer__ref_d_toimittaja_.176597c23d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('d_toimittaja')", "field": "customer", "column_name": "pluspcustomer", "model": "{{ get_where_subquery(ref('d_henkilo')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "relationships_d_henkilo_pluspcustomer__customer__ref_d_toimittaja_", "resource_type": "test", "package_name": "Fingrid", "path": "relationships_d_henkilo_290e8576a0a8584cd28c8116806dd18e.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.relationships_d_henkilo_pluspcustomer__customer__ref_d_toimittaja_.176597c23d", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "relationships_d_henkilo_pluspcustomer__customer__ref_d_toimittaja_"], "alias": "relationships_d_henkilo_290e8576a0a8584cd28c8116806dd18e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_d_henkilo_290e8576a0a8584cd28c8116806dd18e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_d_henkilo_290e8576a0a8584cd28c8116806dd18e"}, "created_at": 1683555523.5983024, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_d_henkilo_290e8576a0a8584cd28c8116806dd18e\") }}", "language": "sql", "refs": [["d_toimittaja"], ["d_henkilo"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_toimittaja", "model.Fingrid.d_henkilo"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\relationships_d_henkilo_290e8576a0a8584cd28c8116806dd18e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select pluspcustomer as from_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`\n    where pluspcustomer is not null\n),\n\nparent as (\n    select customer as to_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_toimittaja`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pluspcustomer", "file_key_name": "models.d_henkilo"}, "test.Fingrid.not_null_d_henkilo_laborcode.1e58a77d94": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "laborcode", "model": "{{ get_where_subquery(ref('d_henkilo')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_henkilo_laborcode", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_henkilo_laborcode.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_henkilo_laborcode.1e58a77d94", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_henkilo_laborcode"], "alias": "not_null_d_henkilo_laborcode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6073022, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_henkilo"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_henkilo"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_henkilo_laborcode.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect laborcode\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`\nwhere laborcode is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "laborcode", "file_key_name": "models.d_henkilo"}, "test.Fingrid.unique_d_henkilo_laborcode.2a09b25ed6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "laborcode", "model": "{{ get_where_subquery(ref('d_henkilo')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_henkilo_laborcode", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_henkilo_laborcode.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_henkilo_laborcode.2a09b25ed6", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_henkilo_laborcode"], "alias": "unique_d_henkilo_laborcode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6083024, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_henkilo"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_henkilo"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_henkilo_laborcode.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    laborcode as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`\nwhere laborcode is not null\ngroup by laborcode\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "laborcode", "file_key_name": "models.d_henkilo"}, "test.Fingrid.not_null_d_henkilo_personuid.55459bf527": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "personuid", "model": "{{ get_where_subquery(ref('d_henkilo')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_henkilo_personuid", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_henkilo_personuid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_henkilo_personuid.55459bf527", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_henkilo_personuid"], "alias": "not_null_d_henkilo_personuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.609323, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_henkilo"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_henkilo"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_henkilo_personuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect personuid\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`\nwhere personuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "personuid", "file_key_name": "models.d_henkilo"}, "test.Fingrid.unique_d_henkilo_personuid.847dd0e797": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "personuid", "model": "{{ get_where_subquery(ref('d_henkilo')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_henkilo_personuid", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_henkilo_personuid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_henkilo_personuid.847dd0e797", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_henkilo_personuid"], "alias": "unique_d_henkilo_personuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6103225, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_henkilo"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_henkilo"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_henkilo_personuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    personuid as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`\nwhere personuid is not null\ngroup by personuid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "personuid", "file_key_name": "models.d_henkilo"}, "test.Fingrid.not_null_d_tyoalueet_cusbusinessid.6056bd12a8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cusbusinessid", "model": "{{ get_where_subquery(ref('d_tyoalueet')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_tyoalueet_cusbusinessid", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_tyoalueet_cusbusinessid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_tyoalueet_cusbusinessid.6056bd12a8", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_tyoalueet_cusbusinessid"], "alias": "not_null_d_tyoalueet_cusbusinessid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.611322, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_tyoalueet"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_tyoalueet"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_tyoalueet_cusbusinessid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cusbusinessid\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_tyoalueet`\nwhere cusbusinessid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cusbusinessid", "file_key_name": "models.d_tyoalueet"}, "test.Fingrid.unique_d_tyoalueet_cusbusinessid.33e0b42812": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "cusbusinessid", "model": "{{ get_where_subquery(ref('d_tyoalueet')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_tyoalueet_cusbusinessid", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_tyoalueet_cusbusinessid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_tyoalueet_cusbusinessid.33e0b42812", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_tyoalueet_cusbusinessid"], "alias": "unique_d_tyoalueet_cusbusinessid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6123223, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_tyoalueet"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_tyoalueet"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_tyoalueet_cusbusinessid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cusbusinessid as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_tyoalueet`\nwhere cusbusinessid is not null\ngroup by cusbusinessid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cusbusinessid", "file_key_name": "models.d_tyoalueet"}, "test.Fingrid.not_null_d_sa_kunnossapitosopimus_pluspagreementid.41c6aa5a29": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pluspagreementid", "model": "{{ get_where_subquery(ref('d_sa_kunnossapitosopimus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_sa_kunnossapitosopimus_pluspagreementid", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_sa_kunnossapitosopimus_pluspagreementid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_sa_kunnossapitosopimus_pluspagreementid.41c6aa5a29", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_sa_kunnossapitosopimus_pluspagreementid"], "alias": "not_null_d_sa_kunnossapitosopimus_pluspagreementid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6133244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_sa_kunnossapitosopimus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_sa_kunnossapitosopimus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_sa_kunnossapitosopimus_pluspagreementid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pluspagreementid\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_kunnossapitosopimus`\nwhere pluspagreementid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pluspagreementid", "file_key_name": "models.d_sa_kunnossapitosopimus"}, "test.Fingrid.unique_d_sa_kunnossapitosopimus_pluspagreementid.39b8469583": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "pluspagreementid", "model": "{{ get_where_subquery(ref('d_sa_kunnossapitosopimus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_sa_kunnossapitosopimus_pluspagreementid", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_sa_kunnossapitosopimus_pluspagreementid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_sa_kunnossapitosopimus_pluspagreementid.39b8469583", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_sa_kunnossapitosopimus_pluspagreementid"], "alias": "unique_d_sa_kunnossapitosopimus_pluspagreementid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.614322, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_sa_kunnossapitosopimus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_sa_kunnossapitosopimus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_sa_kunnossapitosopimus_pluspagreementid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pluspagreementid as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_kunnossapitosopimus`\nwhere pluspagreementid is not null\ngroup by pluspagreementid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pluspagreementid", "file_key_name": "models.d_sa_kunnossapitosopimus"}, "test.Fingrid.unique_d_sa_kunnossapitosopimus_agreement.7fdb389545": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "agreement", "model": "{{ get_where_subquery(ref('d_sa_kunnossapitosopimus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_sa_kunnossapitosopimus_agreement", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_sa_kunnossapitosopimus_agreement.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_sa_kunnossapitosopimus_agreement.7fdb389545", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_sa_kunnossapitosopimus_agreement"], "alias": "unique_d_sa_kunnossapitosopimus_agreement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6163015, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_sa_kunnossapitosopimus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_sa_kunnossapitosopimus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_sa_kunnossapitosopimus_agreement.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    agreement as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_kunnossapitosopimus`\nwhere agreement is not null\ngroup by agreement\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "agreement", "file_key_name": "models.d_sa_kunnossapitosopimus"}, "test.Fingrid.relationships_d_sa_kunnossapitosopimus_customer__customer__ref_d_toimittaja_.db898073c1": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('d_toimittaja')", "field": "customer", "column_name": "customer", "model": "{{ get_where_subquery(ref('d_sa_kunnossapitosopimus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "relationships_d_sa_kunnossapitosopimus_customer__customer__ref_d_toimittaja_", "resource_type": "test", "package_name": "Fingrid", "path": "relationships_d_sa_kunnossapit_64e9f256826b79a0aa1c961fc6a49cf8.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.relationships_d_sa_kunnossapitosopimus_customer__customer__ref_d_toimittaja_.db898073c1", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "relationships_d_sa_kunnossapitosopimus_customer__customer__ref_d_toimittaja_"], "alias": "relationships_d_sa_kunnossapit_64e9f256826b79a0aa1c961fc6a49cf8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_d_sa_kunnossapit_64e9f256826b79a0aa1c961fc6a49cf8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_d_sa_kunnossapit_64e9f256826b79a0aa1c961fc6a49cf8"}, "created_at": 1683555523.6173298, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_d_sa_kunnossapit_64e9f256826b79a0aa1c961fc6a49cf8\") }}", "language": "sql", "refs": [["d_toimittaja"], ["d_sa_kunnossapitosopimus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_toimittaja", "model.Fingrid.d_sa_kunnossapitosopimus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\relationships_d_sa_kunnossapit_64e9f256826b79a0aa1c961fc6a49cf8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer as from_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_kunnossapitosopimus`\n    where customer is not null\n),\n\nparent as (\n    select customer as to_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_toimittaja`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "customer", "file_key_name": "models.d_sa_kunnossapitosopimus"}, "test.Fingrid.not_null_d_sa_laitepaikka_location.5f36287f07": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('d_sa_laitepaikka')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_sa_laitepaikka_location", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_sa_laitepaikka_location.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_sa_laitepaikka_location.5f36287f07", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_sa_laitepaikka_location"], "alias": "not_null_d_sa_laitepaikka_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6203218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_sa_laitepaikka"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_sa_laitepaikka"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_sa_laitepaikka_location.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_laitepaikka`\nwhere location is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location", "file_key_name": "models.d_sa_laitepaikka"}, "test.Fingrid.unique_d_sa_laitepaikka_location.056aff77f1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('d_sa_laitepaikka')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_sa_laitepaikka_location", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_sa_laitepaikka_location.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_sa_laitepaikka_location.056aff77f1", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_sa_laitepaikka_location"], "alias": "unique_d_sa_laitepaikka_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.621322, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_sa_laitepaikka"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_sa_laitepaikka"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_sa_laitepaikka_location.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_laitepaikka`\nwhere location is not null\ngroup by location\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location", "file_key_name": "models.d_sa_laitepaikka"}, "test.Fingrid.relationships_d_sa_laitepaikka_cusworkarea__cusbusinessid__ref_d_tyoalueet_.c6804d2949": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('d_tyoalueet')", "field": "cusbusinessid", "column_name": "cusworkarea", "model": "{{ get_where_subquery(ref('d_sa_laitepaikka')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "relationships_d_sa_laitepaikka_cusworkarea__cusbusinessid__ref_d_tyoalueet_", "resource_type": "test", "package_name": "Fingrid", "path": "relationships_d_sa_laitepaikka_481866434a16db833d08b15b733cb4ee.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.relationships_d_sa_laitepaikka_cusworkarea__cusbusinessid__ref_d_tyoalueet_.c6804d2949", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "relationships_d_sa_laitepaikka_cusworkarea__cusbusinessid__ref_d_tyoalueet_"], "alias": "relationships_d_sa_laitepaikka_481866434a16db833d08b15b733cb4ee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_d_sa_laitepaikka_481866434a16db833d08b15b733cb4ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_d_sa_laitepaikka_481866434a16db833d08b15b733cb4ee"}, "created_at": 1683555523.6223218, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_d_sa_laitepaikka_481866434a16db833d08b15b733cb4ee\") }}", "language": "sql", "refs": [["d_tyoalueet"], ["d_sa_laitepaikka"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_tyoalueet", "model.Fingrid.d_sa_laitepaikka"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\relationships_d_sa_laitepaikka_481866434a16db833d08b15b733cb4ee.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cusworkarea as from_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_laitepaikka`\n    where cusworkarea is not null\n),\n\nparent as (\n    select cusbusinessid as to_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_tyoalueet`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cusworkarea", "file_key_name": "models.d_sa_laitepaikka"}, "test.Fingrid.not_null_d_laitepaikka_primaarilaite_location.ff772a86ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('d_laitepaikka_primaarilaite')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_laitepaikka_primaarilaite_location", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_laitepaikka_primaarilaite_location.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_laitepaikka_primaarilaite_location.ff772a86ad", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_laitepaikka_primaarilaite_location"], "alias": "not_null_d_laitepaikka_primaarilaite_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6263223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_laitepaikka_primaarilaite"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_laitepaikka_primaarilaite"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_laitepaikka_primaarilaite_location.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_laitepaikka_primaarilaite`\nwhere location is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location", "file_key_name": "models.d_laitepaikka_primaarilaite"}, "test.Fingrid.unique_d_laitepaikka_primaarilaite_location.db94ef3297": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('d_laitepaikka_primaarilaite')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_laitepaikka_primaarilaite_location", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_laitepaikka_primaarilaite_location.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_laitepaikka_primaarilaite_location.db94ef3297", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_laitepaikka_primaarilaite_location"], "alias": "unique_d_laitepaikka_primaarilaite_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6273277, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_laitepaikka_primaarilaite"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_laitepaikka_primaarilaite"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_laitepaikka_primaarilaite_location.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_laitepaikka_primaarilaite`\nwhere location is not null\ngroup by location\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location", "file_key_name": "models.d_laitepaikka_primaarilaite"}, "test.Fingrid.relationships_d_laitepaikka_primaarilaite_cusworkarea__cusbusinessid__ref_d_tyoalueet_.b020b8bb47": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('d_tyoalueet')", "field": "cusbusinessid", "column_name": "cusworkarea", "model": "{{ get_where_subquery(ref('d_laitepaikka_primaarilaite')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "relationships_d_laitepaikka_primaarilaite_cusworkarea__cusbusinessid__ref_d_tyoalueet_", "resource_type": "test", "package_name": "Fingrid", "path": "relationships_d_laitepaikka_pr_56076d9643e1f666b041153c136cc085.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.relationships_d_laitepaikka_primaarilaite_cusworkarea__cusbusinessid__ref_d_tyoalueet_.b020b8bb47", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "relationships_d_laitepaikka_primaarilaite_cusworkarea__cusbusinessid__ref_d_tyoalueet_"], "alias": "relationships_d_laitepaikka_pr_56076d9643e1f666b041153c136cc085", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_d_laitepaikka_pr_56076d9643e1f666b041153c136cc085", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_d_laitepaikka_pr_56076d9643e1f666b041153c136cc085"}, "created_at": 1683555523.6283221, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_d_laitepaikka_pr_56076d9643e1f666b041153c136cc085\") }}", "language": "sql", "refs": [["d_tyoalueet"], ["d_laitepaikka_primaarilaite"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_tyoalueet", "model.Fingrid.d_laitepaikka_primaarilaite"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\relationships_d_laitepaikka_pr_56076d9643e1f666b041153c136cc085.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cusworkarea as from_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_laitepaikka_primaarilaite`\n    where cusworkarea is not null\n),\n\nparent as (\n    select cusbusinessid as to_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_tyoalueet`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cusworkarea", "file_key_name": "models.d_laitepaikka_primaarilaite"}, "test.Fingrid.not_null_d_laitepaikka_muuntaja_substation.6859d75351": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "substation", "model": "{{ get_where_subquery(ref('d_laitepaikka_muuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_laitepaikka_muuntaja_substation", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_laitepaikka_muuntaja_substation.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_laitepaikka_muuntaja_substation.6859d75351", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_laitepaikka_muuntaja_substation"], "alias": "not_null_d_laitepaikka_muuntaja_substation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.632315, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_laitepaikka_muuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_laitepaikka_muuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_laitepaikka_muuntaja_substation.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect substation\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_laitepaikka_muuntaja`\nwhere substation is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "substation", "file_key_name": "models.d_laitepaikka_muuntaja"}, "test.Fingrid.not_null_d_laitepaikka_muuntaja_location.84a6498004": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('d_laitepaikka_muuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_laitepaikka_muuntaja_location", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_laitepaikka_muuntaja_location.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_laitepaikka_muuntaja_location.84a6498004", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_laitepaikka_muuntaja_location"], "alias": "not_null_d_laitepaikka_muuntaja_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6333241, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_laitepaikka_muuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_laitepaikka_muuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_laitepaikka_muuntaja_location.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_laitepaikka_muuntaja`\nwhere location is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "location", "file_key_name": "models.d_laitepaikka_muuntaja"}, "test.Fingrid.relationships_d_laitepaikka_muuntaja_cusworkarea__cusbusinessid__ref_d_tyoalueet_.10661ddc6b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('d_tyoalueet')", "field": "cusbusinessid", "column_name": "cusworkarea", "model": "{{ get_where_subquery(ref('d_laitepaikka_muuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "relationships_d_laitepaikka_muuntaja_cusworkarea__cusbusinessid__ref_d_tyoalueet_", "resource_type": "test", "package_name": "Fingrid", "path": "relationships_d_laitepaikka_mu_a856f258b99391fc825982632f8b88ed.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.relationships_d_laitepaikka_muuntaja_cusworkarea__cusbusinessid__ref_d_tyoalueet_.10661ddc6b", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "relationships_d_laitepaikka_muuntaja_cusworkarea__cusbusinessid__ref_d_tyoalueet_"], "alias": "relationships_d_laitepaikka_mu_a856f258b99391fc825982632f8b88ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_d_laitepaikka_mu_a856f258b99391fc825982632f8b88ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_d_laitepaikka_mu_a856f258b99391fc825982632f8b88ed"}, "created_at": 1683555523.634323, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_d_laitepaikka_mu_a856f258b99391fc825982632f8b88ed\") }}", "language": "sql", "refs": [["d_tyoalueet"], ["d_laitepaikka_muuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_tyoalueet", "model.Fingrid.d_laitepaikka_muuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\relationships_d_laitepaikka_mu_a856f258b99391fc825982632f8b88ed.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cusworkarea as from_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_laitepaikka_muuntaja`\n    where cusworkarea is not null\n),\n\nparent as (\n    select cusbusinessid as to_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_tyoalueet`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cusworkarea", "file_key_name": "models.d_laitepaikka_muuntaja"}, "test.Fingrid.not_null_f_sa_kunnossapitokustannus_cost_type.0cdc144d92": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_type", "model": "{{ get_where_subquery(ref('f_sa_kunnossapitokustannus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_f_sa_kunnossapitokustannus_cost_type", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_f_sa_kunnossapitokustannus_cost_type.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_f_sa_kunnossapitokustannus_cost_type.0cdc144d92", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_f_sa_kunnossapitokustannus_cost_type"], "alias": "not_null_f_sa_kunnossapitokustannus_cost_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6383255, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["f_sa_kunnossapitokustannus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.f_sa_kunnossapitokustannus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_f_sa_kunnossapitokustannus_cost_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_type\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitokustannus`\nwhere cost_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cost_type", "file_key_name": "models.f_sa_kunnossapitokustannus"}, "test.Fingrid.unique_f_sa_kunnossapitokustannus_pluspgbtransid.6df9e01834": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "pluspgbtransid", "model": "{{ get_where_subquery(ref('f_sa_kunnossapitokustannus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_f_sa_kunnossapitokustannus_pluspgbtransid", "resource_type": "test", "package_name": "Fingrid", "path": "unique_f_sa_kunnossapitokustannus_pluspgbtransid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_f_sa_kunnossapitokustannus_pluspgbtransid.6df9e01834", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_f_sa_kunnossapitokustannus_pluspgbtransid"], "alias": "unique_f_sa_kunnossapitokustannus_pluspgbtransid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.639317, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["f_sa_kunnossapitokustannus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.f_sa_kunnossapitokustannus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_f_sa_kunnossapitokustannus_pluspgbtransid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pluspgbtransid as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitokustannus`\nwhere pluspgbtransid is not null\ngroup by pluspgbtransid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pluspgbtransid", "file_key_name": "models.f_sa_kunnossapitokustannus"}, "test.Fingrid.unique_f_sa_kunnossapitokustannus_labtransid.428fccf2dc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "labtransid", "model": "{{ get_where_subquery(ref('f_sa_kunnossapitokustannus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_f_sa_kunnossapitokustannus_labtransid", "resource_type": "test", "package_name": "Fingrid", "path": "unique_f_sa_kunnossapitokustannus_labtransid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_f_sa_kunnossapitokustannus_labtransid.428fccf2dc", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_f_sa_kunnossapitokustannus_labtransid"], "alias": "unique_f_sa_kunnossapitokustannus_labtransid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.640317, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["f_sa_kunnossapitokustannus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.f_sa_kunnossapitokustannus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_f_sa_kunnossapitokustannus_labtransid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    labtransid as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitokustannus`\nwhere labtransid is not null\ngroup by labtransid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "labtransid", "file_key_name": "models.f_sa_kunnossapitokustannus"}, "test.Fingrid.relationships_f_sa_kunnossapitokustannus_agreement__agreement__ref_d_sa_kunnossapitosopimus_.80b8700d64": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('d_sa_kunnossapitosopimus')", "field": "agreement", "column_name": "agreement", "model": "{{ get_where_subquery(ref('f_sa_kunnossapitokustannus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "relationships_f_sa_kunnossapitokustannus_agreement__agreement__ref_d_sa_kunnossapitosopimus_", "resource_type": "test", "package_name": "Fingrid", "path": "relationships_f_sa_kunnossapit_0cc94f4e00611d1bfebbfdafb416290c.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.relationships_f_sa_kunnossapitokustannus_agreement__agreement__ref_d_sa_kunnossapitosopimus_.80b8700d64", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "relationships_f_sa_kunnossapitokustannus_agreement__agreement__ref_d_sa_kunnossapitosopimus_"], "alias": "relationships_f_sa_kunnossapit_0cc94f4e00611d1bfebbfdafb416290c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_f_sa_kunnossapit_0cc94f4e00611d1bfebbfdafb416290c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_f_sa_kunnossapit_0cc94f4e00611d1bfebbfdafb416290c"}, "created_at": 1683555523.6423244, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_f_sa_kunnossapit_0cc94f4e00611d1bfebbfdafb416290c\") }}", "language": "sql", "refs": [["d_sa_kunnossapitosopimus"], ["f_sa_kunnossapitokustannus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_sa_kunnossapitosopimus", "model.Fingrid.f_sa_kunnossapitokustannus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\relationships_f_sa_kunnossapit_0cc94f4e00611d1bfebbfdafb416290c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select agreement as from_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitokustannus`\n    where agreement is not null\n),\n\nparent as (\n    select agreement as to_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sa_kunnossapitosopimus`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "agreement", "file_key_name": "models.f_sa_kunnossapitokustannus"}, "test.Fingrid.relationships_f_sa_kunnossapitokustannus_laborcode__laborcode__ref_d_henkilo_.74c6878279": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('d_henkilo')", "field": "laborcode", "column_name": "laborcode", "model": "{{ get_where_subquery(ref('f_sa_kunnossapitokustannus')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "relationships_f_sa_kunnossapitokustannus_laborcode__laborcode__ref_d_henkilo_", "resource_type": "test", "package_name": "Fingrid", "path": "relationships_f_sa_kunnossapit_730c6e24a232db58dbd8d0a4ab1a88be.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.relationships_f_sa_kunnossapitokustannus_laborcode__laborcode__ref_d_henkilo_.74c6878279", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "relationships_f_sa_kunnossapitokustannus_laborcode__laborcode__ref_d_henkilo_"], "alias": "relationships_f_sa_kunnossapit_730c6e24a232db58dbd8d0a4ab1a88be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_f_sa_kunnossapit_730c6e24a232db58dbd8d0a4ab1a88be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_f_sa_kunnossapit_730c6e24a232db58dbd8d0a4ab1a88be"}, "created_at": 1683555523.6453223, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_f_sa_kunnossapit_730c6e24a232db58dbd8d0a4ab1a88be\") }}", "language": "sql", "refs": [["d_henkilo"], ["f_sa_kunnossapitokustannus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_henkilo", "model.Fingrid.f_sa_kunnossapitokustannus"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\relationships_f_sa_kunnossapit_730c6e24a232db58dbd8d0a4ab1a88be.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select laborcode as from_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitokustannus`\n    where laborcode is not null\n),\n\nparent as (\n    select laborcode as to_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_henkilo`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "laborcode", "file_key_name": "models.f_sa_kunnossapitokustannus"}, "test.Fingrid.not_null_f_sa_kunnossapitotyot_wonum.45f4482649": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "wonum", "model": "{{ get_where_subquery(ref('f_sa_kunnossapitotyot')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_f_sa_kunnossapitotyot_wonum", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_f_sa_kunnossapitotyot_wonum.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_f_sa_kunnossapitotyot_wonum.45f4482649", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_f_sa_kunnossapitotyot_wonum"], "alias": "not_null_f_sa_kunnossapitotyot_wonum", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6493237, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["f_sa_kunnossapitotyot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.f_sa_kunnossapitotyot"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_f_sa_kunnossapitotyot_wonum.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect wonum\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitotyot`\nwhere wonum is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "wonum", "file_key_name": "models.f_sa_kunnossapitotyot"}, "test.Fingrid.unique_f_sa_kunnossapitotyot_wonum.1987f4a0eb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "wonum", "model": "{{ get_where_subquery(ref('f_sa_kunnossapitotyot')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_f_sa_kunnossapitotyot_wonum", "resource_type": "test", "package_name": "Fingrid", "path": "unique_f_sa_kunnossapitotyot_wonum.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_f_sa_kunnossapitotyot_wonum.1987f4a0eb", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_f_sa_kunnossapitotyot_wonum"], "alias": "unique_f_sa_kunnossapitotyot_wonum", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6503174, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["f_sa_kunnossapitotyot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.f_sa_kunnossapitotyot"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_f_sa_kunnossapitotyot_wonum.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    wonum as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitotyot`\nwhere wonum is not null\ngroup by wonum\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "wonum", "file_key_name": "models.f_sa_kunnossapitotyot"}, "test.Fingrid.relationships_f_sa_kunnossapitotyot_cusworkarea__cusbusinessid__ref_d_tyoalueet_.248563f171": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('d_tyoalueet')", "field": "cusbusinessid", "column_name": "cusworkarea", "model": "{{ get_where_subquery(ref('f_sa_kunnossapitotyot')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "relationships_f_sa_kunnossapitotyot_cusworkarea__cusbusinessid__ref_d_tyoalueet_", "resource_type": "test", "package_name": "Fingrid", "path": "relationships_f_sa_kunnossapit_1214e0007003d49d3a359168a8ff74b8.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.relationships_f_sa_kunnossapitotyot_cusworkarea__cusbusinessid__ref_d_tyoalueet_.248563f171", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "relationships_f_sa_kunnossapitotyot_cusworkarea__cusbusinessid__ref_d_tyoalueet_"], "alias": "relationships_f_sa_kunnossapit_1214e0007003d49d3a359168a8ff74b8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_f_sa_kunnossapit_1214e0007003d49d3a359168a8ff74b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_f_sa_kunnossapit_1214e0007003d49d3a359168a8ff74b8"}, "created_at": 1683555523.6513166, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_f_sa_kunnossapit_1214e0007003d49d3a359168a8ff74b8\") }}", "language": "sql", "refs": [["d_tyoalueet"], ["f_sa_kunnossapitotyot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_tyoalueet", "model.Fingrid.f_sa_kunnossapitotyot"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\relationships_f_sa_kunnossapit_1214e0007003d49d3a359168a8ff74b8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cusworkarea as from_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`f_sa_kunnossapitotyot`\n    where cusworkarea is not null\n),\n\nparent as (\n    select cusbusinessid as to_field\n    from `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_tyoalueet`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cusworkarea", "file_key_name": "models.f_sa_kunnossapitotyot"}, "test.Fingrid.not_null_d_erotin_ASSETNUM.bc289ace68": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_erotin')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_erotin_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_erotin_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_erotin_ASSETNUM.bc289ace68", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_erotin_ASSETNUM"], "alias": "not_null_d_erotin_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6543877, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_erotin"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_erotin"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_erotin_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ASSETNUM\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_erotin`\nwhere ASSETNUM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_erotin"}, "test.Fingrid.unique_d_erotin_ASSETNUM.51ba55c37f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_erotin')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_erotin_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_erotin_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_erotin_ASSETNUM.51ba55c37f", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_erotin_ASSETNUM"], "alias": "unique_d_erotin_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.655392, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_erotin"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_erotin"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_erotin_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ASSETNUM as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_erotin`\nwhere ASSETNUM is not null\ngroup by ASSETNUM\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_erotin"}, "test.Fingrid.not_null_d_katkaisija_ASSETNUM.da0ccb1d23": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_katkaisija')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_katkaisija_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_katkaisija_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_katkaisija_ASSETNUM.da0ccb1d23", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_katkaisija_ASSETNUM"], "alias": "not_null_d_katkaisija_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6563904, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_katkaisija"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_katkaisija"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_katkaisija_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ASSETNUM\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_katkaisija`\nwhere ASSETNUM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_katkaisija"}, "test.Fingrid.unique_d_katkaisija_ASSETNUM.aeaab35f99": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_katkaisija')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_katkaisija_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_katkaisija_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_katkaisija_ASSETNUM.aeaab35f99", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_katkaisija_ASSETNUM"], "alias": "unique_d_katkaisija_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6573074, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_katkaisija"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_katkaisija"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_katkaisija_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ASSETNUM as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_katkaisija`\nwhere ASSETNUM is not null\ngroup by ASSETNUM\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_katkaisija"}, "test.Fingrid.not_null_d_maadoituskytkin_ASSETNUM.910d11d791": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_maadoituskytkin')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_maadoituskytkin_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_maadoituskytkin_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_maadoituskytkin_ASSETNUM.910d11d791", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_maadoituskytkin_ASSETNUM"], "alias": "not_null_d_maadoituskytkin_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6583045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_maadoituskytkin"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_maadoituskytkin"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_maadoituskytkin_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ASSETNUM\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_maadoituskytkin`\nwhere ASSETNUM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_maadoituskytkin"}, "test.Fingrid.unique_d_maadoituskytkin_ASSETNUM.703484cfb0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_maadoituskytkin')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_maadoituskytkin_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_maadoituskytkin_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_maadoituskytkin_ASSETNUM.703484cfb0", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_maadoituskytkin_ASSETNUM"], "alias": "unique_d_maadoituskytkin_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6603892, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_maadoituskytkin"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_maadoituskytkin"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_maadoituskytkin_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ASSETNUM as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_maadoituskytkin`\nwhere ASSETNUM is not null\ngroup by ASSETNUM\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_maadoituskytkin"}, "test.Fingrid.not_null_d_muuntaja_ASSETNUM.5bc145a62b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_muuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_muuntaja_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_muuntaja_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_muuntaja_ASSETNUM.5bc145a62b", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_muuntaja_ASSETNUM"], "alias": "not_null_d_muuntaja_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6613898, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_muuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_muuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_muuntaja_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ASSETNUM\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_muuntaja`\nwhere ASSETNUM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_muuntaja"}, "test.Fingrid.unique_d_muuntaja_ASSETNUM.fbcb417006": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_muuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_muuntaja_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_muuntaja_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_muuntaja_ASSETNUM.fbcb417006", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_muuntaja_ASSETNUM"], "alias": "unique_d_muuntaja_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6623945, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_muuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_muuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_muuntaja_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ASSETNUM as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_muuntaja`\nwhere ASSETNUM is not null\ngroup by ASSETNUM\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_muuntaja"}, "test.Fingrid.not_null_d_virtamuuntaja_ASSETNUM.870790ba5a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_virtamuuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_virtamuuntaja_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_virtamuuntaja_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_virtamuuntaja_ASSETNUM.870790ba5a", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_virtamuuntaja_ASSETNUM"], "alias": "not_null_d_virtamuuntaja_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.66339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_virtamuuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_virtamuuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_virtamuuntaja_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ASSETNUM\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_virtamuuntaja`\nwhere ASSETNUM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_virtamuuntaja"}, "test.Fingrid.unique_d_virtamuuntaja_ASSETNUM.5f91fe2fcd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_virtamuuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_virtamuuntaja_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_virtamuuntaja_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_virtamuuntaja_ASSETNUM.5f91fe2fcd", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_virtamuuntaja_ASSETNUM"], "alias": "unique_d_virtamuuntaja_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6643047, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_virtamuuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_virtamuuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_virtamuuntaja_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ASSETNUM as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_virtamuuntaja`\nwhere ASSETNUM is not null\ngroup by ASSETNUM\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_virtamuuntaja"}, "test.Fingrid.not_null_d_jannitemuuntaja_ASSETNUM.6f9cafd5ba": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_jannitemuuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_jannitemuuntaja_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_jannitemuuntaja_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_jannitemuuntaja_ASSETNUM.6f9cafd5ba", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_jannitemuuntaja_ASSETNUM"], "alias": "not_null_d_jannitemuuntaja_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.666319, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_jannitemuuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_jannitemuuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_jannitemuuntaja_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ASSETNUM\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_jannitemuuntaja`\nwhere ASSETNUM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_jannitemuuntaja"}, "test.Fingrid.unique_d_jannitemuuntaja_ASSETNUM.0313c8aa19": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ASSETNUM", "model": "{{ get_where_subquery(ref('d_jannitemuuntaja')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "unique_d_jannitemuuntaja_ASSETNUM", "resource_type": "test", "package_name": "Fingrid", "path": "unique_d_jannitemuuntaja_ASSETNUM.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.unique_d_jannitemuuntaja_ASSETNUM.0313c8aa19", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "unique_d_jannitemuuntaja_ASSETNUM"], "alias": "unique_d_jannitemuuntaja_ASSETNUM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6673217, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_jannitemuuntaja"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_jannitemuuntaja"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\unique_d_jannitemuuntaja_ASSETNUM.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ASSETNUM as unique_field,\n    count(*) as n_records\n\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_jannitemuuntaja`\nwhere ASSETNUM is not null\ngroup by ASSETNUM\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ASSETNUM", "file_key_name": "models.d_jannitemuuntaja"}, "test.Fingrid.not_null_d_sahkoasema_substation_cusbusinessid.6f3c36128b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "substation_cusbusinessid", "model": "{{ get_where_subquery(ref('d_sahkoasema')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_sahkoasema_substation_cusbusinessid", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_sahkoasema_substation_cusbusinessid.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_sahkoasema_substation_cusbusinessid.6f3c36128b", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_sahkoasema_substation_cusbusinessid"], "alias": "not_null_d_sahkoasema_substation_cusbusinessid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.668317, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_sahkoasema"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_sahkoasema"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_sahkoasema_substation_cusbusinessid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect substation_cusbusinessid\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sahkoasema`\nwhere substation_cusbusinessid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "substation_cusbusinessid", "file_key_name": "models.d_sahkoasema"}, "test.Fingrid.not_null_d_sahkoasema_substation_location.d0e751ac33": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "substation_location", "model": "{{ get_where_subquery(ref('d_sahkoasema')) }}"}, "namespace": null}, "database": "test", "schema": "dbt_test__audit", "name": "not_null_d_sahkoasema_substation_location", "resource_type": "test", "package_name": "Fingrid", "path": "not_null_d_sahkoasema_substation_location.sql", "original_file_path": "models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml", "unique_id": "test.Fingrid.not_null_d_sahkoasema_substation_location.d0e751ac33", "fqn": ["Fingrid", "sa_kunnonhallinta", "raportointi", "not_null_d_sahkoasema_substation_location"], "alias": "not_null_d_sahkoasema_substation_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683555523.6693015, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["d_sahkoasema"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.Fingrid.d_sahkoasema"]}, "compiled_path": "target\\compiled\\Fingrid\\models\\sa_kunnonhallinta\\raportointi\\sa_kunnonhallinta_raportointi.yml\\not_null_d_sahkoasema_substation_location.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect substation_location\nfrom `verkon_kehitys_ja_kunnonhallinta_test`.`sa_kunnonhallinta_raportointi`.`d_sahkoasema`\nwhere substation_location is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "substation_location", "file_key_name": "models.d_sahkoasema"}}, "sources": {"source.Fingrid.dataproduct.substation_list": {"database": "publish_test", "schema": "data_product", "name": "substation_list", "resource_type": "source", "package_name": "Fingrid", "path": "models\\dataproduct_sources.yml", "original_file_path": "models\\dataproduct_sources.yml", "unique_id": "source.Fingrid.dataproduct.substation_list", "fqn": ["Fingrid", "dataproduct", "substation_list"], "source_name": "dataproduct", "source_description": "", "loader": "", "identifier": "substation_list", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`publish_test`.`data_product`.`substation_list`", "created_at": 1683555523.6753464}, "source.Fingrid.maximo.asset": {"database": "clean_test", "schema": "maximo", "name": "asset", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.asset", "fqn": ["Fingrid", "maximo", "asset"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "asset", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`asset`", "created_at": 1683555523.6753464}, "source.Fingrid.maximo.assetspec": {"database": "clean_test", "schema": "maximo", "name": "assetspec", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.assetspec", "fqn": ["Fingrid", "maximo", "assetspec"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "assetspec", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`assetspec`", "created_at": 1683555523.6753464}, "source.Fingrid.maximo.classstructure": {"database": "clean_test", "schema": "maximo", "name": "classstructure", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.classstructure", "fqn": ["Fingrid", "maximo", "classstructure"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "classstructure", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`classstructure`", "created_at": 1683555523.6753464}, "source.Fingrid.maximo.companies": {"database": "clean_test", "schema": "maximo", "name": "companies", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.companies", "fqn": ["Fingrid", "maximo", "companies"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "companies", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Maximo yritystaulu", "columns": {"COMPANY": {"name": "COMPANY", "description": "Primary key - yritystunnus", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "Yrityksen nimi", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS1": {"name": "ADDRESS1", "description": "Katuosoite", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS2": {"name": "ADDRESS2", "description": "Postitoimipaikka", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS4": {"name": "ADDRESS4", "description": "Postinumero", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS5": {"name": "ADDRESS5", "description": "Maa", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGISTRATION1": {"name": "REGISTRATION1", "description": "Yritystunnus (Maximo)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSVATCODE": {"name": "CUSVATCODE", "description": "Yritystunnus sis\u00e4lt\u00e4en maatunnuksen", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSBUSINESSID": {"name": "CUSBUSINESSID", "description": "Yritystunnus", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANIESID": {"name": "COMPANIESID", "description": "Yrityksen ID (numeerinen)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSCRMCUSTOMERID": {"name": "CUSCRMCUSTOMERID", "description": "Yrityksen ID CRM:ss\u00e4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSCRMSTATUS": {"name": "CUSCRMSTATUS", "description": "Yrityksen status CRM:ss\u00e4", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSCRMPARENT": {"name": "CUSCRMPARENT", "description": "Yrityksen emoyhti\u00f6n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`companies`", "created_at": 1683555523.6763895}, "source.Fingrid.maximo.ASSETNUM": {"database": "clean_test", "schema": "maximo", "name": "ASSETNUM", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.ASSETNUM", "fqn": ["Fingrid", "maximo", "ASSETNUM"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "ASSETNUM", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Laitteen tunnus, laitedimension viiteavain", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`ASSETNUM`", "created_at": 1683555523.6763895}, "source.Fingrid.maximo.LOCATION": {"database": "clean_test", "schema": "maximo", "name": "LOCATION", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.LOCATION", "fqn": ["Fingrid", "maximo", "LOCATION"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "LOCATION", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Laitesijainnin tunnus, laitepaikkadimension viiteavain", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`LOCATION`", "created_at": 1683555523.6763895}, "source.Fingrid.maximo.l_classstructure": {"database": "clean_test", "schema": "maximo", "name": "l_classstructure", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.l_classstructure", "fqn": ["Fingrid", "maximo", "l_classstructure"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "l_classstructure", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`l_classstructure`", "created_at": 1683555523.6763895}, "source.Fingrid.maximo.labor": {"database": "clean_test", "schema": "maximo", "name": "labor", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.labor", "fqn": ["Fingrid", "maximo", "labor"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "labor", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`labor`", "created_at": 1683555523.6763895}, "source.Fingrid.maximo.labtrans": {"database": "clean_test", "schema": "maximo", "name": "labtrans", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.labtrans", "fqn": ["Fingrid", "maximo", "labtrans"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "labtrans", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`labtrans`", "created_at": 1683555523.6763895}, "source.Fingrid.maximo.locations": {"database": "clean_test", "schema": "maximo", "name": "locations", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.locations", "fqn": ["Fingrid", "maximo", "locations"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "locations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`locations`", "created_at": 1683555523.6763895}, "source.Fingrid.maximo.locationspec": {"database": "clean_test", "schema": "maximo", "name": "locationspec", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.locationspec", "fqn": ["Fingrid", "maximo", "locationspec"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "locationspec", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`locationspec`", "created_at": 1683555523.6773045}, "source.Fingrid.maximo.lochierarchy": {"database": "clean_test", "schema": "maximo", "name": "lochierarchy", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.lochierarchy", "fqn": ["Fingrid", "maximo", "lochierarchy"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "lochierarchy", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`lochierarchy`", "created_at": 1683555523.6773045}, "source.Fingrid.maximo.person": {"database": "clean_test", "schema": "maximo", "name": "person", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.person", "fqn": ["Fingrid", "maximo", "person"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "person", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`person`", "created_at": 1683555523.6773045}, "source.Fingrid.maximo.pluspagreement": {"database": "clean_test", "schema": "maximo", "name": "pluspagreement", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.pluspagreement", "fqn": ["Fingrid", "maximo", "pluspagreement"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "pluspagreement", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`pluspagreement`", "created_at": 1683555523.6773045}, "source.Fingrid.maximo.pluspcustomer": {"database": "clean_test", "schema": "maximo", "name": "pluspcustomer", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.pluspcustomer", "fqn": ["Fingrid", "maximo", "pluspcustomer"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "pluspcustomer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`pluspcustomer`", "created_at": 1683555523.6773045}, "source.Fingrid.maximo.pluspgbtrans": {"database": "clean_test", "schema": "maximo", "name": "pluspgbtrans", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.pluspgbtrans", "fqn": ["Fingrid", "maximo", "pluspgbtrans"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "pluspgbtrans", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`pluspgbtrans`", "created_at": 1683555523.6773045}, "source.Fingrid.maximo.serviceaddress": {"database": "clean_test", "schema": "maximo", "name": "serviceaddress", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.serviceaddress", "fqn": ["Fingrid", "maximo", "serviceaddress"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "serviceaddress", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`serviceaddress`", "created_at": 1683555523.6773045}, "source.Fingrid.maximo.workorder": {"database": "clean_test", "schema": "maximo", "name": "workorder", "resource_type": "source", "package_name": "Fingrid", "path": "models\\maximo_sources.yml", "original_file_path": "models\\maximo_sources.yml", "unique_id": "source.Fingrid.maximo.workorder", "fqn": ["Fingrid", "maximo", "workorder"], "source_name": "maximo", "source_description": "", "loader": "", "identifier": "workorder", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`clean_test`.`maximo`.`workorder`", "created_at": 1683555523.6773045}}, "macros": {"macro.Fingrid.comment_clause": {"name": "comment_clause", "resource_type": "macro", "package_name": "Fingrid", "path": "macros\\comment_clause.sql", "original_file_path": "macros\\comment_clause.sql", "unique_id": "macro.Fingrid.comment_clause", "macro_sql": "{% macro comment_clause() %}\r\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\r\n\r\n{# TODO: alla olevan logiikan korjaus, niin ett\u00e4 toimisi #}\r\n  {%- if model.is_view %}\r\n    {%- set view_doc_string = 'See details tab for view definition. '-%}\r\n  {%- else -%}\r\n    {%- set view_doc_string = ''-%}\r\n  {% endif %}\r\n\r\n\r\n  {%- set dbt_doc_string -%}\r\n    See [DBT docs]({{ var(\"dbt_docs_root_url\") }}/model.{{model.package_name}}.{{model.name}}) for documentation.\r\n  {% endset %}\r\n\r\n  {%- if raw_persist_docs is mapping -%}\r\n    {%- set raw_relation = raw_persist_docs.get('relation', false) -%}\r\n      {%- if raw_relation -%}\r\n      comment \r\n'{{ model.description | replace(\"'\", \"\\\\'\") }}\r\n{{view_doc_string}}{{dbt_doc_string}}'\r\n      {% endif %}\r\n  {%- elif raw_persist_docs -%}\r\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\r\n  {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.353784, "supported_languages": null}, "macro.Fingrid.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "Fingrid", "path": "macros\\generate_database_name.sql", "original_file_path": "macros\\generate_database_name.sql", "unique_id": "macro.Fingrid.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\r\n\r\n    {%- set default_database = target.database -%}\r\n    {%- if custom_database_name is none -%}\r\n\r\n        {{ default_database }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_database_name | trim }}_{{ target.database }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.354788, "supported_languages": null}, "macro.Fingrid.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "Fingrid", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "unique_id": "macro.Fingrid.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set production_targets = ('dev','test','prod', 'databricks_cluster') -%}\r\n\r\n    {%- set prefixed_schemas = ('meta','temp') -%}\r\n\r\n    {#\r\n        Definitions:\r\n            - custom_schema_name: schema provided via dbt_project.yml or model config\r\n            - target.schema: schema provided by the target defined in profiles.yml\r\n            - target.name: name of the target (dev , test, prod for production, etc.)\r\n        \r\n\r\n        Sample schema name outputs: Target.name, target.schema, custom_schema\r\n        (dev, dbtdev, dm) = dm\r\n        (ddev, dbtdev, dm) = dbtdev_dm\r\n        (prod, dbtdev, dm) = dm  \r\n        \r\n        (dev, developer1, bdv) = bdv\r\n        (dtest, developer1, bdv) = developer1_bdv\r\n        (prod, developer1, bdv) = tmurphy_scratch_staging\r\n  \r\n    #}\r\n    {%- if target.name in production_targets -%}\r\n        \r\n        {%- if custom_schema_name in prefixed_schemas -%}\r\n\r\n            {{ target.schema.lower() }}_{{ custom_schema_name | trim }}\r\n\r\n        {%- elif custom_schema_name is none -%}\r\n\r\n            {{ target.schema.lower() | trim }}\r\n\r\n        {%- else -%}\r\n            \r\n            {{ custom_schema_name.lower() | trim }}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- else -%}\r\n    \r\n        {%- if custom_schema_name is none -%}\r\n\r\n            {{ target.schema.lower() | trim }}\r\n\r\n        {%- else -%}\r\n            \r\n            {{ target.schema.lower() }}_{{ custom_schema_name | trim }}\r\n\r\n        {%- endif -%}\r\n      {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3557847, "supported_languages": null}, "macro.Fingrid.set_permissions_catalog_all_permissions": {"name": "set_permissions_catalog_all_permissions", "resource_type": "macro", "package_name": "Fingrid", "path": "macros\\set_permissions_catalog_all_permissions.sql", "original_file_path": "macros\\set_permissions_catalog_all_permissions.sql", "unique_id": "macro.Fingrid.set_permissions_catalog_all_permissions", "macro_sql": "{% macro set_permissions_catalog_all_permissions(target_catalog, target_user) %}\r\n/*\r\nAssigns all permissions to the target catalog for target user group\r\n\r\nCall example:\r\n> dbt run-operation set_permissions_catalog_all_permissions  --args '{target_catalog: verkon_kehitys_ja_kunnonhallinta_test, target_user: account users}' --target test\r\n*/\r\n{% set set_permissions_statements %}\r\nGRANT ALL PRIVILEGES ON CATALOG {{ target_catalog }} TO `{{target_user}}`\r\n{% endset %}\r\n\r\n {% do log('SQL statement to be run: ' + set_permissions_statements, info=True) %}\r\n {% do run_query(set_permissions_statements) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3567886, "supported_languages": null}, "macro.Fingrid.set_permissions_catalog_owner": {"name": "set_permissions_catalog_owner", "resource_type": "macro", "package_name": "Fingrid", "path": "macros\\set_permissions_catalog_owner.sql", "original_file_path": "macros\\set_permissions_catalog_owner.sql", "unique_id": "macro.Fingrid.set_permissions_catalog_owner", "macro_sql": "{% macro set_permissions_catalog_owner(target_catalog, target_user) %}\r\n/*\r\nTransfers the ownership of the catalog to target user group\r\n\r\nCall example:\r\n> dbt run-operation set_permissions_catalog_owner  --args '{target_catalog: verkon_kehitys_ja_kunnonhallinta_test, target_user: account users}' --target test\r\n*/\r\n\r\n{% set set_permissions_statements %}\r\nALTER CATALOG {{ target_catalog }} SET OWNER TO `{{target_user}}`\r\n{% endset %}\r\n\r\n {% do log('SQL statement to be run: ' + set_permissions_statements, info=True) %}\r\n {% do run_query(set_permissions_statements) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3576982, "supported_languages": null}, "macro.Fingrid.set_permissions_main": {"name": "set_permissions_main", "resource_type": "macro", "package_name": "Fingrid", "path": "macros\\set_permissions_main.sql", "original_file_path": "macros\\set_permissions_main.sql", "unique_id": "macro.Fingrid.set_permissions_main", "macro_sql": "{% macro set_permissions_main() %}\r\n\r\n/*\r\nSets the predefined set of permissions to the target environment\r\n\r\nCall example:\r\n> dbt run-operation set_permissions_main  --target test\r\n\r\n*/\r\n\r\n{% set target_catalog_name = generate_database_name('verkon_kehitys_ja_kunnonhallinta') %}\r\n\r\n-- Set all permissions to users/user groups\r\n{{ set_permissions_catalog_all_permissions(target_catalog_name,'account users') }}\r\n{{ set_permissions_catalog_all_permissions(target_catalog_name,'GRP AAD Databricks DATPLAT Test DW Team') }}\r\n{{ set_permissions_catalog_all_permissions(target_catalog_name,'joona.saynevirta@fingrid.fi') }}\r\n{{ set_permissions_catalog_all_permissions(target_catalog_name,'janne.lappi@fingrid.fi') }}\r\n\r\n-- Transfer catalog level owner to user group \r\n{{ set_permissions_catalog_owner(target_catalog_name,'GRP AAD Databricks DATPLAT Test DW Team') }}\r\n\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.Fingrid.generate_database_name", "macro.Fingrid.set_permissions_catalog_all_permissions", "macro.Fingrid.set_permissions_catalog_owner"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3587623, "supported_languages": null}, "macro.dbt_databricks.databricks__file_format_clause": {"name": "databricks__file_format_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__file_format_clause", "macro_sql": "{% macro databricks__file_format_clause() %}\n  {%- set file_format = config.get('file_format', default='delta') -%}\n  {%- if file_format is not none %}\n    using {{ file_format }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.367789, "supported_languages": null}, "macro.dbt_databricks.databricks__options_clause": {"name": "databricks__options_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__options_clause", "macro_sql": "{% macro databricks__options_clause() -%}\n  {%- set options = config.get('options') -%}\n  {%- if config.get('file_format', default='delta') == 'hudi' -%}\n    {%- set unique_key = config.get('unique_key') -%}\n    {%- if unique_key is not none and options is none -%}\n      {%- set options = {'primaryKey': config.get('unique_key')} -%}\n    {%- elif unique_key is not none and options is not none and 'primaryKey' not in options -%}\n      {%- set _ = options.update({'primaryKey': config.get('unique_key')}) -%}\n    {%- elif options is not none and 'primaryKey' in options and options['primaryKey'] != unique_key -%}\n      {{ exceptions.raise_compiler_error(\"unique_key and options('primaryKey') should be the same column(s).\") }}\n    {%- endif %}\n  {%- endif %}\n\n  {%- if options is not none %}\n    options (\n      {%- for option in options -%}\n      {{ option }} \"{{ options[option] }}\" {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3698072, "supported_languages": null}, "macro.dbt_databricks.tblproperties_clause": {"name": "tblproperties_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.tblproperties_clause", "macro_sql": "{% macro tblproperties_clause() -%}\n  {{ return(adapter.dispatch('tblproperties_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.370786, "supported_languages": null}, "macro.dbt_databricks.databricks__tblproperties_clause": {"name": "databricks__tblproperties_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__tblproperties_clause", "macro_sql": "{% macro databricks__tblproperties_clause() -%}\n  {%- set tblproperties = config.get('tblproperties') -%}\n  {%- if tblproperties is not none %}\n    tblproperties (\n      {%- for prop in tblproperties -%}\n      '{{ prop }}' = '{{ tblproperties[prop] }}' {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.370786, "supported_languages": null}, "macro.dbt_databricks.databricks__create_table_as": {"name": "databricks__create_table_as", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__create_table_as", "macro_sql": "{% macro databricks__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- if temporary -%}\n      {{ create_temporary_view(relation, compiled_code) }}\n    {%- else -%}\n      {% if config.get('file_format', default='delta') == 'delta' %}\n        create or replace table {{ relation }}\n      {% else %}\n        create table {{ relation }}\n      {% endif %}\n      {{ file_format_clause() }}\n      {{ options_clause() }}\n      {{ partition_cols(label=\"partitioned by\") }}\n      {{ clustered_cols(label=\"clustered by\") }}\n      {{ location_clause() }}\n      {{ comment_clause() }}\n      {{ tblproperties_clause() }}\n      as\n      {{ compiled_code }}\n    {%- endif -%}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation) }}\n  {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt_spark.file_format_clause", "macro.dbt_spark.options_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.Fingrid.comment_clause", "macro.dbt_databricks.tblproperties_clause", "macro.dbt_spark.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3728013, "supported_languages": null}, "macro.dbt_databricks.databricks__create_view_as": {"name": "databricks__create_view_as", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__create_view_as", "macro_sql": "{% macro databricks__create_view_as(relation, sql) -%}\n  create or replace view {{ relation }}\n  {{ comment_clause() }}\n  {{ tblproperties_clause() }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.Fingrid.comment_clause", "macro.dbt_databricks.tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3728013, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_column_comment": {"name": "databricks__alter_column_comment", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__alter_column_comment", "macro_sql": "{% macro databricks__alter_column_comment(relation, column_dict) %}\n  {% if config.get('file_format', default='delta') in ['delta', 'hudi'] %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n      {% set comment_query %}\n        alter table {{ relation }} change column\n            {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n            comment '{{ escaped_comment }}';\n      {% endset %}\n      {% do run_query(comment_query) %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.373779, "supported_languages": null}, "macro.dbt_databricks.persist_constraints": {"name": "persist_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.persist_constraints", "macro_sql": "{% macro persist_constraints(relation, model) %}\n  {{ return(adapter.dispatch('persist_constraints', 'dbt')(relation, model)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.373779, "supported_languages": null}, "macro.dbt_databricks.databricks__persist_constraints": {"name": "databricks__persist_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__persist_constraints", "macro_sql": "{% macro databricks__persist_constraints(relation, model) %}\n  {% if config.get('persist_constraints', False) and config.get('file_format', 'delta') == 'delta' %}\n    {% do alter_table_add_constraints(relation, model.meta.constraints) %}\n    {% do alter_column_set_constraints(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.alter_table_add_constraints", "macro.dbt_databricks.alter_column_set_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3747885, "supported_languages": null}, "macro.dbt_databricks.alter_table_add_constraints": {"name": "alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.alter_table_add_constraints", "macro_sql": "{% macro alter_table_add_constraints(relation, constraints) %}\n  {{ return(adapter.dispatch('alter_table_add_constraints', 'dbt')(relation, constraints)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_table_add_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3756979, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_table_add_constraints": {"name": "databricks__alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__alter_table_add_constraints", "macro_sql": "{% macro databricks__alter_table_add_constraints(relation, constraints) %}\n  {% if constraints is sequence %}\n    {% for constraint in constraints %}\n      {% set name = constraint['name'] %}\n      {% if not name %}\n        {{ exceptions.raise_compiler_error('Invalid check constraint name: ' ~ name) }}\n      {% endif %}\n      {% set condition = constraint['condition'] %}\n      {% if not condition %}\n        {{ exceptions.raise_compiler_error('Invalid check constraint condition: ' ~ condition) }}\n      {% endif %}\n      {# Skip if the update is incremental. #}\n      {% if not is_incremental() %}\n        {% call statement() %}\n          alter table {{ relation }} add constraint {{ name }} check ({{ condition }});\n        {% endcall %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3767786, "supported_languages": null}, "macro.dbt_databricks.alter_column_set_constraints": {"name": "alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.alter_column_set_constraints", "macro_sql": "{% macro alter_column_set_constraints(relation, column_dict) %}\n  {{ return(adapter.dispatch('alter_column_set_constraints', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_column_set_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3767786, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_column_set_constraints": {"name": "databricks__alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__alter_column_set_constraints", "macro_sql": "{% macro databricks__alter_column_set_constraints(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set constraint = column_dict[column_name]['meta']['constraint'] %}\n    {% if constraint %}\n      {% if constraint != 'not_null' %}\n        {{ exceptions.raise_compiler_error('Invalid constraint for column ' ~ column_name ~ '. Only `not_null` is supported.') }}\n      {% endif %}\n      {% set quoted_name = adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name %}\n      {% call statement() %}\n        alter table {{ relation }} change column {{ quoted_name }} set not null\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3777008, "supported_languages": null}, "macro.dbt_databricks.databricks__list_relations_without_caching": {"name": "databricks__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__list_relations_without_caching", "macro_sql": "{% macro databricks__list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.get_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3787796, "supported_languages": null}, "macro.dbt_databricks.show_table_extended": {"name": "show_table_extended", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.show_table_extended", "macro_sql": "{% macro show_table_extended(schema_relation) %}\n  {{ return(adapter.dispatch('show_table_extended', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_table_extended"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3787796, "supported_languages": null}, "macro.dbt_databricks.databricks__show_table_extended": {"name": "databricks__show_table_extended", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__show_table_extended", "macro_sql": "{% macro databricks__show_table_extended(schema_relation) %}\n  {% call statement('show_table_extended', fetch_result=True) -%}\n    show table extended in {{ schema_relation.without_identifier() }} like '{{ schema_relation.identifier }}'\n  {% endcall %}\n\n  {% do return(load_result('show_table_extended').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3796983, "supported_languages": null}, "macro.dbt_databricks.show_tables": {"name": "show_tables", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.show_tables", "macro_sql": "{% macro show_tables(relation) %}\n  {{ return(adapter.dispatch('show_tables', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_tables"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3796983, "supported_languages": null}, "macro.dbt_databricks.databricks__show_tables": {"name": "databricks__show_tables", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__show_tables", "macro_sql": "{% macro databricks__show_tables(relation) %}\n  {% call statement('show_tables', fetch_result=True) -%}\n    show tables in {{ relation }}\n  {% endcall %}\n\n  {% do return(load_result('show_tables').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3807209, "supported_languages": null}, "macro.dbt_databricks.show_views": {"name": "show_views", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.show_views", "macro_sql": "{% macro show_views(relation) %}\n  {{ return(adapter.dispatch('show_views', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_views"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3807209, "supported_languages": null}, "macro.dbt_databricks.databricks__show_views": {"name": "databricks__show_views", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__show_views", "macro_sql": "{% macro databricks__show_views(relation) %}\n  {% call statement('show_views', fetch_result=True) -%}\n    show views in {{ relation }}\n  {% endcall %}\n\n  {% do return(load_result('show_views').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3807209, "supported_languages": null}, "macro.dbt_databricks.databricks__generate_database_name": {"name": "databricks__generate_database_name", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__generate_database_name", "macro_sql": "{% macro databricks__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n        {{ return(default_database) }}\n    {%- else -%}\n        {{ return(custom_database_name) }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3817143, "supported_languages": null}, "macro.dbt_databricks.databricks__make_temp_relation": {"name": "databricks__make_temp_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__make_temp_relation", "macro_sql": "{% macro databricks__make_temp_relation(base_relation, suffix='__dbt_tmp', as_table=False) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {%- if as_table -%}\n        {% set tmp_relation = api.Relation.create(\n            identifier=tmp_identifier,\n            schema=base_relation.schema,\n            database=base_relation.database,\n            type='table') %}\n    {%- else -%}\n        {% set tmp_relation = api.Relation.create(identifier=tmp_identifier, type='view') %}\n    {%- endif -%}\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3827174, "supported_languages": null}, "macro.dbt_databricks.databricks__get_or_create_relation": {"name": "databricks__get_or_create_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_databricks.databricks__get_or_create_relation", "macro_sql": "{% macro databricks__get_or_create_relation(database, schema, identifier, type, needs_information=False) %}\n  {%- set target_relation = adapter.get_relation(\n            database=database,\n            schema=schema,\n            identifier=identifier,\n            needs_information=needs_information) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3837886, "supported_languages": null}, "macro.dbt_databricks.current_catalog": {"name": "current_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_databricks.current_catalog", "macro_sql": "{% macro current_catalog() -%}\n  {{ return(adapter.dispatch('current_catalog', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__current_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3837886, "supported_languages": null}, "macro.dbt_databricks.databricks__current_catalog": {"name": "databricks__current_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_databricks.databricks__current_catalog", "macro_sql": "{% macro databricks__current_catalog() -%}\n  {% call statement('current_catalog', fetch_result=True) %}\n      select current_catalog()\n  {% endcall %}\n  {% do return(load_result('current_catalog').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.384803, "supported_languages": null}, "macro.dbt_databricks.use_catalog": {"name": "use_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_databricks.use_catalog", "macro_sql": "{% macro use_catalog(catalog) -%}\n  {{ return(adapter.dispatch('use_catalog', 'dbt')(catalog)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__use_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.384803, "supported_languages": null}, "macro.dbt_databricks.databricks__use_catalog": {"name": "databricks__use_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_databricks.databricks__use_catalog", "macro_sql": "{% macro databricks__use_catalog(catalog) -%}\n  {% call statement() %}\n    use catalog {{ adapter.quote(catalog) }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.384803, "supported_languages": null}, "macro.dbt_databricks.databricks_copy_into": {"name": "databricks_copy_into", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\copy_into.sql", "original_file_path": "macros\\copy_into.sql", "unique_id": "macro.dbt_databricks.databricks_copy_into", "macro_sql": "{% macro databricks_copy_into(\n  target_table,\n  source,\n  file_format,\n  expression_list=none,\n  source_credential=none,\n  source_encryption=none,\n  validate=none,\n  files=none,\n  pattern=none,\n  format_options=none,\n  copy_options=none) -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n        database=target.database,\n        schema=target.schema,\n        identifier=target_table,\n        type='table') -%}\n\n  {%- set source_clause -%}\n    {%- if expression_list -%}\n      ( select {{ expression_list }} from '{{ source }}' )\n    {%- else -%}\n      '{{ source }}'\n    {%- endif -%}\n    {%- if source_credential or source_encryption %}\n      WITH (\n      {%- if source_credential %}\n        credential (\n          {%- for name in source_credential -%}\n            '{{ name }}' = '{{ source_credential[name] }}' {%- if not loop.last %}, {% endif -%}\n          {%- endfor -%}\n        )\n      {%- endif %}\n      {%- if source_encryption %}\n        encryption (\n          {%- for name in source_encryption -%}\n            '{{ name }}' = '{{ source_encryption[name] }}' {%- if not loop.last %}, {% endif -%}\n          {%- endfor -%}\n        )\n      {%- endif %}\n      )\n    {%- endif -%}\n  {%- endset -%}\n\n  {% set query %}\n    copy into {{ target_relation }}\n    from {{ source_clause }}\n    fileformat = {{ file_format }}\n    {% if validate -%} validate {{ validate }} {%- endif %}\n    {% if files and pattern %}\n        {{ exceptions.raise_compiler_error(\"You can only specify one of 'files' or 'pattern'\") }}\n    {% endif %}\n    {% if files -%}\n      files = (\n        {%- for file in files -%}\n          '{{ file }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n    {% if pattern -%}\n        pattern = '{{ pattern }}'\n    {%- endif %}\n    {% if format_options -%}\n      format_options (\n        {%- for key in format_options -%}\n          '{{ key }}' = '{{ format_options[key] }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n    {% if copy_options -%}\n      copy_options (\n        {%- for key in copy_options -%}\n          '{{ key }}' = '{{ copy_options[key] }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n  {% endset %}\n\n  {% do log(\"Running COPY INTO\" ~ adapter.redact_credentials(query), info=True) %}\n  {% do run_query(query) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3907917, "supported_languages": null}, "macro.dbt_databricks.statement_with_staging_table": {"name": "statement_with_staging_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\statement.sql", "original_file_path": "macros\\statement.sql", "unique_id": "macro.dbt_databricks.statement_with_staging_table", "macro_sql": "{% macro statement_with_staging_table(name=None, staging_table=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result, staging_table=staging_table) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.392788, "supported_languages": null}, "macro.dbt_databricks.databricks__get_binding_char": {"name": "databricks__get_binding_char", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_databricks.databricks__get_binding_char", "macro_sql": "{% macro databricks__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3937805, "supported_languages": null}, "macro.dbt_databricks.databricks__load_csv_rows": {"name": "databricks__load_csv_rows", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_databricks.databricks__load_csv_rows", "macro_sql": "{% macro databricks__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n  {% set column_override = model['config'].get('column_types', {}) %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert {% if loop.index0 == 0 -%} overwrite {% else -%} into {% endif -%} {{ this.render() }} values\n          {% for row in chunk -%}\n              ({%- for col_name in agate_table.column_names -%}\n                  {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                  {%- set type = column_override.get(col_name, inferred_type) -%}\n                    cast({{ get_binding_char() }} as {{type}})\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True, close_cursor=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3967001, "supported_languages": null}, "macro.dbt_databricks.databricks__create_csv_table": {"name": "databricks__create_csv_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_databricks.databricks__create_csv_table", "macro_sql": "{% macro databricks__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ file_format_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause() }}\n    {{ comment_clause() }}\n    {{ tblproperties_clause() }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.file_format_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.Fingrid.comment_clause", "macro.dbt_databricks.tblproperties_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.3987129, "supported_languages": null}, "macro.dbt_databricks.databricks_build_snapshot_staging_table": {"name": "databricks_build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_databricks.databricks_build_snapshot_staging_table", "macro_sql": "{% macro databricks_build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_identifier = target_relation.identifier ~ '__dbt_tmp' %}\n\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=target_relation.schema,\n                                               database=target_relation.database,\n                                               type='view') -%}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {# needs to be a non-temp view so that its columns can be ascertained via `describe` #}\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_view_as(tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.406795, "supported_languages": null}, "macro.dbt_databricks.materialization_snapshot_databricks": {"name": "materialization_snapshot_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_databricks.materialization_snapshot_databricks", "macro_sql": "{% materialization snapshot, adapter='databricks' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format', 'delta') -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = databricks__get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table',\n          needs_information=True) -%}\n\n  {%- if file_format not in ['delta', 'hudi'] -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      Snapshot functionality requires file_format be set to 'delta' or 'hudi'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {% endif %}\n\n  {%- if target_relation_exists -%}\n    {%- if not target_relation.is_delta and not target_relation.is_hudi -%}\n      {% set invalid_format_msg -%}\n        The existing table {{ model.schema }}.{{ target_table }} is in another format than 'delta' or 'hudi'\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n      {% call statement('main') %}\n          {{ final_sql }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% if target_relation.database is none %}\n          {% set staging_table = spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n      {% else %}\n          {% set staging_table = databricks_build_snapshot_staging_table(strategy, sql, target_relation) %}\n      {% endif %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n      {% call statement_with_staging_table('main', staging_table) %}\n          {{ final_sql }}\n      {% endcall %}\n\n  {% endif %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do persist_constraints(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt_spark.spark_build_snapshot_staging_table", "macro.dbt_databricks.databricks_build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt_databricks.statement_with_staging_table", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_databricks.persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4137871, "supported_languages": ["sql"]}, "macro.dbt_databricks.materialization_table_databricks": {"name": "materialization_table_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_databricks.materialization_table_databricks", "macro_sql": "{% materialization table, adapter = 'databricks', supported_languages=['sql', 'python'] %}\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier, needs_information=True) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- setup: if the target relation already exists, drop it\n  -- in case if the existing and future table is delta, we want to do a\n  -- create or replace table instead of dropping, so we don't have the table unavailable\n  {% if old_relation and not (old_relation.is_delta and config.get('file_format', default='delta') == 'delta') -%}\n    {{ adapter.drop_relation(old_relation) }}\n  {%- endif %}\n\n  -- build model\n\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do persist_constraints(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]})}}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_databricks.persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4166968, "supported_languages": ["sql", "python"]}, "macro.dbt_databricks.materialization_view_databricks": {"name": "materialization_view_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_databricks.materialization_view_databricks", "macro_sql": "{% materialization view, adapter='databricks' -%}\n    {{ return(create_or_replace_view()) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4176955, "supported_languages": ["sql"]}, "macro.dbt_databricks.materialization_incremental_databricks": {"name": "materialization_incremental_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "unique_id": "macro.dbt_databricks.materialization_incremental_databricks", "macro_sql": "{% materialization incremental, adapter='databricks', supported_languages=['sql', 'python'] -%}\n  {#-- Validate early so we don't run SQL if the file_format + strategy combo is invalid --#}\n  {%- set raw_file_format = config.get('file_format', default='delta') -%}\n  {%- set raw_strategy = config.get('incremental_strategy') or 'merge' -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {%- set file_format = dbt_spark_validate_get_file_format(raw_file_format) -%}\n  {%- set incremental_strategy = dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) -%}\n\n  {#-- Set vars --#}\n\n  {%- set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) -%}\n  {%- set unique_key = config.get('unique_key', none) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {%- set language = model['language'] -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n  {%- set target_relation = this -%}\n  {%- set existing_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier, needs_information=True) -%}\n\n  {#-- Set Overwrite Mode --#}\n  {%- if incremental_strategy == 'insert_overwrite' and partition_by -%}\n    {%- call statement() -%}\n      set spark.sql.sources.partitionOverwriteMode = DYNAMIC\n    {%- endcall -%}\n  {%- endif -%}\n\n  {#-- Run pre-hooks --#}\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Incremental run logic --#}\n  {%- if existing_relation is none -%}\n    {#-- Relation must be created --#}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {%- elif existing_relation.is_view or should_full_refresh() -%}\n    {#-- Relation must be dropped & recreated --#}\n    {% set is_delta = (file_format == 'delta' and existing_relation.is_delta) %}\n    {% if not is_delta %} {#-- If Delta, we will `create or replace` below, so no need to drop --#}\n      {% do adapter.drop_relation(existing_relation) %}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {%- else -%}\n    {#-- Relation must be merged --#}\n    {%- set temp_relation = databricks__make_temp_relation(target_relation, as_table=language != 'sql') -%}\n    {%- call statement('create_temp_relation', language=language) -%}\n      {{ create_table_as(True, temp_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {%- do process_schema_changes(on_schema_change, temp_relation, existing_relation) -%}\n    {%- set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) -%}\n    {%- set strategy_arg_dict = ({\n            'target_relation': target_relation,\n            'temp_relation': temp_relation,\n            'unique_key': unique_key,\n            'dest_columns': none,\n            'incremental_predicates': incremental_predicates}) -%}\n    {%- set build_sql = strategy_sql_macro_func(strategy_arg_dict) -%}\n    {%- if language == 'sql' -%}\n      {%- call statement('main') -%}\n        {{ build_sql }}\n      {%- endcall -%}\n    {%- elif language == 'python' -%}\n      {%- call statement_with_staging_table('main', temp_relation) -%}\n        {{ build_sql }}\n      {%- endcall -%}\n      {#--\n      This is yucky.\n      See note in dbt-spark/dbt/include/spark/macros/adapters.sql\n      re: python models and temporary views.\n\n      Also, why does not either drop_relation or adapter.drop_relation work here?!\n      --#}\n    {%- endif -%}\n  {%- endif -%}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do persist_constraints(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_spark.dbt_spark_validate_get_file_format", "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.statement", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt_databricks.databricks__make_temp_relation", "macro.dbt.process_schema_changes", "macro.dbt_databricks.statement_with_staging_table", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_databricks.persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4238093, "supported_languages": ["sql", "python"]}, "macro.dbt_databricks.databricks__get_incremental_default_sql": {"name": "databricks__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\incremental\\strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_default_sql", "macro_sql": "{% macro databricks__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4238093, "supported_languages": null}, "macro.dbt_databricks.databricks__get_incremental_append_sql": {"name": "databricks__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\incremental\\strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_append_sql", "macro_sql": "{% macro databricks__get_incremental_append_sql(arg_dict) %}\n  {% do return(get_insert_into_sql(arg_dict[\"temp_relation\"], arg_dict[\"target_relation\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4247725, "supported_languages": null}, "macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql": {"name": "databricks__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\materializations\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\incremental\\strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql", "macro_sql": "{% macro databricks__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n    {{ return(get_insert_overwrite_sql(source, target)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.get_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4247725, "supported_languages": null}, "macro.dbt_databricks.databricks__dateadd": {"name": "databricks__dateadd", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_databricks.databricks__dateadd", "macro_sql": "{% macro databricks__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {%- if adapter.compare_dbr_version(10, 4) >= 0 -%}\n    timestampadd({{datepart}}, {{interval}}, {{from_date_or_timestamp}})\n  {%- else -%}\n    {{ spark__dateadd(datepart, interval, from_date_or_timestamp) }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4256966, "supported_languages": null}, "macro.dbt_databricks.databricks__datediff": {"name": "databricks__datediff", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_databricks.databricks__datediff", "macro_sql": "{% macro databricks__datediff(first_date, second_date, datepart) %}\n  {%- if adapter.compare_dbr_version(10, 4) >= 0 -%}\n    timestampdiff({{datepart}}, {{date_trunc(datepart, first_date)}}, {{date_trunc(datepart, second_date)}})\n  {%- else -%}\n    {{ spark__datediff(first_date, second_date, datepart) }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_spark.spark__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4267054, "supported_languages": null}, "macro.dbt_spark.file_format_clause": {"name": "file_format_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.file_format_clause", "macro_sql": "{% macro file_format_clause() %}\n  {{ return(adapter.dispatch('file_format_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__file_format_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.441702, "supported_languages": null}, "macro.dbt_spark.spark__file_format_clause": {"name": "spark__file_format_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__file_format_clause", "macro_sql": "{% macro spark__file_format_clause() %}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n  {%- if file_format is not none %}\n    using {{ file_format }}\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.441702, "supported_languages": null}, "macro.dbt_spark.location_clause": {"name": "location_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.location_clause", "macro_sql": "{% macro location_clause() %}\n  {{ return(adapter.dispatch('location_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__location_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.442781, "supported_languages": null}, "macro.dbt_spark.spark__location_clause": {"name": "spark__location_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__location_clause", "macro_sql": "{% macro spark__location_clause() %}\n  {%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n  {%- set identifier = model['alias'] -%}\n  {%- if location_root is not none %}\n    location '{{ location_root }}/{{ identifier }}'\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4437475, "supported_languages": null}, "macro.dbt_spark.options_clause": {"name": "options_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.options_clause", "macro_sql": "{% macro options_clause() -%}\n  {{ return(adapter.dispatch('options_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__options_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4437475, "supported_languages": null}, "macro.dbt_spark.spark__options_clause": {"name": "spark__options_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__options_clause", "macro_sql": "{% macro spark__options_clause() -%}\n  {%- set options = config.get('options') -%}\n  {%- if config.get('file_format') == 'hudi' -%}\n    {%- set unique_key = config.get('unique_key') -%}\n    {%- if unique_key is not none and options is none -%}\n      {%- set options = {'primaryKey': config.get('unique_key')} -%}\n    {%- elif unique_key is not none and options is not none and 'primaryKey' not in options -%}\n      {%- set _ = options.update({'primaryKey': config.get('unique_key')}) -%}\n    {%- elif options is not none and 'primaryKey' in options and options['primaryKey'] != unique_key -%}\n      {{ exceptions.raise_compiler_error(\"unique_key and options('primaryKey') should be the same column(s).\") }}\n    {%- endif %}\n  {%- endif %}\n\n  {%- if options is not none %}\n    options (\n      {%- for option in options -%}\n      {{ option }} \"{{ options[option] }}\" {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4457173, "supported_languages": null}, "macro.dbt_spark.comment_clause": {"name": "comment_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.comment_clause", "macro_sql": "{% macro comment_clause() %}\n  {{ return(adapter.dispatch('comment_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__comment_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4457173, "supported_languages": null}, "macro.dbt_spark.spark__comment_clause": {"name": "spark__comment_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__comment_clause", "macro_sql": "{% macro spark__comment_clause() %}\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\n\n  {%- if raw_persist_docs is mapping -%}\n    {%- set raw_relation = raw_persist_docs.get('relation', false) -%}\n      {%- if raw_relation -%}\n      comment '{{ model.description | replace(\"'\", \"\\\\'\") }}'\n      {% endif %}\n  {%- elif raw_persist_docs -%}\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\n  {% endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4467149, "supported_languages": null}, "macro.dbt_spark.partition_cols": {"name": "partition_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.partition_cols", "macro_sql": "{% macro partition_cols(label, required=false) %}\n  {{ return(adapter.dispatch('partition_cols', 'dbt')(label, required)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4467149, "supported_languages": null}, "macro.dbt_spark.spark__partition_cols": {"name": "spark__partition_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__partition_cols", "macro_sql": "{% macro spark__partition_cols(label, required=false) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4477167, "supported_languages": null}, "macro.dbt_spark.clustered_cols": {"name": "clustered_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.clustered_cols", "macro_sql": "{% macro clustered_cols(label, required=false) %}\n  {{ return(adapter.dispatch('clustered_cols', 'dbt')(label, required)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__clustered_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4477167, "supported_languages": null}, "macro.dbt_spark.spark__clustered_cols": {"name": "spark__clustered_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__clustered_cols", "macro_sql": "{% macro spark__clustered_cols(label, required=false) %}\n  {%- set cols = config.get('clustered_by', validator=validation.any[list, basestring]) -%}\n  {%- set buckets = config.get('buckets', validator=validation.any[int]) -%}\n  {%- if (cols is not none) and (buckets is not none) %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    ) into {{ buckets }} buckets\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4497135, "supported_languages": null}, "macro.dbt_spark.fetch_tbl_properties": {"name": "fetch_tbl_properties", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.fetch_tbl_properties", "macro_sql": "{% macro fetch_tbl_properties(relation) -%}\n  {% call statement('list_properties', fetch_result=True) -%}\n    SHOW TBLPROPERTIES {{ relation }}\n  {% endcall %}\n  {% do return(load_result('list_properties').table) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4497135, "supported_languages": null}, "macro.dbt_spark.create_temporary_view": {"name": "create_temporary_view", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.create_temporary_view", "macro_sql": "{% macro create_temporary_view(relation, compiled_code) -%}\n  {{ return(adapter.dispatch('create_temporary_view', 'dbt')(relation, compiled_code)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__create_temporary_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4497135, "supported_languages": null}, "macro.dbt_spark.spark__create_temporary_view": {"name": "spark__create_temporary_view", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__create_temporary_view", "macro_sql": "{% macro spark__create_temporary_view(relation, compiled_code) -%}\n    create temporary view {{ relation }} as\n      {{ compiled_code }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4507113, "supported_languages": null}, "macro.dbt_spark.spark__create_table_as": {"name": "spark__create_table_as", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__create_table_as", "macro_sql": "{%- macro spark__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- if temporary -%}\n      {{ create_temporary_view(relation, compiled_code) }}\n    {%- else -%}\n      {% if config.get('file_format', validator=validation.any[basestring]) == 'delta' %}\n        create or replace table {{ relation }}\n      {% else %}\n        create table {{ relation }}\n      {% endif %}\n      {{ file_format_clause() }}\n      {{ options_clause() }}\n      {{ partition_cols(label=\"partitioned by\") }}\n      {{ clustered_cols(label=\"clustered by\") }}\n      {{ location_clause() }}\n      {{ comment_clause() }}\n      as\n      {{ compiled_code }}\n    {%- endif -%}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation) }}\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt_spark.file_format_clause", "macro.dbt_spark.options_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt_spark.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4517438, "supported_languages": null}, "macro.dbt_spark.spark__create_view_as": {"name": "spark__create_view_as", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__create_view_as", "macro_sql": "{% macro spark__create_view_as(relation, sql) -%}\n  create or replace view {{ relation }}\n  {{ comment_clause() }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.comment_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4517438, "supported_languages": null}, "macro.dbt_spark.spark__create_schema": {"name": "spark__create_schema", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__create_schema", "macro_sql": "{% macro spark__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{relation}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4517438, "supported_languages": null}, "macro.dbt_spark.spark__drop_schema": {"name": "spark__drop_schema", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__drop_schema", "macro_sql": "{% macro spark__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4527876, "supported_languages": null}, "macro.dbt_spark.get_columns_in_relation_raw": {"name": "get_columns_in_relation_raw", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.get_columns_in_relation_raw", "macro_sql": "{% macro get_columns_in_relation_raw(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation_raw', 'dbt')(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__get_columns_in_relation_raw"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4527876, "supported_languages": null}, "macro.dbt_spark.spark__get_columns_in_relation_raw": {"name": "spark__get_columns_in_relation_raw", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__get_columns_in_relation_raw", "macro_sql": "{% macro spark__get_columns_in_relation_raw(relation) -%}\n  {% call statement('get_columns_in_relation_raw', fetch_result=True) %}\n      describe extended {{ relation }}\n  {% endcall %}\n  {% do return(load_result('get_columns_in_relation_raw').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4527876, "supported_languages": null}, "macro.dbt_spark.spark__get_columns_in_relation": {"name": "spark__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__get_columns_in_relation", "macro_sql": "{% macro spark__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4527876, "supported_languages": null}, "macro.dbt_spark.spark__list_relations_without_caching": {"name": "spark__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__list_relations_without_caching", "macro_sql": "{% macro spark__list_relations_without_caching(relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    show table extended in {{ relation }} like '*'\n  {% endcall %}\n\n  {% do return(load_result('list_relations_without_caching').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4537833, "supported_languages": null}, "macro.dbt_spark.spark__list_schemas": {"name": "spark__list_schemas", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__list_schemas", "macro_sql": "{% macro spark__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    show databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4537833, "supported_languages": null}, "macro.dbt_spark.spark__rename_relation": {"name": "spark__rename_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__rename_relation", "macro_sql": "{% macro spark__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    {% if not from_relation.type %}\n      {% do exceptions.raise_database_error(\"Cannot rename a relation with a blank type: \" ~ from_relation.identifier) %}\n    {% elif from_relation.type in ('table') %}\n        alter table {{ from_relation }} rename to {{ to_relation }}\n    {% elif from_relation.type == 'view' %}\n        alter view {{ from_relation }} rename to {{ to_relation }}\n    {% else %}\n      {% do exceptions.raise_database_error(\"Unknown type '\" ~ from_relation.type ~ \"' for relation: \" ~ from_relation.identifier) %}\n    {% endif %}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4547966, "supported_languages": null}, "macro.dbt_spark.spark__drop_relation": {"name": "spark__drop_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__drop_relation", "macro_sql": "{% macro spark__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4547966, "supported_languages": null}, "macro.dbt_spark.spark__generate_database_name": {"name": "spark__generate_database_name", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__generate_database_name", "macro_sql": "{% macro spark__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4557822, "supported_languages": null}, "macro.dbt_spark.spark__persist_docs": {"name": "spark__persist_docs", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__persist_docs", "macro_sql": "{% macro spark__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4557822, "supported_languages": null}, "macro.dbt_spark.spark__alter_column_comment": {"name": "spark__alter_column_comment", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_column_comment", "macro_sql": "{% macro spark__alter_column_comment(relation, column_dict) %}\n  {% if config.get('file_format', validator=validation.any[basestring]) in ['delta', 'hudi'] %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n      {% set comment_query %}\n        alter table {{ relation }} change column\n            {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n            comment '{{ escaped_comment }}';\n      {% endset %}\n      {% do run_query(comment_query) %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4567862, "supported_languages": null}, "macro.dbt_spark.spark__make_temp_relation": {"name": "spark__make_temp_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__make_temp_relation", "macro_sql": "{% macro spark__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(path = {\n        \"identifier\": tmp_identifier\n    }) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4577482, "supported_languages": null}, "macro.dbt_spark.spark__alter_column_type": {"name": "spark__alter_column_type", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_column_type", "macro_sql": "{% macro spark__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter column {{ column_name }} type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4577482, "supported_languages": null}, "macro.dbt_spark.spark__alter_relation_add_remove_columns": {"name": "spark__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_relation_add_remove_columns", "macro_sql": "{% macro spark__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if remove_columns %}\n    {% set platform_name = 'Delta Lake' if relation.is_delta else 'Apache Spark' %}\n    {{ exceptions.raise_compiler_error(platform_name + ' does not support dropping columns from tables') }}\n  {% endif %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n       {% if add_columns %} add columns {% endif %}\n            {% for column in add_columns %}\n               {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4596982, "supported_languages": null}, "macro.dbt_spark.spark__copy_grants": {"name": "spark__copy_grants", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_spark.spark__copy_grants", "macro_sql": "{% macro spark__copy_grants() %}\n\n    {% if config.materialized == 'view' %}\n        {#-- Spark views don't copy grants when they're replaced --#}\n        {{ return(False) }}\n\n    {% else %}\n      {#-- This depends on how we're replacing the table, which depends on its file format\n        -- Just play it safe by assuming that grants have been copied over, and need to be checked / possibly revoked\n        -- We can make this more efficient in the future\n      #}\n        {{ return(True) }}\n\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.460735, "supported_languages": null}, "macro.dbt_spark.spark__get_grant_sql": {"name": "spark__get_grant_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_spark.spark__get_grant_sql", "macro_sql": "\n\n\n{%- macro spark__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ adapter.quote(grantees[0]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.460735, "supported_languages": null}, "macro.dbt_spark.spark__get_revoke_sql": {"name": "spark__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_spark.spark__get_revoke_sql", "macro_sql": "\n\n\n{%- macro spark__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ adapter.quote(grantees[0]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4616966, "supported_languages": null}, "macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement": {"name": "spark__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n\n{%- macro spark__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4616966, "supported_languages": null}, "macro.dbt_spark.spark__call_dcl_statements": {"name": "spark__call_dcl_statements", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_spark.spark__call_dcl_statements", "macro_sql": "{% macro spark__call_dcl_statements(dcl_statement_list) %}\n    {% for dcl_statement in dcl_statement_list %}\n        {% call statement('grant_or_revoke') %}\n            {{ dcl_statement }}\n        {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4616966, "supported_languages": null}, "macro.dbt_spark.spark__get_binding_char": {"name": "spark__get_binding_char", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_spark.spark__get_binding_char", "macro_sql": "{% macro spark__get_binding_char() %}\n  {{ return('?' if target.method == 'odbc' else '%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4647124, "supported_languages": null}, "macro.dbt_spark.spark__reset_csv_table": {"name": "spark__reset_csv_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_spark.spark__reset_csv_table", "macro_sql": "{% macro spark__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% if old_relation %}\n        {{ adapter.drop_relation(old_relation) }}\n    {% endif %}\n    {% set sql = create_csv_table(model, agate_table) %}\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4647124, "supported_languages": null}, "macro.dbt_spark.spark__load_csv_rows": {"name": "spark__load_csv_rows", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_spark.spark__load_csv_rows", "macro_sql": "{% macro spark__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n  {% set column_override = model['config'].get('column_types', {}) %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} values\n          {% for row in chunk -%}\n              ({%- for col_name in agate_table.column_names -%}\n                  {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                  {%- set type = column_override.get(col_name, inferred_type) -%}\n                    cast({{ get_binding_char() }} as {{type}})\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4677143, "supported_languages": null}, "macro.dbt_spark.spark__create_csv_table": {"name": "spark__create_csv_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_spark.spark__create_csv_table", "macro_sql": "{% macro spark__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ file_format_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause() }}\n    {{ comment_clause() }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.file_format_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4697125, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_hash_arguments": {"name": "spark__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_hash_arguments", "macro_sql": "{% macro spark__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as string ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4807127, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_string_as_time": {"name": "spark__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_string_as_time", "macro_sql": "{% macro spark__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4807127, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_merge_sql": {"name": "spark__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_merge_sql", "macro_sql": "{% macro spark__snapshot_merge_sql(target, source, insert_cols) -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert *\n    ;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4817142, "supported_languages": null}, "macro.dbt_spark.spark_build_snapshot_staging_table": {"name": "spark_build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_spark.spark_build_snapshot_staging_table", "macro_sql": "{% macro spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_identifier = target_relation.identifier ~ '__dbt_tmp' %}\n\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                                  schema=target_relation.schema,\n                                                  database=none,\n                                                  type='view') -%}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {# needs to be a non-temp view so that its columns can be ascertained via `describe` #}\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_view_as(tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4827867, "supported_languages": null}, "macro.dbt_spark.spark__post_snapshot": {"name": "spark__post_snapshot", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_spark.spark__post_snapshot", "macro_sql": "{% macro spark__post_snapshot(staging_relation) %}\n    {% do adapter.drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4827867, "supported_languages": null}, "macro.dbt_spark.spark__create_columns": {"name": "spark__create_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_spark.spark__create_columns", "macro_sql": "{% macro spark__create_columns(relation, columns) %}\n    {% if columns|length > 0 %}\n    {% call statement() %}\n      alter table {{ relation }} add columns (\n        {% for column in columns %}\n          `{{ column.name }}` {{ column.data_type }} {{- ',' if not loop.last -}}\n        {% endfor %}\n      );\n    {% endcall %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4827867, "supported_languages": null}, "macro.dbt_spark.materialization_snapshot_spark": {"name": "materialization_snapshot_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_spark.materialization_snapshot_spark", "macro_sql": "{% materialization snapshot, adapter='spark' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format', 'parquet') -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=none,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if file_format not in ['delta', 'hudi'] -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      Snapshot functionality requires file_format be set to 'delta' or 'hudi'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {% endif %}\n\n  {%- if target_relation_exists -%}\n    {%- if not target_relation.is_delta and not target_relation.is_hudi -%}\n      {% set invalid_format_msg -%}\n        The existing table {{ model.schema }}.{{ target_table }} is in another format than 'delta' or 'hudi'\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.create_schema", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_spark.spark_build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4887936, "supported_languages": ["sql"]}, "macro.dbt_spark.materialization_table_spark": {"name": "materialization_table_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_spark.materialization_table_spark", "macro_sql": "{% materialization table, adapter = 'spark', supported_languages=['sql', 'python'] %}\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- setup: if the target relation already exists, drop it\n  -- in case if the existing and future table is delta, we want to do a\n  -- create or replace table instead of dropping, so we don't have the table unavailable\n  {% if old_relation and not (old_relation.is_delta and config.get('file_format', validator=validation.any[basestring]) == 'delta') -%}\n    {{ adapter.drop_relation(old_relation) }}\n  {%- endif %}\n\n  -- build model\n\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]})}}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.493697, "supported_languages": ["sql", "python"]}, "macro.dbt_spark.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_spark.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n{{ compiled_code }}\n# --- Autogenerated dbt materialization code. --- #\ndbt = dbtObj(spark.table)\ndf = model(dbt, spark)\n\n# make sure pyspark exists in the namepace, for 7.3.x-scala2.12 it does not exist\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write.mode(\"overwrite\").format(\"delta\").option(\"overwriteSchema\", \"true\").saveAsTable(\"{{ target_relation }}\")\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.493697, "supported_languages": null}, "macro.dbt_spark.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_spark.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# how to execute python model in notebook\n# dbt = dbtObj(spark.table)\n# df = model(dbt, spark)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4947116, "supported_languages": null}, "macro.dbt_spark.materialization_view_spark": {"name": "materialization_view_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_spark.materialization_view_spark", "macro_sql": "{% materialization view, adapter='spark' -%}\n    {{ return(create_or_replace_view()) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.4947116, "supported_languages": ["sql"]}, "macro.dbt_spark.spark__get_merge_update_columns": {"name": "spark__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\incremental\\column_helpers.sql", "unique_id": "macro.dbt_spark.spark__get_merge_update_columns", "macro_sql": "{% macro spark__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = None -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.495713, "supported_languages": null}, "macro.dbt_spark.materialization_incremental_spark": {"name": "materialization_incremental_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "unique_id": "macro.dbt_spark.materialization_incremental_spark", "macro_sql": "{% materialization incremental, adapter='spark', supported_languages=['sql', 'python'] -%}\n  {#-- Validate early so we don't run SQL if the file_format + strategy combo is invalid --#}\n  {%- set raw_file_format = config.get('file_format', default='parquet') -%}\n  {%- set raw_strategy = config.get('incremental_strategy') or 'append' -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {%- set file_format = dbt_spark_validate_get_file_format(raw_file_format) -%}\n  {%- set strategy = dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) -%}\n\n  {#-- Set vars --#}\n\n  {%- set unique_key = config.get('unique_key', none) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {%- set language = model['language'] -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n  {%- set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) -%}\n  {%- set target_relation = this -%}\n  {%- set existing_relation = load_relation(this) -%}\n  {%- set tmp_relation = make_temp_relation(this) -%}\n\n  {#-- for SQL model we will create temp view that doesn't have database and schema --#}\n  {%- if language == 'sql'-%}\n    {%- set tmp_relation = tmp_relation.include(database=false, schema=false) -%}\n  {%- endif -%}\n\n  {#-- Set Overwrite Mode --#}\n  {%- if strategy == 'insert_overwrite' and partition_by -%}\n    {%- call statement() -%}\n      set spark.sql.sources.partitionOverwriteMode = DYNAMIC\n    {%- endcall -%}\n  {%- endif -%}\n\n  {#-- Run pre-hooks --#}\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Incremental run logic --#}\n  {%- if existing_relation is none -%}\n    {#-- Relation must be created --#}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {%- elif existing_relation.is_view or should_full_refresh() -%}\n    {#-- Relation must be dropped & recreated --#}\n    {% set is_delta = (file_format == 'delta' and existing_relation.is_delta) %}\n    {% if not is_delta %} {#-- If Delta, we will `create or replace` below, so no need to drop --#}\n      {% do adapter.drop_relation(existing_relation) %}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {%- else -%}\n    {#-- Relation must be merged --#}\n    {%- call statement('create_tmp_relation', language=language) -%}\n      {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {%- do process_schema_changes(on_schema_change, tmp_relation, existing_relation) -%}\n    {%- call statement('main') -%}\n      {{ dbt_spark_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, incremental_predicates) }}\n    {%- endcall -%}\n    {%- if language == 'python' -%}\n      {#--\n      This is yucky.\n      See note in dbt-spark/dbt/include/spark/macros/adapters.sql\n      re: python models and temporary views.\n\n      Also, why doesn't either drop_relation or adapter.drop_relation work here?!\n      --#}\n      {% call statement('drop_relation') -%}\n        drop table if exists {{ tmp_relation }}\n      {%- endcall %}\n    {%- endif -%}\n  {%- endif -%}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_spark.dbt_spark_validate_get_file_format", "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.statement", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.process_schema_changes", "macro.dbt_spark.dbt_spark_get_incremental_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5017128, "supported_languages": ["sql", "python"]}, "macro.dbt_spark.get_insert_overwrite_sql": {"name": "get_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\incremental\\strategies.sql", "unique_id": "macro.dbt_spark.get_insert_overwrite_sql", "macro_sql": "{% macro get_insert_overwrite_sql(source_relation, target_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert overwrite table {{ target_relation }}\n    {{ partition_cols(label=\"partition\") }}\n    select {{dest_cols_csv}} from {{ source_relation }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.504813, "supported_languages": null}, "macro.dbt_spark.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\incremental\\strategies.sql", "unique_id": "macro.dbt_spark.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(source_relation, target_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert into table {{ target_relation }}\n    select {{dest_cols_csv}} from {{ source_relation }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.504813, "supported_languages": null}, "macro.dbt_spark.spark__get_merge_sql": {"name": "spark__get_merge_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\incremental\\strategies.sql", "unique_id": "macro.dbt_spark.spark__get_merge_sql", "macro_sql": "{% macro spark__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n  {# need dest_columns for merge_exclude_columns, default to use \"*\" #}\n  {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n  {%- set dest_columns = adapter.get_columns_in_relation(target) -%}\n  {%- set merge_update_columns = config.get('merge_update_columns') -%}\n  {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n  {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n\n  {% if unique_key %}\n      {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n          {% for key in unique_key %}\n              {% set this_key_match %}\n                  DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n              {% endset %}\n              {% do predicates.append(this_key_match) %}\n          {% endfor %}\n      {% else %}\n          {% set unique_key_match %}\n              DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n          {% endset %}\n          {% do predicates.append(unique_key_match) %}\n      {% endif %}\n  {% else %}\n      {% do predicates.append('FALSE') %}\n  {% endif %}\n\n  {{ sql_header if sql_header is not none }}\n\n  merge into {{ target }} as DBT_INTERNAL_DEST\n      using {{ source }} as DBT_INTERNAL_SOURCE\n      on {{ predicates | join(' and ') }}\n\n      when matched then update set\n        {% if update_columns -%}{%- for column_name in update_columns %}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n        {%- else %} * {% endif %}\n\n      when not matched then insert *\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5076993, "supported_languages": null}, "macro.dbt_spark.dbt_spark_get_incremental_sql": {"name": "dbt_spark_get_incremental_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\incremental\\strategies.sql", "unique_id": "macro.dbt_spark.dbt_spark_get_incremental_sql", "macro_sql": "{% macro dbt_spark_get_incremental_sql(strategy, source, target, unique_key, incremental_predicates) %}\n  {%- if strategy == 'append' -%}\n    {#-- insert new records into existing table, without updating or overwriting #}\n    {{ get_insert_into_sql(source, target) }}\n  {%- elif strategy == 'insert_overwrite' -%}\n    {#-- insert statements don't like CTEs, so support them via a temp view #}\n    {{ get_insert_overwrite_sql(source, target) }}\n  {%- elif strategy == 'merge' -%}\n  {#-- merge all columns with databricks delta - schema changes are handled for us #}\n    {{ get_merge_sql(target, source, unique_key, dest_columns=none, incremental_predicates=incremental_predicates) }}\n  {%- else -%}\n    {% set no_sql_for_strategy_msg -%}\n      No known SQL for the incremental strategy provided: {{ strategy }}\n    {%- endset %}\n    {%- do exceptions.raise_compiler_error(no_sql_for_strategy_msg) -%}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.get_insert_into_sql", "macro.dbt_spark.get_insert_overwrite_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5086987, "supported_languages": null}, "macro.dbt_spark.dbt_spark_validate_get_file_format": {"name": "dbt_spark_validate_get_file_format", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\incremental\\validate.sql", "original_file_path": "macros\\materializations\\incremental\\validate.sql", "unique_id": "macro.dbt_spark.dbt_spark_validate_get_file_format", "macro_sql": "{% macro dbt_spark_validate_get_file_format(raw_file_format) %}\n  {#-- Validate the file format #}\n\n  {% set accepted_formats = ['text', 'csv', 'json', 'jdbc', 'parquet', 'orc', 'hive', 'delta', 'libsvm', 'hudi'] %}\n\n  {% set invalid_file_format_msg -%}\n    Invalid file format provided: {{ raw_file_format }}\n    Expected one of: {{ accepted_formats | join(', ') }}\n  {%- endset %}\n\n  {% if raw_file_format not in accepted_formats %}\n    {% do exceptions.raise_compiler_error(invalid_file_format_msg) %}\n  {% endif %}\n\n  {% do return(raw_file_format) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5107143, "supported_languages": null}, "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy": {"name": "dbt_spark_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\materializations\\incremental\\validate.sql", "original_file_path": "macros\\materializations\\incremental\\validate.sql", "unique_id": "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) %}\n  {#-- Validate the incremental strategy #}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    Expected one of: 'append', 'merge', 'insert_overwrite'\n  {%- endset %}\n\n  {% set invalid_merge_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You can only choose this strategy when file_format is set to 'delta' or 'hudi'\n  {%- endset %}\n\n  {% set invalid_insert_overwrite_delta_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when file_format is set to 'delta'\n    Use the 'append' or 'merge' strategy instead\n  {%- endset %}\n\n  {% set invalid_insert_overwrite_endpoint_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when connecting via endpoint\n    Use the 'append' or 'merge' strategy instead\n  {%- endset %}\n\n  {% if raw_strategy not in ['append', 'merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {%-else %}\n    {% if raw_strategy == 'merge' and file_format not in ['delta', 'hudi'] %}\n      {% do exceptions.raise_compiler_error(invalid_merge_msg) %}\n    {% endif %}\n    {% if raw_strategy == 'insert_overwrite' and file_format == 'delta' %}\n      {% do exceptions.raise_compiler_error(invalid_insert_overwrite_delta_msg) %}\n    {% endif %}\n    {% if raw_strategy == 'insert_overwrite' and target.endpoint %}\n      {% do exceptions.raise_compiler_error(invalid_insert_overwrite_endpoint_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5127122, "supported_languages": null}, "macro.dbt_spark.spark__any_value": {"name": "spark__any_value", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_spark.spark__any_value", "macro_sql": "{% macro spark__any_value(expression) -%}\n    {#-- return any value (non-deterministic)  --#}\n    first({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5127122, "supported_languages": null}, "macro.dbt_spark.spark__array_append": {"name": "spark__array_append", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt_spark.spark__array_append", "macro_sql": "{% macro spark__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5127122, "supported_languages": null}, "macro.dbt_spark.spark__array_concat": {"name": "spark__array_concat", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt_spark.spark__array_concat", "macro_sql": "{% macro spark__array_concat(array_1, array_2) -%}\n    concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5137117, "supported_languages": null}, "macro.dbt_spark.spark__array_construct": {"name": "spark__array_construct", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_spark.spark__array_construct", "macro_sql": "{% macro spark__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5137117, "supported_languages": null}, "macro.dbt_spark.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\assert_not_null.sql", "original_file_path": "macros\\utils\\assert_not_null.sql", "unique_id": "macro.dbt_spark.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'dbt')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5137117, "supported_languages": null}, "macro.dbt_spark.spark__assert_not_null": {"name": "spark__assert_not_null", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\assert_not_null.sql", "original_file_path": "macros\\utils\\assert_not_null.sql", "unique_id": "macro.dbt_spark.spark__assert_not_null", "macro_sql": "{% macro spark__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5147116, "supported_languages": null}, "macro.dbt_spark.spark__bool_or": {"name": "spark__bool_or", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_spark.spark__bool_or", "macro_sql": "{% macro spark__bool_or(expression) -%}\n\n    max({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5147116, "supported_languages": null}, "macro.dbt_spark.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt_spark.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5147116, "supported_languages": null}, "macro.dbt_spark.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_spark.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n\n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n\n        {%- set multiplier -%}\n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n\n        {%- set multiplier -%}\n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5188146, "supported_languages": null}, "macro.dbt_spark.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_spark.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n\n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = assert_not_null('date', first_date) %}\n        {% set second_date = assert_not_null('date', second_date) %}\n\n    {%- endif -%}\n\n    {%- if datepart == 'day' -%}\n\n        datediff({{second_date}}, {{first_date}})\n\n    {%- elif datepart == 'week' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n\n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n\n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'quarter' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n\n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n\n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n\n        {%- set divisor -%}\n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', second_date)) }}\n                - {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', second_date)) }}\n                - {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n\n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n\n            {% if datepart == 'microsecond' %}\n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)\n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5287123, "supported_languages": null}, "macro.dbt_spark.spark__escape_single_quotes": {"name": "spark__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_spark.spark__escape_single_quotes", "macro_sql": "{% macro spark__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5287123, "supported_languages": null}, "macro.dbt_spark.spark__listagg": {"name": "spark__listagg", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_spark.spark__listagg", "macro_sql": "{% macro spark__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n  {% if order_by_clause %}\n    {{ exceptions.warn(\"order_by_clause is not supported for listagg on Spark/Databricks\") }}\n  {% endif %}\n\n  {% set collect_list %} collect_list({{ measure }}) {% endset %}\n\n  {% set limited %} slice({{ collect_list }}, 1, {{ limit_num }}) {% endset %}\n\n  {% set collected = limited if limit_num else collect_list %}\n\n  {% set final %} array_join({{ collected }}, {{ delimiter_text }}) {% endset %}\n\n  {% do return(final) %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5307121, "supported_languages": null}, "macro.dbt_spark.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_spark.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n\n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n\n    {% endset %}\n\n    {% set split_part_expr %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n\n    {% endset %}\n\n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.531712, "supported_languages": null}, "macro.dbt_spark.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_spark.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() -%}\n    current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.531712, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.533712, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.533712, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5347118, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5347118, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5347118, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5357127, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5357127, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5357127, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5366967, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5366967, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5366967, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5377126, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5387123, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5387123, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5397952, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5397952, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5417008, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5438075, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5438075, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5438075, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5447896, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5447896, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5457845, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5457845, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.546783, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5477183, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5487866, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5487866, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.549808, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.549808, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.550791, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.550791, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5527878, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5527878, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5537782, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5537782, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5537782, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5547245, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5557756, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5557756, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5557756, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.556783, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.557803, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.557803, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.557803, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5586984, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5586984, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5597858, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5637896, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5637896, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5637896, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5647938, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5647938, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5658062, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5658062, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5658062, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5667925, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5667925, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5667925, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.567783, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.567783, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5687785, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5687785, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5697846, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5697846, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5707986, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5707986, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5707986, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5717819, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5717819, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5717819, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5727866, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5727866, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5727866, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5727866, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5727866, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5737875, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5757358, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5777943, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.578794, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.579794, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.581807, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5827887, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5827887, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5837855, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5837855, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.584793, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.584793, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.585786, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.585786, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.586701, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5876963, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5876963, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5886965, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5886965, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5896962, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5896962, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.590696, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.592696, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.592696, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.592696, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.593697, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.593697, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5956953, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5966964, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5976958, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5976958, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.5986958, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6066957, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6076958, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.615696, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6186957, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6186957, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6206954, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6206954, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6216958, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6286952, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6306953, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.632696, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6346967, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6356957, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6356957, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6366963, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6366963, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6366963, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.637696, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.637696, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6387093, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6387093, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6387093, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.639696, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6406963, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6406963, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6416957, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6416957, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6456957, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6476958, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.648696, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.648696, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6496973, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6496973, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6496973, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6506963, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6536956, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6596954, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6616957, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6616957, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.662696, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.662696, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.662696, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6636956, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6636956, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6636956, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6636956, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6646957, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.665697, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6676958, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6726959, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.677697, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.677697, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6786962, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6786962, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6786962, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6786962, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6796958, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6806958, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6806958, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.681696, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.681696, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6906958, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6906958, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.691697, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6956959, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6966963, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6966963, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6986985, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6986985, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.6986985, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.701698, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7036986, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7046988, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7046988, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7076976, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.708699, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.708699, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7106972, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7116985, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7126985, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7137003, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7137003, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7137003, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7137003, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.714699, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.714699, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.714699, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.715699, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.715699, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.716699, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.716699, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.716699, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.717701, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.717701, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.717701, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7186992, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7196982, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7196982, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7196982, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7196982, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7206986, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7206986, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7206986, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7206986, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7216985, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7216985, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7216985, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7216985, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7226982, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7226982, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7226982, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7236986, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7236986, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7236986, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7247002, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7247002, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7247002, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7256987, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7256987, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7256987, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7266996, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7266996, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7266996, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7266996, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.727699, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.727699, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.727699, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.728699, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.728699, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7296994, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.730699, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.730699, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.730699, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7316997, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7316997, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7316997, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7326994, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7326994, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7326994, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.733699, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.733699, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7346988, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7346988, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7356994, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7356994, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7366993, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7366993, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7377007, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_base_model.sql", "original_file_path": "macros\\generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7406979, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_model_import_ctes.sql", "original_file_path": "macros\\generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':'(?i)(from|join)\\s+({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_source':'(?i)(from|join)\\s+({{\\s*source\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_1':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_2':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_table_1':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_2':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_3':'(?i)(from|join)\\s+([\\[`\\\"\\'])([\\w ]+)([\\]`\\\"\\'])(?=\\s|$)',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7576962, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_model_yaml.sql", "original_file_path": "macros\\generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7606964, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_model_yaml.sql", "original_file_path": "macros\\generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7626965, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_source.sql", "original_file_path": "macros\\generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.765696, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_source.sql", "original_file_path": "macros\\generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7696962, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7706969, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7716966, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7716966, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7726965, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7736967, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7736967, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7746973, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7756972, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.776697, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7776976, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7786973, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7806966, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.782696, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.782696, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.783697, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7846963, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7866967, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7906961, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7936964, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7946973, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7946973, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.795697, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7966976, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.797697, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.797697, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.798697, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.7996967, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8006966, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8026962, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8036966, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8036966, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8046966, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8066962, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8076968, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8086977, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8097005, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8097005, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8097005, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8107877, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8107877, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8107877, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8118033, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.813799, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.813799, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8147986, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8157866, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8167894, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8167894, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8177536, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8187866, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8187866, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8187866, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8187866, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8197906, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.820805, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.820805, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8217854, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8217854, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.822817, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8237944, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8256984, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8286972, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8296978, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8306973, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.831696, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8328075, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8328075, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8348176, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8357968, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8367848, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8378112, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8387902, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.840704, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8416994, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8437223, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8437223, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8446977, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8446977, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.databricks__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8457909, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8457909, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.846713, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.846713, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.846713, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8477025, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.848783, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8497128, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8497128, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.851787, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.851787, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8527937, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8527937, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.853813, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8547885, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8566995, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.858699, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8596992, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.861097, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.861097, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8616972, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8626974, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.864697, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8676977, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8676977, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.868698, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8726976, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8786967, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8806965, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8836966, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8846972, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8846972, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8856971, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8856971, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8866978, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.887701, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.887701, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8887002, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683555522.8897004, "supported_languages": null}}, "docs": {"doc.Fingrid.maximo_companies_company": {"name": "maximo_companies_company", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_company", "block_contents": "Primary key - yritystunnus"}, "doc.Fingrid.maximo_companies_name": {"name": "maximo_companies_name", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_name", "block_contents": "Yrityksen nimi"}, "doc.Fingrid.maximo_companies_address1": {"name": "maximo_companies_address1", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_address1", "block_contents": "Katuosoite"}, "doc.Fingrid.maximo_companies_address2": {"name": "maximo_companies_address2", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_address2", "block_contents": "Postitoimipaikka"}, "doc.Fingrid.maximo_companies_address4": {"name": "maximo_companies_address4", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_address4", "block_contents": "Postinumero"}, "doc.Fingrid.maximo_companies_address5": {"name": "maximo_companies_address5", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_address5", "block_contents": "Maa"}, "doc.Fingrid.maximo_companies_registration1": {"name": "maximo_companies_registration1", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_registration1", "block_contents": "Yritystunnus (Maximo)"}, "doc.Fingrid.maximo_companies_cusbusinessid": {"name": "maximo_companies_cusbusinessid", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_cusbusinessid", "block_contents": "Yritystunnus"}, "doc.Fingrid.maximo_companies_cusvatcode": {"name": "maximo_companies_cusvatcode", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_cusvatcode", "block_contents": "Yritystunnus sis\u00e4lt\u00e4en maatunnuksen"}, "doc.Fingrid.maximo_companies_cuscrmstatus": {"name": "maximo_companies_cuscrmstatus", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_cuscrmstatus", "block_contents": "Yrityksen status CRM:ss\u00e4"}, "doc.Fingrid.maximo_companies_cuscrms": {"name": "maximo_companies_cuscrms", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_cuscrms", "block_contents": "Yrityksen status CRM:ss\u00e4"}, "doc.Fingrid.maximo_companies_companiesid": {"name": "maximo_companies_companiesid", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_companiesid", "block_contents": "Yrityksen ID (numeerinen)"}, "doc.Fingrid.maximo_companies_cuscrmcustomerid": {"name": "maximo_companies_cuscrmcustomerid", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_cuscrmcustomerid", "block_contents": "Yrityksen ID CRM:ss\u00e4"}, "doc.Fingrid.maximo_companies_cuscrmparent": {"name": "maximo_companies_cuscrmparent", "resource_type": "doc", "package_name": "Fingrid", "path": "docblocs\\maximo_doc_blocs.md", "original_file_path": "models\\docblocs\\maximo_doc_blocs.md", "unique_id": "doc.Fingrid.maximo_companies_cuscrmparent", "block_contents": "Yrityksen emoyhti\u00f6n"}, "doc.Fingrid.sa_kunnonhallinta_enriched_location_substation_all_model": {"name": "sa_kunnonhallinta_enriched_location_substation_all_model", "resource_type": "doc", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "unique_id": "doc.Fingrid.sa_kunnonhallinta_enriched_location_substation_all_model", "block_contents": "Listaa kaikki s\u00e4hk\u00f6asemat Maximo locations-taulusta k\u00e4ytt\u00e4en classstructureid arvoja filterin\u00e4 (asema ja varavoimalaitos).\r\nEi rajaa tietoja statuksen perusteella."}, "doc.Fingrid.sa_kunnonhallinta_enriched_classstructure_translations_model": {"name": "sa_kunnonhallinta_enriched_classstructure_translations_model", "resource_type": "doc", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "unique_id": "doc.Fingrid.sa_kunnonhallinta_enriched_classstructure_translations_model", "block_contents": "Maximo classstructure taulun nimien k\u00e4\u00e4nn\u00f6kset."}, "doc.Fingrid.sa_kunnonhallinta_enriched_b_workarea_model": {"name": "sa_kunnonhallinta_enriched_b_workarea_model", "resource_type": "doc", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "unique_id": "doc.Fingrid.sa_kunnonhallinta_enriched_b_workarea_model", "block_contents": "Maximo ty\u00f6alueet locations ja classstructure tauluista. \r\nNoudetaan rivit, joiden parenttina on geneerinen ty\u00f6alue."}, "doc.Fingrid.sa_kunnonhallinta_enriched_b_substations_model": {"name": "sa_kunnonhallinta_enriched_b_substations_model", "resource_type": "doc", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "unique_id": "doc.Fingrid.sa_kunnonhallinta_enriched_b_substations_model", "block_contents": "Kokoaa kaikki s\u00e4hk\u00f6asemiin perustuvien tietotuotteiden attribuutit yhteen malliin. \r\nLocationspec-taulusta noudetaan lis\u00e4attribuutit FGLAJI, LAJI ja RYHM\u00c4."}, "doc.Fingrid.sa_kunnonhallinta_enriched_substations_workarea_model": {"name": "sa_kunnonhallinta_enriched_substations_workarea_model", "resource_type": "doc", "package_name": "Fingrid", "path": "sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "original_file_path": "models\\sa_kunnonhallinta\\enriched\\sa_kunnonhallinta_enriched_doc.md", "unique_id": "doc.Fingrid.sa_kunnonhallinta_enriched_substations_workarea_model", "block_contents": "Yhdist\u00e4\u00e4 s\u00e4hk\u00f6asematietoihin ty\u00f6alue- ja osoitetiedot (maximo service address)"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.Fingrid.b_substations": ["model.Fingrid.b_workarea", "model.Fingrid.classstructure_translations", "source.Fingrid.maximo.locations", "source.Fingrid.maximo.locationspec", "source.Fingrid.maximo.serviceaddress"], "model.Fingrid.b_workarea": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.locations"], "model.Fingrid.classstructure_translations": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.l_classstructure"], "model.Fingrid.sa_laiteluokittelu": ["seed.Fingrid.r_sa_laiteryhmaluokittelu", "source.Fingrid.maximo.classstructure"], "model.Fingrid.sa_laitepaikkaluokittelu": ["seed.Fingrid.r_sa_laitepaikkaryhmaluokittelu", "seed.Fingrid.r_sa_laitepaikkaryhmaluokittelu", "source.Fingrid.maximo.classstructure"], "model.Fingrid.d_erotin": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec", "source.Fingrid.maximo.classstructure"], "model.Fingrid.d_henkilo": ["source.Fingrid.maximo.labor", "source.Fingrid.maximo.person"], "model.Fingrid.d_jannitemuuntaja": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec", "source.Fingrid.maximo.classstructure"], "model.Fingrid.d_katkaisija": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec", "source.Fingrid.maximo.classstructure"], "model.Fingrid.d_laitepaikka_muuntaja": ["model.Fingrid.d_sa_laitepaikka", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.locations"], "model.Fingrid.d_laitepaikka_primaarilaite": ["model.Fingrid.d_sa_laitepaikka", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.locations"], "model.Fingrid.d_maadoituskytkin": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec", "source.Fingrid.maximo.classstructure"], "model.Fingrid.d_muuntaja": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec", "source.Fingrid.maximo.classstructure"], "model.Fingrid.d_sahkoasema": ["model.Fingrid.b_substations"], "model.Fingrid.d_sa_erotin": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"], "model.Fingrid.d_sa_jannitemuuntaja": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"], "model.Fingrid.d_sa_katkaisija": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"], "model.Fingrid.d_sa_kunnossapitosopimus": ["source.Fingrid.maximo.pluspagreement"], "model.Fingrid.d_sa_kunnossapitotyoluokittelu": ["source.Fingrid.maximo.classstructure"], "model.Fingrid.d_sa_laite": ["model.Fingrid.sa_laiteluokittelu", "source.Fingrid.maximo.asset", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.locations"], "model.Fingrid.d_sa_laitepaikka": ["model.Fingrid.sa_laitepaikkaluokittelu", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.locations", "source.Fingrid.maximo.lochierarchy"], "model.Fingrid.d_sa_maadoituskytkin": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"], "model.Fingrid.d_sa_muuntaja": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"], "model.Fingrid.d_sa_virtamuuntaja": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec"], "model.Fingrid.d_toimittaja": ["source.Fingrid.maximo.pluspcustomer"], "model.Fingrid.d_tyoalueet": ["source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.l_classstructure", "source.Fingrid.maximo.locations"], "model.Fingrid.d_virtamuuntaja": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.assetspec", "source.Fingrid.maximo.classstructure"], "model.Fingrid.d_yritys": ["source.Fingrid.maximo.asset", "source.Fingrid.maximo.companies"], "model.Fingrid.f_sa_kunnossapitokustannus": ["source.Fingrid.maximo.labtrans", "source.Fingrid.maximo.pluspgbtrans"], "model.Fingrid.f_sa_kunnossapitotyot": ["source.Fingrid.maximo.workorder"], "model.Fingrid.f_sa_laitemaarat": ["model.Fingrid.sa_laiteluokittelu", "source.Fingrid.maximo.asset", "source.Fingrid.maximo.classstructure", "source.Fingrid.maximo.locations"], "model.Fingrid.substation_api": ["model.Fingrid.b_substations"], "model.Fingrid.substation_api_table": ["model.Fingrid.b_substations"], "seed.Fingrid.r_sa_laitepaikkaryhmaluokittelu": [], "seed.Fingrid.r_sa_laiteryhmaluokittelu": [], "test.Fingrid.not_null_b_substations_substation_cusbusinessid.7c0a7988b8": ["model.Fingrid.b_substations"], "test.Fingrid.not_null_b_substations_substation_location.df31376b0e": ["model.Fingrid.b_substations"], "test.Fingrid.not_null_d_toimittaja_pluspcustomerid.050e5bad7c": ["model.Fingrid.d_toimittaja"], "test.Fingrid.unique_d_toimittaja_pluspcustomerid.3d9c171a5c": ["model.Fingrid.d_toimittaja"], "test.Fingrid.unique_d_toimittaja_customer.c7d356242d": ["model.Fingrid.d_toimittaja"], "test.Fingrid.not_null_d_henkilo_personid.1fd414bddd": ["model.Fingrid.d_henkilo"], "test.Fingrid.unique_d_henkilo_personid.8bb5149808": ["model.Fingrid.d_henkilo"], "test.Fingrid.relationships_d_henkilo_pluspcustomer__customer__ref_d_toimittaja_.176597c23d": ["model.Fingrid.d_henkilo", "model.Fingrid.d_toimittaja"], "test.Fingrid.not_null_d_henkilo_laborcode.1e58a77d94": ["model.Fingrid.d_henkilo"], "test.Fingrid.unique_d_henkilo_laborcode.2a09b25ed6": ["model.Fingrid.d_henkilo"], "test.Fingrid.not_null_d_henkilo_personuid.55459bf527": ["model.Fingrid.d_henkilo"], "test.Fingrid.unique_d_henkilo_personuid.847dd0e797": ["model.Fingrid.d_henkilo"], "test.Fingrid.not_null_d_tyoalueet_cusbusinessid.6056bd12a8": ["model.Fingrid.d_tyoalueet"], "test.Fingrid.unique_d_tyoalueet_cusbusinessid.33e0b42812": ["model.Fingrid.d_tyoalueet"], "test.Fingrid.not_null_d_sa_kunnossapitosopimus_pluspagreementid.41c6aa5a29": ["model.Fingrid.d_sa_kunnossapitosopimus"], "test.Fingrid.unique_d_sa_kunnossapitosopimus_pluspagreementid.39b8469583": ["model.Fingrid.d_sa_kunnossapitosopimus"], "test.Fingrid.unique_d_sa_kunnossapitosopimus_agreement.7fdb389545": ["model.Fingrid.d_sa_kunnossapitosopimus"], "test.Fingrid.relationships_d_sa_kunnossapitosopimus_customer__customer__ref_d_toimittaja_.db898073c1": ["model.Fingrid.d_sa_kunnossapitosopimus", "model.Fingrid.d_toimittaja"], "test.Fingrid.not_null_d_sa_laitepaikka_location.5f36287f07": ["model.Fingrid.d_sa_laitepaikka"], "test.Fingrid.unique_d_sa_laitepaikka_location.056aff77f1": ["model.Fingrid.d_sa_laitepaikka"], "test.Fingrid.relationships_d_sa_laitepaikka_cusworkarea__cusbusinessid__ref_d_tyoalueet_.c6804d2949": ["model.Fingrid.d_sa_laitepaikka", "model.Fingrid.d_tyoalueet"], "test.Fingrid.not_null_d_laitepaikka_primaarilaite_location.ff772a86ad": ["model.Fingrid.d_laitepaikka_primaarilaite"], "test.Fingrid.unique_d_laitepaikka_primaarilaite_location.db94ef3297": ["model.Fingrid.d_laitepaikka_primaarilaite"], "test.Fingrid.relationships_d_laitepaikka_primaarilaite_cusworkarea__cusbusinessid__ref_d_tyoalueet_.b020b8bb47": ["model.Fingrid.d_laitepaikka_primaarilaite", "model.Fingrid.d_tyoalueet"], "test.Fingrid.not_null_d_laitepaikka_muuntaja_substation.6859d75351": ["model.Fingrid.d_laitepaikka_muuntaja"], "test.Fingrid.not_null_d_laitepaikka_muuntaja_location.84a6498004": ["model.Fingrid.d_laitepaikka_muuntaja"], "test.Fingrid.relationships_d_laitepaikka_muuntaja_cusworkarea__cusbusinessid__ref_d_tyoalueet_.10661ddc6b": ["model.Fingrid.d_laitepaikka_muuntaja", "model.Fingrid.d_tyoalueet"], "test.Fingrid.not_null_f_sa_kunnossapitokustannus_cost_type.0cdc144d92": ["model.Fingrid.f_sa_kunnossapitokustannus"], "test.Fingrid.unique_f_sa_kunnossapitokustannus_pluspgbtransid.6df9e01834": ["model.Fingrid.f_sa_kunnossapitokustannus"], "test.Fingrid.unique_f_sa_kunnossapitokustannus_labtransid.428fccf2dc": ["model.Fingrid.f_sa_kunnossapitokustannus"], "test.Fingrid.relationships_f_sa_kunnossapitokustannus_agreement__agreement__ref_d_sa_kunnossapitosopimus_.80b8700d64": ["model.Fingrid.d_sa_kunnossapitosopimus", "model.Fingrid.f_sa_kunnossapitokustannus"], "test.Fingrid.relationships_f_sa_kunnossapitokustannus_laborcode__laborcode__ref_d_henkilo_.74c6878279": ["model.Fingrid.d_henkilo", "model.Fingrid.f_sa_kunnossapitokustannus"], "test.Fingrid.not_null_f_sa_kunnossapitotyot_wonum.45f4482649": ["model.Fingrid.f_sa_kunnossapitotyot"], "test.Fingrid.unique_f_sa_kunnossapitotyot_wonum.1987f4a0eb": ["model.Fingrid.f_sa_kunnossapitotyot"], "test.Fingrid.relationships_f_sa_kunnossapitotyot_cusworkarea__cusbusinessid__ref_d_tyoalueet_.248563f171": ["model.Fingrid.d_tyoalueet", "model.Fingrid.f_sa_kunnossapitotyot"], "test.Fingrid.not_null_d_erotin_ASSETNUM.bc289ace68": ["model.Fingrid.d_erotin"], "test.Fingrid.unique_d_erotin_ASSETNUM.51ba55c37f": ["model.Fingrid.d_erotin"], "test.Fingrid.not_null_d_katkaisija_ASSETNUM.da0ccb1d23": ["model.Fingrid.d_katkaisija"], "test.Fingrid.unique_d_katkaisija_ASSETNUM.aeaab35f99": ["model.Fingrid.d_katkaisija"], "test.Fingrid.not_null_d_maadoituskytkin_ASSETNUM.910d11d791": ["model.Fingrid.d_maadoituskytkin"], "test.Fingrid.unique_d_maadoituskytkin_ASSETNUM.703484cfb0": ["model.Fingrid.d_maadoituskytkin"], "test.Fingrid.not_null_d_muuntaja_ASSETNUM.5bc145a62b": ["model.Fingrid.d_muuntaja"], "test.Fingrid.unique_d_muuntaja_ASSETNUM.fbcb417006": ["model.Fingrid.d_muuntaja"], "test.Fingrid.not_null_d_virtamuuntaja_ASSETNUM.870790ba5a": ["model.Fingrid.d_virtamuuntaja"], "test.Fingrid.unique_d_virtamuuntaja_ASSETNUM.5f91fe2fcd": ["model.Fingrid.d_virtamuuntaja"], "test.Fingrid.not_null_d_jannitemuuntaja_ASSETNUM.6f9cafd5ba": ["model.Fingrid.d_jannitemuuntaja"], "test.Fingrid.unique_d_jannitemuuntaja_ASSETNUM.0313c8aa19": ["model.Fingrid.d_jannitemuuntaja"], "test.Fingrid.not_null_d_sahkoasema_substation_cusbusinessid.6f3c36128b": ["model.Fingrid.d_sahkoasema"], "test.Fingrid.not_null_d_sahkoasema_substation_location.d0e751ac33": ["model.Fingrid.d_sahkoasema"], "source.Fingrid.dataproduct.substation_list": [], "source.Fingrid.maximo.asset": [], "source.Fingrid.maximo.assetspec": [], "source.Fingrid.maximo.classstructure": [], "source.Fingrid.maximo.companies": [], "source.Fingrid.maximo.ASSETNUM": [], "source.Fingrid.maximo.LOCATION": [], "source.Fingrid.maximo.l_classstructure": [], "source.Fingrid.maximo.labor": [], "source.Fingrid.maximo.labtrans": [], "source.Fingrid.maximo.locations": [], "source.Fingrid.maximo.locationspec": [], "source.Fingrid.maximo.lochierarchy": [], "source.Fingrid.maximo.person": [], "source.Fingrid.maximo.pluspagreement": [], "source.Fingrid.maximo.pluspcustomer": [], "source.Fingrid.maximo.pluspgbtrans": [], "source.Fingrid.maximo.serviceaddress": [], "source.Fingrid.maximo.workorder": []}, "child_map": {"model.Fingrid.b_substations": ["model.Fingrid.d_sahkoasema", "model.Fingrid.substation_api", "model.Fingrid.substation_api_table", "test.Fingrid.not_null_b_substations_substation_cusbusinessid.7c0a7988b8", "test.Fingrid.not_null_b_substations_substation_location.df31376b0e"], "model.Fingrid.b_workarea": ["model.Fingrid.b_substations"], "model.Fingrid.classstructure_translations": ["model.Fingrid.b_substations"], "model.Fingrid.sa_laiteluokittelu": ["model.Fingrid.d_sa_laite", "model.Fingrid.f_sa_laitemaarat"], "model.Fingrid.sa_laitepaikkaluokittelu": ["model.Fingrid.d_sa_laitepaikka"], "model.Fingrid.d_erotin": ["test.Fingrid.not_null_d_erotin_ASSETNUM.bc289ace68", "test.Fingrid.unique_d_erotin_ASSETNUM.51ba55c37f"], "model.Fingrid.d_henkilo": ["test.Fingrid.not_null_d_henkilo_laborcode.1e58a77d94", "test.Fingrid.not_null_d_henkilo_personid.1fd414bddd", "test.Fingrid.not_null_d_henkilo_personuid.55459bf527", "test.Fingrid.relationships_d_henkilo_pluspcustomer__customer__ref_d_toimittaja_.176597c23d", "test.Fingrid.relationships_f_sa_kunnossapitokustannus_laborcode__laborcode__ref_d_henkilo_.74c6878279", "test.Fingrid.unique_d_henkilo_laborcode.2a09b25ed6", "test.Fingrid.unique_d_henkilo_personid.8bb5149808", "test.Fingrid.unique_d_henkilo_personuid.847dd0e797"], "model.Fingrid.d_jannitemuuntaja": ["test.Fingrid.not_null_d_jannitemuuntaja_ASSETNUM.6f9cafd5ba", "test.Fingrid.unique_d_jannitemuuntaja_ASSETNUM.0313c8aa19"], "model.Fingrid.d_katkaisija": ["test.Fingrid.not_null_d_katkaisija_ASSETNUM.da0ccb1d23", "test.Fingrid.unique_d_katkaisija_ASSETNUM.aeaab35f99"], "model.Fingrid.d_laitepaikka_muuntaja": ["test.Fingrid.not_null_d_laitepaikka_muuntaja_location.84a6498004", "test.Fingrid.not_null_d_laitepaikka_muuntaja_substation.6859d75351", "test.Fingrid.relationships_d_laitepaikka_muuntaja_cusworkarea__cusbusinessid__ref_d_tyoalueet_.10661ddc6b"], "model.Fingrid.d_laitepaikka_primaarilaite": ["test.Fingrid.not_null_d_laitepaikka_primaarilaite_location.ff772a86ad", "test.Fingrid.relationships_d_laitepaikka_primaarilaite_cusworkarea__cusbusinessid__ref_d_tyoalueet_.b020b8bb47", "test.Fingrid.unique_d_laitepaikka_primaarilaite_location.db94ef3297"], "model.Fingrid.d_maadoituskytkin": ["test.Fingrid.not_null_d_maadoituskytkin_ASSETNUM.910d11d791", "test.Fingrid.unique_d_maadoituskytkin_ASSETNUM.703484cfb0"], "model.Fingrid.d_muuntaja": ["test.Fingrid.not_null_d_muuntaja_ASSETNUM.5bc145a62b", "test.Fingrid.unique_d_muuntaja_ASSETNUM.fbcb417006"], "model.Fingrid.d_sahkoasema": ["test.Fingrid.not_null_d_sahkoasema_substation_cusbusinessid.6f3c36128b", "test.Fingrid.not_null_d_sahkoasema_substation_location.d0e751ac33"], "model.Fingrid.d_sa_erotin": [], "model.Fingrid.d_sa_jannitemuuntaja": [], "model.Fingrid.d_sa_katkaisija": [], "model.Fingrid.d_sa_kunnossapitosopimus": ["test.Fingrid.not_null_d_sa_kunnossapitosopimus_pluspagreementid.41c6aa5a29", "test.Fingrid.relationships_d_sa_kunnossapitosopimus_customer__customer__ref_d_toimittaja_.db898073c1", "test.Fingrid.relationships_f_sa_kunnossapitokustannus_agreement__agreement__ref_d_sa_kunnossapitosopimus_.80b8700d64", "test.Fingrid.unique_d_sa_kunnossapitosopimus_agreement.7fdb389545", "test.Fingrid.unique_d_sa_kunnossapitosopimus_pluspagreementid.39b8469583"], "model.Fingrid.d_sa_kunnossapitotyoluokittelu": [], "model.Fingrid.d_sa_laite": [], "model.Fingrid.d_sa_laitepaikka": ["model.Fingrid.d_laitepaikka_muuntaja", "model.Fingrid.d_laitepaikka_primaarilaite", "test.Fingrid.not_null_d_sa_laitepaikka_location.5f36287f07", "test.Fingrid.relationships_d_sa_laitepaikka_cusworkarea__cusbusinessid__ref_d_tyoalueet_.c6804d2949", "test.Fingrid.unique_d_sa_laitepaikka_location.056aff77f1"], "model.Fingrid.d_sa_maadoituskytkin": [], "model.Fingrid.d_sa_muuntaja": [], "model.Fingrid.d_sa_virtamuuntaja": [], "model.Fingrid.d_toimittaja": ["test.Fingrid.not_null_d_toimittaja_pluspcustomerid.050e5bad7c", "test.Fingrid.relationships_d_henkilo_pluspcustomer__customer__ref_d_toimittaja_.176597c23d", "test.Fingrid.relationships_d_sa_kunnossapitosopimus_customer__customer__ref_d_toimittaja_.db898073c1", "test.Fingrid.unique_d_toimittaja_customer.c7d356242d", "test.Fingrid.unique_d_toimittaja_pluspcustomerid.3d9c171a5c"], "model.Fingrid.d_tyoalueet": ["test.Fingrid.not_null_d_tyoalueet_cusbusinessid.6056bd12a8", "test.Fingrid.relationships_d_laitepaikka_muuntaja_cusworkarea__cusbusinessid__ref_d_tyoalueet_.10661ddc6b", "test.Fingrid.relationships_d_laitepaikka_primaarilaite_cusworkarea__cusbusinessid__ref_d_tyoalueet_.b020b8bb47", "test.Fingrid.relationships_d_sa_laitepaikka_cusworkarea__cusbusinessid__ref_d_tyoalueet_.c6804d2949", "test.Fingrid.relationships_f_sa_kunnossapitotyot_cusworkarea__cusbusinessid__ref_d_tyoalueet_.248563f171", "test.Fingrid.unique_d_tyoalueet_cusbusinessid.33e0b42812"], "model.Fingrid.d_virtamuuntaja": ["test.Fingrid.not_null_d_virtamuuntaja_ASSETNUM.870790ba5a", "test.Fingrid.unique_d_virtamuuntaja_ASSETNUM.5f91fe2fcd"], "model.Fingrid.d_yritys": [], "model.Fingrid.f_sa_kunnossapitokustannus": ["test.Fingrid.not_null_f_sa_kunnossapitokustannus_cost_type.0cdc144d92", "test.Fingrid.relationships_f_sa_kunnossapitokustannus_agreement__agreement__ref_d_sa_kunnossapitosopimus_.80b8700d64", "test.Fingrid.relationships_f_sa_kunnossapitokustannus_laborcode__laborcode__ref_d_henkilo_.74c6878279", "test.Fingrid.unique_f_sa_kunnossapitokustannus_labtransid.428fccf2dc", "test.Fingrid.unique_f_sa_kunnossapitokustannus_pluspgbtransid.6df9e01834"], "model.Fingrid.f_sa_kunnossapitotyot": ["test.Fingrid.not_null_f_sa_kunnossapitotyot_wonum.45f4482649", "test.Fingrid.relationships_f_sa_kunnossapitotyot_cusworkarea__cusbusinessid__ref_d_tyoalueet_.248563f171", "test.Fingrid.unique_f_sa_kunnossapitotyot_wonum.1987f4a0eb"], "model.Fingrid.f_sa_laitemaarat": [], "model.Fingrid.substation_api": [], "model.Fingrid.substation_api_table": [], "seed.Fingrid.r_sa_laitepaikkaryhmaluokittelu": ["model.Fingrid.sa_laitepaikkaluokittelu", "model.Fingrid.sa_laitepaikkaluokittelu"], "seed.Fingrid.r_sa_laiteryhmaluokittelu": ["model.Fingrid.sa_laiteluokittelu"], "test.Fingrid.not_null_b_substations_substation_cusbusinessid.7c0a7988b8": [], "test.Fingrid.not_null_b_substations_substation_location.df31376b0e": [], "test.Fingrid.not_null_d_toimittaja_pluspcustomerid.050e5bad7c": [], "test.Fingrid.unique_d_toimittaja_pluspcustomerid.3d9c171a5c": [], "test.Fingrid.unique_d_toimittaja_customer.c7d356242d": [], "test.Fingrid.not_null_d_henkilo_personid.1fd414bddd": [], "test.Fingrid.unique_d_henkilo_personid.8bb5149808": [], "test.Fingrid.relationships_d_henkilo_pluspcustomer__customer__ref_d_toimittaja_.176597c23d": [], "test.Fingrid.not_null_d_henkilo_laborcode.1e58a77d94": [], "test.Fingrid.unique_d_henkilo_laborcode.2a09b25ed6": [], "test.Fingrid.not_null_d_henkilo_personuid.55459bf527": [], "test.Fingrid.unique_d_henkilo_personuid.847dd0e797": [], "test.Fingrid.not_null_d_tyoalueet_cusbusinessid.6056bd12a8": [], "test.Fingrid.unique_d_tyoalueet_cusbusinessid.33e0b42812": [], "test.Fingrid.not_null_d_sa_kunnossapitosopimus_pluspagreementid.41c6aa5a29": [], "test.Fingrid.unique_d_sa_kunnossapitosopimus_pluspagreementid.39b8469583": [], "test.Fingrid.unique_d_sa_kunnossapitosopimus_agreement.7fdb389545": [], "test.Fingrid.relationships_d_sa_kunnossapitosopimus_customer__customer__ref_d_toimittaja_.db898073c1": [], "test.Fingrid.not_null_d_sa_laitepaikka_location.5f36287f07": [], "test.Fingrid.unique_d_sa_laitepaikka_location.056aff77f1": [], "test.Fingrid.relationships_d_sa_laitepaikka_cusworkarea__cusbusinessid__ref_d_tyoalueet_.c6804d2949": [], "test.Fingrid.not_null_d_laitepaikka_primaarilaite_location.ff772a86ad": [], "test.Fingrid.unique_d_laitepaikka_primaarilaite_location.db94ef3297": [], "test.Fingrid.relationships_d_laitepaikka_primaarilaite_cusworkarea__cusbusinessid__ref_d_tyoalueet_.b020b8bb47": [], "test.Fingrid.not_null_d_laitepaikka_muuntaja_substation.6859d75351": [], "test.Fingrid.not_null_d_laitepaikka_muuntaja_location.84a6498004": [], "test.Fingrid.relationships_d_laitepaikka_muuntaja_cusworkarea__cusbusinessid__ref_d_tyoalueet_.10661ddc6b": [], "test.Fingrid.not_null_f_sa_kunnossapitokustannus_cost_type.0cdc144d92": [], "test.Fingrid.unique_f_sa_kunnossapitokustannus_pluspgbtransid.6df9e01834": [], "test.Fingrid.unique_f_sa_kunnossapitokustannus_labtransid.428fccf2dc": [], "test.Fingrid.relationships_f_sa_kunnossapitokustannus_agreement__agreement__ref_d_sa_kunnossapitosopimus_.80b8700d64": [], "test.Fingrid.relationships_f_sa_kunnossapitokustannus_laborcode__laborcode__ref_d_henkilo_.74c6878279": [], "test.Fingrid.not_null_f_sa_kunnossapitotyot_wonum.45f4482649": [], "test.Fingrid.unique_f_sa_kunnossapitotyot_wonum.1987f4a0eb": [], "test.Fingrid.relationships_f_sa_kunnossapitotyot_cusworkarea__cusbusinessid__ref_d_tyoalueet_.248563f171": [], "test.Fingrid.not_null_d_erotin_ASSETNUM.bc289ace68": [], "test.Fingrid.unique_d_erotin_ASSETNUM.51ba55c37f": [], "test.Fingrid.not_null_d_katkaisija_ASSETNUM.da0ccb1d23": [], "test.Fingrid.unique_d_katkaisija_ASSETNUM.aeaab35f99": [], "test.Fingrid.not_null_d_maadoituskytkin_ASSETNUM.910d11d791": [], "test.Fingrid.unique_d_maadoituskytkin_ASSETNUM.703484cfb0": [], "test.Fingrid.not_null_d_muuntaja_ASSETNUM.5bc145a62b": [], "test.Fingrid.unique_d_muuntaja_ASSETNUM.fbcb417006": [], "test.Fingrid.not_null_d_virtamuuntaja_ASSETNUM.870790ba5a": [], "test.Fingrid.unique_d_virtamuuntaja_ASSETNUM.5f91fe2fcd": [], "test.Fingrid.not_null_d_jannitemuuntaja_ASSETNUM.6f9cafd5ba": [], "test.Fingrid.unique_d_jannitemuuntaja_ASSETNUM.0313c8aa19": [], "test.Fingrid.not_null_d_sahkoasema_substation_cusbusinessid.6f3c36128b": [], "test.Fingrid.not_null_d_sahkoasema_substation_location.d0e751ac33": [], "source.Fingrid.dataproduct.substation_list": [], "source.Fingrid.maximo.asset": ["model.Fingrid.d_erotin", "model.Fingrid.d_jannitemuuntaja", "model.Fingrid.d_katkaisija", "model.Fingrid.d_maadoituskytkin", "model.Fingrid.d_muuntaja", "model.Fingrid.d_sa_erotin", "model.Fingrid.d_sa_jannitemuuntaja", "model.Fingrid.d_sa_katkaisija", "model.Fingrid.d_sa_laite", "model.Fingrid.d_sa_maadoituskytkin", "model.Fingrid.d_sa_muuntaja", "model.Fingrid.d_sa_virtamuuntaja", "model.Fingrid.d_virtamuuntaja", "model.Fingrid.d_yritys", "model.Fingrid.f_sa_laitemaarat"], "source.Fingrid.maximo.assetspec": ["model.Fingrid.d_erotin", "model.Fingrid.d_jannitemuuntaja", "model.Fingrid.d_katkaisija", "model.Fingrid.d_maadoituskytkin", "model.Fingrid.d_muuntaja", "model.Fingrid.d_sa_erotin", "model.Fingrid.d_sa_jannitemuuntaja", "model.Fingrid.d_sa_katkaisija", "model.Fingrid.d_sa_maadoituskytkin", "model.Fingrid.d_sa_muuntaja", "model.Fingrid.d_sa_virtamuuntaja", "model.Fingrid.d_virtamuuntaja"], "source.Fingrid.maximo.classstructure": ["model.Fingrid.b_workarea", "model.Fingrid.classstructure_translations", "model.Fingrid.d_erotin", "model.Fingrid.d_jannitemuuntaja", "model.Fingrid.d_katkaisija", "model.Fingrid.d_laitepaikka_muuntaja", "model.Fingrid.d_laitepaikka_primaarilaite", "model.Fingrid.d_maadoituskytkin", "model.Fingrid.d_muuntaja", "model.Fingrid.d_sa_kunnossapitotyoluokittelu", "model.Fingrid.d_sa_laite", "model.Fingrid.d_sa_laitepaikka", "model.Fingrid.d_tyoalueet", "model.Fingrid.d_virtamuuntaja", "model.Fingrid.f_sa_laitemaarat", "model.Fingrid.sa_laiteluokittelu", "model.Fingrid.sa_laitepaikkaluokittelu"], "source.Fingrid.maximo.companies": ["model.Fingrid.d_yritys"], "source.Fingrid.maximo.ASSETNUM": [], "source.Fingrid.maximo.LOCATION": [], "source.Fingrid.maximo.l_classstructure": ["model.Fingrid.classstructure_translations", "model.Fingrid.d_tyoalueet"], "source.Fingrid.maximo.labor": ["model.Fingrid.d_henkilo"], "source.Fingrid.maximo.labtrans": ["model.Fingrid.f_sa_kunnossapitokustannus"], "source.Fingrid.maximo.locations": ["model.Fingrid.b_substations", "model.Fingrid.b_workarea", "model.Fingrid.d_laitepaikka_muuntaja", "model.Fingrid.d_laitepaikka_primaarilaite", "model.Fingrid.d_sa_laite", "model.Fingrid.d_sa_laitepaikka", "model.Fingrid.d_tyoalueet", "model.Fingrid.f_sa_laitemaarat"], "source.Fingrid.maximo.locationspec": ["model.Fingrid.b_substations"], "source.Fingrid.maximo.lochierarchy": ["model.Fingrid.d_sa_laitepaikka"], "source.Fingrid.maximo.person": ["model.Fingrid.d_henkilo"], "source.Fingrid.maximo.pluspagreement": ["model.Fingrid.d_sa_kunnossapitosopimus"], "source.Fingrid.maximo.pluspcustomer": ["model.Fingrid.d_toimittaja"], "source.Fingrid.maximo.pluspgbtrans": ["model.Fingrid.f_sa_kunnossapitokustannus"], "source.Fingrid.maximo.serviceaddress": ["model.Fingrid.b_substations"], "source.Fingrid.maximo.workorder": ["model.Fingrid.f_sa_kunnossapitotyot"]}}